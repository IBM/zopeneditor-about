import{c as a}from"./app.f10ca940.js";import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";var n="/zopeneditor-about/assets/macro-functionality.c0137f84.gif";const s={},o=a(`<h1 id="custom-macros-for-hlasm" tabindex="-1"><a class="header-anchor" href="#custom-macros-for-hlasm" aria-hidden="true">#</a> Custom Macros for HLASM</h1><p>With the release of IBM Z Open Editor 4.2.0, custom macros are now supported for your HLASM programs. Macro libraries will be declared in your <code>zapp.yaml</code> file and used to find your custom macros. All macros that are located in your macro library will now support hover, document links, and <code>Go to Definition</code>. If a custom macro is found and used at least once in a program, it will also be available when using code completion and content assist.</p><p>Files that contain multiple macros are supported as well as single macro files. Currently, only local macro libraries are supported.</p><h2 id="declaring-macro-libraries-in-your-zapp-yaml-file" tabindex="-1"><a class="header-anchor" href="#declaring-macro-libraries-in-your-zapp-yaml-file" aria-hidden="true">#</a> Declaring Macro Libraries in your <code>zapp.yaml</code> file</h2><p>To locate macros from your MACLIB, you need to create a new library in your ZAPP named <code>maclib</code>.</p><p>The following ZAPP snippet shows a property group declaration for HLASM containing a MACLIB entry:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hlasm<span class="token punctuation">-</span>local
  <span class="token key atrule">language</span><span class="token punctuation">:</span> hlasm
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maclib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;**/ASMMAC&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>You can declare any number of locations, but they need to be under the <code>maclib</code> library to be scanned for macros.</p><h2 id="accessing-custom-macros-from-hlasm-programs" tabindex="-1"><a class="header-anchor" href="#accessing-custom-macros-from-hlasm-programs" aria-hidden="true">#</a> Accessing Custom Macros from HLASM Programs</h2><p>When the custom macros resolve correctly in your HLASM programs, you can see underlines (document links) appear under all the located custom macros in your program. You can hover over the macro to see the declaration and contents. If you want to directly access the macro, you can use <code>Ctrl+Click</code> (Windows) or <code>Cmd+Click</code> (Mac) to open it. Alternatively, you can right click and select <code>Go to Definition</code> and the editor will take you directly to the line where that macro is declared.</p><p>The following gif shows this functionality:</p><p><img src="`+n+'" alt="example of custom macro functionality"></p><h2 id="settings-for-custom-macros" tabindex="-1"><a class="header-anchor" href="#settings-for-custom-macros" aria-hidden="true">#</a> Settings for Custom Macros</h2><p>The following settings are added to support the new custom macros feature:</p><ol><li><code>zopeneditor.hlasm.enableCustomMacrosWarnings</code>: This setting is enabled by default and will place warnings under all custom macros that cannot be found in your HLASM programs. Disable this setting if you do not want to see these warnings.</li><li><code>zopeneditor.hlasm.reduceCustomMacroLogging</code>: This setting is disabled by default and will accelerate custom macro scanning performance at the cost of a reduced number of logs provided for the user. When the setting is disabled, you can debug and see which documents are being requested by the language server. Those document requests are not sent when the setting is enabled, allowing the language server to handle everything internally so that no communication is logged.</li></ol>',15);function t(r,c){return o}var u=e(s,[["render",t]]);export{u as default};
