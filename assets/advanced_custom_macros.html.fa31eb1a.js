import{r,o as i,a as c,b as a,d as n,w as t,F as l,c as o,e}from"./app.0ad13b50.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";var p="/zopeneditor-about/assets/macro-functionality.c0137f84.gif",m="/zopeneditor-about/assets/custom-macro-code-completion.81ed7c5e.gif",u="/zopeneditor-about/assets/hlasm-context-menu.ef08c456.png";const h={},f=o('<h1 id="custom-macros-for-hlasm" tabindex="-1"><a class="header-anchor" href="#custom-macros-for-hlasm" aria-hidden="true">#</a> Custom Macros for HLASM</h1><p>With the release of IBM Z Open Editor 5.2.0, both local and remote custom macros are supported for your HLASM programs as an advanced feature. Macro support in Z Open Editor is centered around three main capabilities</p><ul><li>hovers</li><li>document links with &quot;Go to Definition&quot;</li><li>code completion</li></ul><p>The availability of these capabilities are dependent on the configuration of Z Open Editor that you are using:</p><ul><li>The free version of Z Open Editor provides all three capabilities for default z/OS macros stored in SYS1.MACLIB, as well as hovers and links for COPY files.</li><li>The advanced features version of Z Open Editor adds document links and hovers for local macros and macros stored in data sets.</li><li>The advanced features version of Z Open Editor in combination with the IBM Remote System Explorer (RSE) API server and Zowe profiles adds code completion for custom macros. If you are using z/OSMF Zowe profiles only hovers and links will be available.</li></ul>',5),g=e("In order to use code completion, you must have an IBM RSE API profile as your default Z Open Editor CLI profile. See section "),b=a("code",null,"zopeneditor.zowe",-1),y=e(" settings explained"),_=e(" for more information on configuring your default CLI profile. IBM Z Open Editor uses RSE API to scan remote maclibs and cache the results. The scan data is then used to retrieve the macro data sets. See "),w=a("a",{href:"#managing-the-remote-maclib-cache"},"Managing the Remote Maclib Cache",-1),v=e(" for more details on refreshing the cache when modifying your remote maclibs. Files that contain multiple macros are supported as well as single-macro files."),k=o(`<h2 id="declare-macro-libraries-in-your-zapp-yaml-file" tabindex="-1"><a class="header-anchor" href="#declare-macro-libraries-in-your-zapp-yaml-file" aria-hidden="true">#</a> Declare Macro Libraries in your <code>zapp.yaml</code> file</h2><p>Macro libraries can be declared in your <code>zapp.yaml</code> file and used to find your custom macros. To locate macros from your MACLIB, you need to create a new library in your ZAPP named <code>maclib</code>.</p><p>The following ZAPP snippet shows a property group declaration for HLASM that contain a MACLIB entry:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hlasm<span class="token punctuation">-</span>maclibs
  <span class="token key atrule">language</span><span class="token punctuation">:</span> hlasm
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maclib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;**/ASMMAC&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maclib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;IBMUSER.ASM.MACLIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,4),M=e("You can declare any number of locations, but they need to be under the "),A=a("code",null,"maclib",-1),C=e(" library to be scanned for macros. Note that macros contained in maclib entries will not be available for resolving with "),S=a("code",null,"COPY",-1),I=e(" statements. See section "),x=e("syslib"),P=e(" for more information on setting up your ZAPP file for "),L=a("code",null,"COPY",-1),z=e(" statements."),E=o('<h2 id="access-custom-macros-from-hlasm-programs" tabindex="-1"><a class="header-anchor" href="#access-custom-macros-from-hlasm-programs" aria-hidden="true">#</a> Access Custom Macros from HLASM Programs</h2><p>When the custom macros resolve correctly in your HLASM programs, you can see underlines (document links) appear under all the located custom macros in your program. You can hover over the macro to see the declaration and contents. If you want to directly access the macro, you can use <code>Ctrl+Click</code> (Windows) or <code>Cmd+Click</code> (Mac) to open it. Alternatively, you can right click and select <code>Go to Definition</code> and the editor takes you directly to the line where that macro is declared.</p><p>The following gif shows this functionality:</p><p><img src="'+p+'" alt="example of custom macro functionality"></p><h2 id="code-completion-for-custom-macros" tabindex="-1"><a class="header-anchor" href="#code-completion-for-custom-macros" aria-hidden="true">#</a> Code Completion for Custom Macros</h2><p>If you are running an IBM RSE API server version 1.2.0 or newer, your local and custom macros will be available in code completion with all of their parameters available for snippet-style code completion, just as you would expect when using code completion for operations and SYS1.MACLIB macros. If your RSEAPI server is on an earlier version, you can still see your custom macros in the code completion list, but no snippet-style completion will be available as the macro parameters are not available through the scan service.</p><p>The following gif shows a custom macro appearing in the code completion results. Note the following highlights:</p><ul><li>You can see how the parameters can be previewed</li><li>When the macro is selected the parameters are filled in using snippet-style completion and you are able to use <code>tab</code> to navigate to the next parameter and <code>shift+tab</code> to navigate to the previous parameter</li><li>After the macro is selected, a document link underline appears under the macro, see <a href="#accessing-custom-macros-from-hlasm-programs">Accessing Custom Macros from HLASM Programs</a> for how to access the macro source</li></ul><p><img src="'+m+'" alt="example of custom macro code completion"></p><h2 id="settings-for-custom-macros" tabindex="-1"><a class="header-anchor" href="#settings-for-custom-macros" aria-hidden="true">#</a> Settings for Custom Macros</h2><p>The following settings are added to support the new custom macros feature:</p><ol><li><code>zopeneditor.hlasm.enableCustomMacrosWarnings</code>: This setting is enabled by default and places warnings under all custom macros that cannot be found in your HLASM programs. Disable this setting, if you do not want to see these warnings.</li><li><code>zopeneditor.hlasm.reduceCustomMacroLogging</code>: This setting is disabled by default and accelerates custom macro scanning performance at the cost of a reduced number of logs provided for the user. When the setting is disabled, you can debug and see which documents are being requested by the language server. Those document requests are not sent when the setting is enabled, allows the language server to handle everything internally so that no communication is logged.</li></ol><h2 id="managing-the-remote-maclib-cache" tabindex="-1"><a class="header-anchor" href="#managing-the-remote-maclib-cache" aria-hidden="true">#</a> Managing the Remote Maclib Cache</h2><p>IBM Z Open Editor maintains a cache for remote macros using VSCode&#39;s memento storage API. Each workspace that contains a <code>zapp.yaml</code> file will have its own cache. The cache will be cleared and a new scan kicked off in these two scenarios:</p><ol><li>Whenever a change is made to a workspace&#39;s ZAPP file</li><li>The cache can be manually refreshed by executing the command <code>hlasm.refreshMaclibs</code>. You may want to do this if you&#39;ve made changes to files in your maclib without changes to your ZAPP file. The language server will react similar to a ZAPP change, all of your documents will be reparsed and local and remote copy members and macros will be requested again after the scan is complete. You can access this command in the context menu or using the command palette, see the following screenshot:</li></ol><p><img src="'+u+'" alt="HLASM Context Menu"></p>',16);function T(Z,B){const s=r("RouterLink");return i(),c(l,null,[f,a("p",null,[g,n(s,{to:"/Docs/interact_zos_zopeneditor.html#zopeneditorzowe-settings-explained"},{default:t(()=>[b,y]),_:1}),_,w,v]),k,a("p",null,[M,A,C,S,I,n(s,{to:"/Docs/setting_propertygroup.html#syslib"},{default:t(()=>[x]),_:1}),P,L,z]),E],64)}var Y=d(h,[["render",T]]);export{Y as default};
