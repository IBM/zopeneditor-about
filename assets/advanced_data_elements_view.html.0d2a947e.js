import{r as i,o as d,a as l,b as t,d as a,w as o,F as h,e,c as s}from"./app.1362f0f1.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var p="/zopeneditor-about/assets/data-elements-view-layout.daf38522.png",g="/zopeneditor-about/assets/data-elements-view-search.73f025d7.png";const u={},m=t("h1",{id:"data-elements-view",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#data-elements-view","aria-hidden":"true"},"#"),e(" Data Elements View")],-1),f=e("The Data Elements view provides a data table to explore data elements within your COBOL or PL/I program files. It supports browse, sort, and filter data elements from both programs and their associated copybook or include files. This is an advanced capability available with an "),b=e("active license"),w=e("."),y=t("h2",{id:"opening-the-data-elements-view",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#opening-the-data-elements-view","aria-hidden":"true"},"#"),e(" Opening the Data Elements View")],-1),v=e("To open a program in the Data Elements view, it must first be successfully parsed by the language servers. This requires the program to be free of critical syntax errors and all referenced copybooks or include files to be "),E=e("properly resolved"),_=e(". Any issues that may impede parsing are reported in the "),C={href:"https://code.visualstudio.com/docs/editing/editingevolved#_errors-warnings",target:"_blank",rel:"noopener noreferrer"},x=e("Problems view"),D=e(" within VS Code, where users can identify and address them accordingly. If a program that cannot be parsed is opened in the Data Elements View, an error message is displayed."),T=s("<p>The Data Elements View can be opened in the following ways:</p><ul><li><code>Cmd \u2318</code>/<code>Ctrl</code> + <code>Shift</code> + <code>P</code> to open the command palette and run the command <strong><code>&gt;IBM Z Open Editor: Open Data Elements View</code></strong> while you view a COBOL or PL/I program.</li><li>Right-click within a COBOL or PL/I program and select <strong>Show In &gt; Data Elements View</strong>.</li></ul>",2),I=e("Either method is available for local programs or for remote programs accessed through Zowe Explorer or the "),L=e("z/OS Resources Table"),O=e(". The view opens in the VS Code panel by default but can be repositioned to other areas of the editor if required. The view cannot be opened from a copybook or include file."),S=s('<h2 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> Layout</h2><p><img src="'+p+'" alt="&#39;data-elements-view-layout&#39;"></p><p>Under default settings, all data elements excluding unnamed items and implicit declarations are displayed in rows. Click any column header to sort the table by that column. Click again to toggle between ascending and descending order. Click a row in the table to display and highlight the corresponding data in the program.</p><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h3><h4 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> Search</h4><p><img src="'+g+'" alt="&#39;data-elements-view-search&#39;"></p><p>Click the magnifying glass icon to open the search input field. As you enter text, the table dynamically updates to show only the rows with matching values. The search supports both text and numeric input. To clear the search and restore the full table, click the \u201C\xD7\u201D icon on the right side of the input field.</p><p>With Z Open Editor v5.6.0, you can search for data elements using regular expressions by enabling the <strong>Use Regular Expression</strong> toggle. This toggle appears after you expand the search input field.</p><p>When the toggle is enabled, the search input is interpreted as a regular expression pattern. Enter the pattern directly, without enclosing it in forward slashes. Patterns must follow JavaScript regex syntax, including proper character escaping. Matching is case-insensitive, and other regular expression flags are not supported. For example, enabling the regular expression toggle and entering <code>PIC X\\(\\d{3}\\)</code> returns COBOL data elements with alphanumeric field declarations that specify a three-digit length using the <code>PIC X(...)</code> format.</p><h4 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h4><p>Click the <strong>Filter</strong> button to open a menu that contains check boxes to control the visibility of data elements:</p><ul><li><strong>Hide Unnamed</strong> - filters out unnamed data items. This filter is enabled by default.</li><li><strong>Hide program labels</strong> - filters out program labels.</li><li><strong>Hide implicit declarations</strong> - filters out implicitly defined data items and limits the view to elements the developer defines directly. This filter is enabled by default.</li><li><strong>Hide all items except program labels</strong> - filters out all data items except program labels, such as paragraphs and certain section names.</li></ul><p>Enabling or disabling filters does not take effect until the filter is submitted. Click the reset button to restore filters to their default state.</p><h4 id="refresh" tabindex="-1"><a class="header-anchor" href="#refresh" aria-hidden="true">#</a> Refresh</h4><p>The <strong>Refresh</strong> button is disabled by default. The view refreshes automatically whenever a file open in the Data Elements View is edited and saved. This automatic refresh behavior can be disabled through the Settings menu. When disabled, the <strong>Refresh</strong> button becomes active and enables manual updates to the Data Elements View. In this mode, click the <strong>Refresh</strong> button to manually update the view and reflect any changes made to the program.</p><h4 id="export-data-to-csv" tabindex="-1"><a class="header-anchor" href="#export-data-to-csv" aria-hidden="true">#</a> Export Data to CSV</h4><p>With Z Open Editor v5.6.0, you can use the <strong>Export to CSV</strong> action to export data elements from a COBOL or PL/I program to a CSV file. Click the <strong>Export to CSV</strong> button to open a VS Code quick pick menu that lets you configure the following options:</p><table><thead><tr><th>Setting Name</th><th>Options (first is default)</th><th>Description</th></tr></thead><tbody><tr><td>Data Format</td><td><strong>Header and Data</strong>, <strong>Key and Value</strong>, <strong>Data Only</strong></td><td>Controls how data is structured in the CSV output.</td></tr><tr><td>CSV Delimiter</td><td><strong>Comma (,)</strong>, <strong>Caret (^)</strong>, <strong>Colon (\u{1F603}</strong>, <strong>Semicolon (\u{1F609}</strong>, <strong>Space ( )</strong>, <strong>Tab (\\t)</strong></td><td>Specifies the character used to separate fields in the CSV.</td></tr><tr><td>Surround fields with quotes (&quot;)</td><td><strong>Yes</strong>, <strong>No</strong></td><td>Determines whether each field in the CSV is enclosed in double quotes.</td></tr><tr><td>Output</td><td><strong>Export to file</strong>, <strong>Open in new text editor</strong></td><td>Specifies whether the CSV content is saved to a file or opened in a new editor window.</td></tr></tbody></table><p>Select <strong>Submit</strong> to export the data elements with the chosen settings.</p><h4 id="settings" tabindex="-1"><a class="header-anchor" href="#settings" aria-hidden="true">#</a> Settings</h4><p>The <strong>Settings</strong> menu in the Data Elements View provides control over automatic refresh behavior and column visibility. As mentioned before, the Data Elements View automatically updates whenever a file is edited and saved. Disabling <strong>Refresh Automatically</strong> activates the <strong>Refresh</strong> button and enables manual updates to the view as required.</p><p>Columns visibility in the Data Elements View can be customized. All columns are visible by default:</p><ul><li>Data item name</li><li>Declared level</li><li>Top-level structure name</li><li>Declaration data</li><li>Declaration location</li><li>Declaration line number</li><li>Number of references to the data item</li><li>Length of the data item</li><li>Offset of the data item</li><li>Item type</li></ul><p>To hide a column, unselect its header in the <strong>Settings</strong> menu.</p><p>Changes to the check boxes do not take effect until <strong>Submit</strong> is selected. Click the reset button to restore all settings to their default state: automatic refresh enabled and all columns visible.</p><p>After submission, settings are saved and persist across VS Code sessions.</p><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><ul><li>The Data Elements View cannot be opened from a copybook or include file.</li><li>Data elements defined within user-defined functions are not supported.</li></ul><h3 id="length-and-offset-of-pl-i-data-items" tabindex="-1"><a class="header-anchor" href="#length-and-offset-of-pl-i-data-items" aria-hidden="true">#</a> Length and offset of PL/I data items</h3><p>The length and offset can be calculated for the following types of PL/I data elements: BINARY, BIT, CHARACTER, COMPLEX, DECIMAL, DIMENSION, FIXED, FLOAT, GRAPHIC, HANDLE, NONVARYING, PICTURE, POINTER, REAL, SIGNED, UNSIGNED, UNION, VARYING, VARYING4, VERYINGZ, WIDECHAR, WIDEPIC.</p><p>The following information can be displayed in the Length and Offset columns of the Data Elements view:</p><table><thead><tr><th><strong>Content</strong></th><th><strong>Explanation</strong></th></tr></thead><tbody><tr><td>A non-negative integer</td><td>The Length or Offset of the data item, measured in 1-byte increments. Offset origins start at 1, unlike in other languages where offsets often begin at 0.</td></tr><tr><td>Blank or empty</td><td>- The table item is not a data item, but a different type of string, such as a program label or paragraph name. <br> - The source language is not supported by the table view.</td></tr><tr><td>Ellipsis (...)</td><td>- The source file contains more than one program, and the data item is located within the program unit that is not the first in the file. <br> - The data item contains no relevant data to display, such as when it is a FILLER or an unnamed item. <br> - The data item is a LEVEL 88, which contains no relevant data to display.</td></tr><tr><td>***</td><td>The following data element types are out of scope because they are created through dynamic allocation. Their length and offset values are returned as 0 in the API: <ul><li>Controlled and based variables</li><li>TYPE, LIKE, and UNALIGNED attributes</li><li>AREA variable</li></ul></td></tr></tbody></table><h3 id="length-and-offset-of-cobol-data-items" tabindex="-1"><a class="header-anchor" href="#length-and-offset-of-cobol-data-items" aria-hidden="true">#</a> Length and offset of COBOL data items</h3><p>The following information can be displayed in the Length and Offset columns of the Data Elements view.</p><table><thead><tr><th><strong>Content</strong></th><th><strong>Explanation</strong></th></tr></thead><tbody><tr><td>A non-negative integer</td><td>- The Length or Offset of the data item, measured in 1-byte increments. Offset origins start at 1, unlike in other languages where offsets often begin at 0. <br> - For an element declared with <code>OCCURS DEPENDING ON</code> and for succeeding elements, the offset values are based on the maximum length of the <code>OCCURS DEPENDING ON</code> element.</td></tr><tr><td>Blank or empty</td><td>- The table item is not a data item, but a different type of string, such as a program label or paragraph name. <br> - The source language is not supported by the table view.</td></tr><tr><td>Ellipsis (...)</td><td>- The source file contains more than one program, and the data item is located within the program unit that is not the first in the file. <br> - The data item contains no relevant data to display, such as when it is a <code>FILLER</code> or an unnamed item. <br> - The data item is a <code>LEVEL 88</code>, which contains no relevant data to display.</td></tr></tbody></table>',35);function V(k,N){const n=i("RouterLink"),r=i("ExternalLinkIcon");return d(),l(h,null,[m,t("p",null,[f,a(n,{to:"/Docs/advanced_activation.html"},{default:o(()=>[b]),_:1}),w]),y,t("p",null,[v,a(n,{to:"/Docs/setting_propertygroup.html"},{default:o(()=>[E]),_:1}),_,t("a",C,[x,a(r)]),D]),T,t("p",null,[I,a(n,{to:"/Docs/advanced_resource_table.html"},{default:o(()=>[L]),_:1}),O]),S],64)}var P=c(u,[["render",V]]);export{P as default};
