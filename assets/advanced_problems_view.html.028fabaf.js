import{r as s,o as a,a as r,b as e,d as o,w as l,F as d,e as t,c as u}from"./app.d27a84b3.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";var c="/zopeneditor-about/assets/user-build-problems.b55ed528.png";const h={},b=e("h1",{id:"user-build-with-ibm-dependency-based-build-dbb",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-build-with-ibm-dependency-based-build-dbb","aria-hidden":"true"},"#"),t(" User build with IBM Dependency Based Build (DBB)")],-1),m=e("h2",{id:"user-build",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-build","aria-hidden":"true"},"#"),t(" User build")],-1),f=e("p",null,"When you edit enterprise application code in Z\xAE Open Editor, you get language support provided by our language servers that gives you code completion and real-time syntax errors. However, the language servers utilized in Z Open Editor can only identify problems that a parser can detect such as basic syntax errors. A compiler goes through many more stages after parsing, provides much more information and warning messages to problems that a parser cannot detect. Therefore, sometimes it is necessary to actually build the program and review the compiler output to ensure your program is correct, limited of course to what the compiler can detect without actually running tests.",-1),g=e("p",null,'For a seamless user experience to build for developers, Z Open Editor provides an integration with IBM\xAE Dependency Based Build called "user build". It allows team members to share a configuration file which defines how to build programs and an integration into VS Code to execute a build that uploads the program through Zowe\u2122 Explorer with its dependencies to z/OS\xAE, execute the build, and download build logs to be presented in the editor.',-1),_=t("We provide detailed documentation for setting up and running user build with DBB v2 and the Groovy scripts provided by the "),w={href:"https://github.com/IBM/dbb-zappbuild",target:"_blank",rel:"noopener noreferrer"},y=t("dbb-zappbuild Github repository"),v=t(" in our "),k={href:"https://www.ibm.com/docs/en/developer-for-zos/16.0?topic=code-building-cobol-pli-hlasm-programs-user-build",target:"_blank",rel:"noopener noreferrer"},B=t("IBM Knowledge Center"),x=t("."),I=e("h2",{id:"user-build-with-dbb-v3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-build-with-dbb-v3","aria-hidden":"true"},"#"),t(" User build with DBB v3")],-1),O={href:"https://www.ibm.com/docs/en/dbb/3.0",target:"_blank",rel:"noopener noreferrer"},P=t("Dependency Based Build version 3"),q=t(" provides a new YAML based build scripting framework called zBuilder. With zBuilder the setup and configuration work for developers has been vastly simplified. The assumption is that build scripts and configuration files have been provided by the team lead or build engineer on z/OS together with the DBB installation. Developers only have to configure the location of files and basic settings such as their personal HLQ for the user build to be executed from Z Open Editor."),S=t("See the "),D={href:"https://www.ibm.com/docs/en/dbb/3.0?topic=zbuilder-getting-started",target:"_blank",rel:"noopener noreferrer"},z=t("DBB v3 zBuilder document"),Z=t(" for an overview of the five basic z/OS setup steps. Step 4 talks about creating the dbb-app.yaml file which is shared with developer together with a "),E=e("a",{href:"./zapp"},"ZAPP",-1),A=t(" profile for the build."),T=e("p",null,"The developer can perform the following setup steps in Z Open Editor:",-1),L=e("strong",null,"Setup your UNIX System Services profile",-1),U=t(": As the remote build execution is done on the z/OS UNIX system, some basic environment variables have to be configured to be able to run the build. The minimum set is "),M=e("code",null,"DBB_HOME",-1),C=t(", "),H=e("code",null,"DBB_CONF",-1),R=t(", and "),N=e("code",null,"DBB_BUILD",-1),V=t(". See the "),F={href:"https://www.ibm.com/docs/en/dbb/3.0?topic=customization-environment-variables",target:"_blank",rel:"noopener noreferrer"},G=t("DBB environment variables"),W=t(" page with details."),Y=e("strong",null,"Create a zapp.yaml file with a DBB v3 build profile",-1),j=t(": The "),Q=e("code",null,"dbb",-1),X=t(),$=e("a",{href:"./zapp"},"ZAPP",-1),K=t(" profile type has been extended with Z Open Editor v5 to support now building with DBB v3. It also still supports v2/v1 build scripts. It allows specifying local settings such as the HLQ to use for building or log file locations that the build engineer would not know about when creating the dbb-app.yaml file. It is also required to provide valid "),J=t("property groups"),ee=t(" in the ZAPP file so that the editor can find dependencies such as copybooks, it then uploads together with the program file for the build."),te=e("li",null,[e("strong",null,"Provide the dbb-app.yaml for your application"),t(": Add the dbb-app.yaml provided by your build engineer in your workspace folder next to the zapp.yaml file.")],-1),oe=t("You can find examples for a (2) and (3) in our Github sample repository. We show how such files could look like in a "),ne={href:"https://github.com/IBM/zopeneditor-sample/tree/wazi-main",target:"_blank",rel:"noopener noreferrer"},se=t("single root workspace"),ie=t(" as well as "),ae={href:"https://github.com/IBM/zopeneditor-sample/tree/wazi-main/multiroot",target:"_blank",rel:"noopener noreferrer"},re=t("multi-root workspace"),le=t("."),de=u(`<p>A ZAPP profile for DBB v3 that you can find in these samples looks like this</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">profiles</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zBuilder<span class="token punctuation">-</span>userbuild
    <span class="token key atrule">type</span><span class="token punctuation">:</span> dbb
    <span class="token key atrule">settings</span><span class="token punctuation">:</span>
      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;$DBB_HOME/bin/dbb build&quot;</span>
      <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span> user
      <span class="token key atrule">lifecycleArgs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--hlq \${zopeneditor.userbuild.userSettings.dbbHlq}&quot;</span>
      <span class="token key atrule">additionalDependencies</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;dbb-app.yaml&quot;</span>
      <span class="token key atrule">logFilePatterns</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;\${buildFile.basename}-*.log&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;BuildReport.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>The example shows:</p><ul><li>How you can use variables from the Z Open Editor user settings to provide your specific HLQ to the build command.</li><li>How you can specify additional dependencies, which are file or folders that should be uploaded with the program file that are also required for the build. This could be the dbb-app.yaml file itself or BMS files for a CICS application.</li><li>How you specify which log files you wish to download after the build is executed. These files are optional downloads for the user in addition to the logs automatically retrieved for the Problems view as described in the next section.</li></ul><p>In Z Open Editor you can use the Settings page to configure variables such as the <code>dbbHlq</code> variable shown in the example above.</p><ol><li>Open VS Code settings and search for &quot;user build&quot;, you can see two settings.</li><li>Select the checkbox if not selected to enable user build.</li><li>In the second setting called &quot;Userbuild: User Settings&quot; you can click the &quot;Add Item&quot; button to provide the settings shown below</li></ol><table><thead><tr><th>Item</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>dbbWorkspace</td><td>Required. The UNIX System Services location where all files get uploaded to. This folder might contain several application folders you are working on.</td><td>/u/ibmuser/projects</td></tr><tr><td>dbbHlq</td><td>Required. TSO high level qualifier(s) for your project.</td><td>IBMUSER.SAMPLE</td></tr><tr><td>dbbDefaultZappProfile</td><td>Optional. Name of the ZAPP profile to be used when you run a User Build. If not defined, User Build uses the 1st defined ZAPP dbb profile.</td><td>dbb-profile-1</td></tr><tr><td>localLogDir</td><td>Optional. Local directory where User Build logs is downloaded. Path can be absolute or relative to the workspace of the build file. If not defined, User Build downloads the logs into a directory in your local workspace called logs</td><td>/Users/deb/dbb-logs</td></tr></tbody></table><p>Once these files and settings are in place, a program was opened in the editor and its dependencies such as copybooks were found as specified in the ZAPP file. The user can run a user build by right-clicking inside the editor and selecting one of these commands from the context menu:</p><ul><li><strong>Run IBM User Build with full upload</strong>: which is the required command to run at the first execution of a user build for a particular program. This command will upload all include files for the program, the program itself and all files listed under <code>additionalDependencies</code> in the ZAPP file before running the build command specified in the ZAPP file.</li><li><strong>Run IBM User Build</strong>: is the command you can run at subsequent executions of the build that provides a faster execution, because it will only upload an include file if it was changed since the last time you ran a user build and it will not upload <code>additionalDependencies</code> anymore. It will just upload the program file and build it. If you require upload of the other files again, choose the first option.</li></ul><p>By default, user build commands are only available for COBOL, HLASM, and PL/I files. To show user build commands in context menus and the command palette for all files (excluding include files and copybooks), you can set the <code>zopeneditor.userbuild.alwaysShowCommands</code> setting to <code>true</code>. This will allow users to a run user build with a custom Groovy and zBuilder script on files of other languages. This setting is experimental and may result in unexpected Z Open Editor behavior when running a user build on non-COBOL, HLASM, or PL/I programs.</p><h2 id="advanced-problems-view-integration" tabindex="-1"><a class="header-anchor" href="#advanced-problems-view-integration" aria-hidden="true">#</a> Advanced problems view integration</h2><p>In version before Z Open Editor v4, when you run a build of a program directly from inside Z Open Editor through the context menu, the build completes by downloading the build log files into the local development workspace. Review the log file by opening it in the editor and scrolling through it.</p><p>If you enable Z Open Editor&#39;s advanced capabilities, Dependency Based Build log files will then be parsed by Z Open Editor and presented as errors and warnings in the regular VS Code Problems view. You can click entries in the Problems view to directly navigate to the line in the code for which the problem was reported. These error will be shown next to regular Z Open Editor errors side-by-side, but you can distinguish them by the compiler error number displayed next to them.</p><p>The Problems view can be cleared manually via a right-click on any message or automatically when you rerun a build.</p><p><img src="`+c+'" alt="User Build Problems View"></p><p>The screenshot above shows an example of the Problems view that reports a warning about a <code>RECORD IS VARYING</code> statement not matching the required range. The problem could only be found if the program is built. Combine parse with user build errors and warnings gives developers new ways to determine problems they could not have before.</p>',16);function ue(pe,ce){const n=s("ExternalLinkIcon"),i=s("RouterLink");return a(),r(d,null,[b,m,f,g,e("p",null,[_,e("a",w,[y,o(n)]),v,e("a",k,[B,o(n)]),x]),I,e("p",null,[e("a",O,[P,o(n)]),q]),e("p",null,[S,e("a",D,[z,o(n)]),Z,E,A]),T,e("ol",null,[e("li",null,[L,U,M,C,H,R,N,V,e("a",F,[G,o(n)]),W]),e("li",null,[Y,j,Q,X,$,K,o(i,{to:"/Docs/setting_propertygroup.html"},{default:l(()=>[J]),_:1}),ee]),te]),e("p",null,[oe,e("a",ne,[se,o(n)]),ie,e("a",ae,[re,o(n)]),le]),de],64)}var me=p(h,[["render",ue]]);export{me as default};
