import{r as o,o as p,a as i,b as n,d as s,w as r,F as c,e,c as t}from"./app.8e8cf100.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/ruledetail.0a8391a2.png",h="/zopeneditor-about/assets/rulefile_pattern.801d1098.png";const k={},m=n("h1",{id:"cobol-linting-with-ibm-zcodescan",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cobol-linting-with-ibm-zcodescan","aria-hidden":"true"},"#"),e(" COBOL linting with IBM ZCodeScan")],-1),b=n("p",null,"IBM\xAE ZCodeScan enables developers to scan COBOL applications for security vulnerabilities and perform code reviews across z/OS\xAE applications.",-1),f=n("p",null,"ZCodeScan in Z Open Editor includes the following features:",-1),g=n("ul",null,[n("li",null,"Security vulnerabilities scanner to identify potential issues in COBOL source code."),n("li",null,"Built-in rules file to easily set up the code reviews. These rules cover typical best practices in COBOL coding."),n("li",null,"Real-time code review with linting, which provides instant feedback on code quality within Z Open Editor.")],-1),y=e("IBM ZCodeScan is provided as part of IBM Developer for z/OS Enterprise Edition, which also includes a Command Line Interface (CLI) that enables code reviews to be run from anywhere for increased flexibility. For example, the CLI can be invoked from a developer\u2019s workstation, a pipeline orchestrator, or any build framework. To learn more about the CLI, see the "),_={href:"https://www.ibm.com/docs/en/developer-for-zos/17.0.x?topic=zcodescan-installation-command-line-interface-cli",target:"_blank",rel:"noopener noreferrer"},v=e("IBM Developer for z/OS documentation"),w=e("."),I=e("Currently, IBM ZCodeScan can scan only COBOL programs and copybook files that are free of syntax errors. See "),C=e("Known Issues"),S=e(" for a complete list."),z=t('<h2 id="running-a-code-scan" tabindex="-1"><a class="header-anchor" href="#running-a-code-scan" aria-hidden="true">#</a> Running a code scan</h2><p>Use any of the following methods to enable IBM ZCodeScan:</p><p><strong>On-Demand IBM ZCodeScan</strong>: The On-Demand IBM ZCodeScan enables the developer to manually trigger the scan from the context menu.</p><ol><li><p>Open a COBOL program file.</p></li><li><p>Right-click in the editor and select the menu item <strong>Execute IBM ZCodeScan</strong>.</p></li><li><p>Alternatively, open the VS Code Command Palette and select <strong>IBM Z Open Editor: Execute IBM ZCodeScan</strong></p></li></ol><p><strong>Live IBM ZCodeScan</strong>: The Live IBM ZCodeScan feature dynamically scans the currently edited COBOL code. This feature is not enabled by default.</p><ol><li><p>Open the <strong>User settings</strong> and go to IBM Z\xAE Open Editor.</p></li><li><p>On the IBM Z Open Editor extension settings page, enable <strong>Cobol: Enable Live ZCode Scan</strong>.</p></li></ol><h2 id="reviewing-scan-results" tabindex="-1"><a class="header-anchor" href="#reviewing-scan-results" aria-hidden="true">#</a> Reviewing scan results</h2><p>Issues identified by the scanner are presented through a linter-style interface, with squiggly underlines in the code and corresponding entries in the VS Code Problems View. These issues are highlighted based on the configurable severity of each rule.</p><ul><li>BLOCKER : Red</li><li>HIGH : Red</li><li>MEDIUM : Yellow</li><li>LOW : Yellow</li><li>INFO : Blue</li></ul><p>If you hover over an issue in the editor, a <strong>Quick Fix</strong> menu appears, which offers the <strong>Learn more about the issue</strong> option. This opens a separate view beside the editor that displays the Rule Details document, as shown in the screenshot below.</p><p><img src="'+d+'" alt="View showing rule details"></p><p>You can also see the list of issues and details in the <strong>Problem View</strong>. Click the \u{1F4A1} icon; then the <strong>Learn about the issue tab</strong> appears and opens the details view.</p><h2 id="managing-rules" tabindex="-1"><a class="header-anchor" href="#managing-rules" aria-hidden="true">#</a> Managing rules</h2><p>By default, all defined IBM ZCodeScan rules apply to the current VS Code workspace. The IBM Developer for z/OS documentation contains reference pages for rule management:</p>',14),O=e("See "),q={href:"https://www.ibm.com/docs/en/developer-for-zos/17.0.x?topic=references-defining-rules",target:"_blank",rel:"noopener noreferrer"},B=e("Defining Rules"),x=e(" for the list of available rules."),M=e("See "),L={href:"https://www.ibm.com/docs/en/developer-for-zos/17.0.x?topic=file-client-rule",target:"_blank",rel:"noopener noreferrer"},R=e("Client Rule"),Z=e(" for details on how rules are configured."),E=t(`<p>If you do not want all predefined rules to be included in your scan, you can create a file named <code>zcodescan-rules.yaml</code> at the root level of your current VS Code workspace. The following is an example of a rules file. For detailed syntax, refer to the linked documentation.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan. cobol. rules.ProgramIdRule
    <span class="token key atrule">severity</span><span class="token punctuation">:</span> INFO
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> zcodescan.cobol.rules.CallSyntaxRule
    <span class="token key atrule">severity</span><span class="token punctuation">:</span> INFO
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan. cobol. rules.SqlWhereRule
    <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token key atrule">HIGH statements</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Select&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Delete&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Update&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> zcodescan.cobol.rules.RequireEndClauseRule
    <span class="token key atrule">severity</span><span class="token punctuation">:</span> <span class="token key atrule">HIGH statements</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> &quot;If&quot; value<span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Evaluate&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Read&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Search&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Call&quot;</span>
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan. cobol. rules.AcceptRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> INFO
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token key atrule">codescan. cobol. rules. GotoRule severity</span><span class="token punctuation">:</span> INFO
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan. cobol. rules.GotoParagraphRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> MEDIUM
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> zcodescan.cobol. rules.UnprotectedAuthCredentialRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> HIGH
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> zcodescan.cobol.rules.BufferOverflowRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> INFO
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan.cobol. rules.UninitialzedVariablesRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> MEDIUM
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan.cobol. rules.AcceptDateTimeRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> MEDIUM
  <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> codescan. cobol. rules.SqlInjectionRule
  <span class="token key atrule">severity</span><span class="token punctuation">:</span> INFO
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>`,2),V=e("You can also find this example in the Z Open Editor samples Git repository at "),T={href:"https://github.com/IBM/zopeneditor-sample/blob/wazi-main/zcodescan-rules.yaml",target:"_blank",rel:"noopener noreferrer"},A=e("https://github.com/IBM/zopeneditor-sample/blob/wazi-main/zcodescan-rules.yaml"),D=e("."),N=n("p",null,[n("strong",null,"Note"),e(": VS Code multi-root workspaces are supported. Programs are scanned using the rules file located in the same workspace.")],-1),U=n("h2",{id:"editing-rules-files-in-vs-code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#editing-rules-files-in-vs-code","aria-hidden":"true"},"#"),e(" Editing rules files in VS Code")],-1),F=n("p",null,[e("VS Code helps you edit rules files by providing code completion and documentation hovers for the YAML content, similar to how you use the editor for "),n("a",{href:"./zapp"},"ZAPP files"),e(". This requires you to install the Red Hat YAML VS Code extension and also download and configure the schema file for rules files.")],-1),Y=e("Install the "),P={href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"},H=e("YAML Language Support by Red Hat"),j=e(" plugin to enable YAML syntax highlighting and schema validation in VS Code."),G=t(`<li><p>Click the gear icon \u2699\uFE0F in the Sidebar of the editor and select <strong>Settings</strong>.</p></li><li><p>Search for <code>Yaml: Schemas</code> and click <strong>Edit in settings.json</strong> to open the &quot;settings.json&quot; file.</p></li><li><p>You can see entries for the ZAPP and ZCodeFormat schema files already present in the user settings JSON. Just modify this section to look like this without changing the local path of the first two entries, which are specific to your user account:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">&quot;yaml.schemas&quot;</span><span class="token punctuation">:</span>
  <span class="token punctuation">{</span>
    <span class="token key atrule">&quot;file:///Users/user/.vscode/extensions/ibm.zopeneditor-5.5.0/resources/zapp-schema-1.4.0.json&quot;</span><span class="token punctuation">:</span>
      <span class="token punctuation">[</span><span class="token string">&quot;zapp.yaml&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token key atrule">&quot;file:///Users/phaumer/.vscode/extensions/ibm.zopeneditor-5.5.0/resources/zcodeformat-schema-0.0.1.json&quot;</span><span class="token punctuation">:</span>
      <span class="token punctuation">[</span><span class="token string">&quot;zcodeformat.yaml&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token key atrule">&quot;https://raw.githubusercontent.com/IBM/zopeneditor-about/refs/heads/main/zcodescan/zcodescan-rules-1.0.0.json&quot;</span><span class="token punctuation">:</span>
      <span class="token punctuation">[</span><span class="token string">&quot;zcodescan-rules.yaml&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li>`,3),J=e("If you are working in an airgap configuration and cannot access the internet, you can ask your administrator to download the "),K={href:"https://raw.githubusercontent.com/IBM/zopeneditor-about/refs/heads/main/zcodescan/zcodescan-rules-1.0.0.json",target:"_blank",rel:"noopener noreferrer"},W=e("schema file from the URL above"),Q=e(" and provide it to you. You can then provide a local file URL instead, similar to the ZAPP example shown earlier."),X=n("li",null,[n("p",null,"After you configure the YAML VS Code extension with the schema, you open your rules file and test code completion by adding a file pattern to the schema. Here are some suggested file patterns you can use:"),n("p",null,[n("img",{src:h,alt:"'rulefile_pattern'"})])],-1),$=n("p",null,[e("You can now see the schema validation active in configuration files. Use the autocomplete feature by pressing "),n("code",null,"CTRL+Space"),e(" to display options based on the current index context, or type a keyword and press "),n("code",null,"TAB"),e(".")],-1);function nn(en,sn){const a=o("ExternalLinkIcon"),l=o("RouterLink");return p(),i(c,null,[m,b,f,g,n("p",null,[y,n("a",_,[v,s(a)]),w]),n("p",null,[I,s(l,{to:"/Docs/knownissues.html#ibm-zcodescan-limitations"},{default:r(()=>[C]),_:1}),S]),z,n("ul",null,[n("li",null,[O,n("a",q,[B,s(a)]),x]),n("li",null,[M,n("a",L,[R,s(a)]),Z])]),E,n("p",null,[V,n("a",T,[A,s(a)]),D]),N,U,F,n("ol",null,[n("li",null,[n("p",null,[Y,n("a",P,[H,s(a)]),j])]),G,n("li",null,[n("p",null,[J,n("a",K,[W,s(a)]),Q])]),X]),$],64)}var on=u(k,[["render",nn]]);export{on as default};
