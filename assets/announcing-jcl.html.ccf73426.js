import{r as n,o as i,a as r,b as e,d as a,F as s,e as t,c as l}from"./app.ffea5396.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/jcl-coloring.207e5a70.png",h="/zopeneditor-about/assets/jcl-errors.3d54f9e4.png",m="/zopeneditor-about/assets/jcl-completion.a66212f2.gif",g="/zopeneditor-about/assets/jcl-outline.7501ea05.gif",p="/zopeneditor-about/assets/jcl-toggle-comment.0dbcbaff.gif";const u={},f=e("h1",{id:"a-modern-jcl-job-control-language-editor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#a-modern-jcl-job-control-language-editor","aria-hidden":"true"},"#"),t(" A Modern JCL (Job Control Language) Editor")],-1),b=e("blockquote",null,[e("p",null,[t("by Prasang Prajapati"),e("br"),t(" 18 June 2024")])],-1),y=t("In the ongoing effort to bring z/OS\xAE application development into the rich ecosystem of modern code editors, the JCL (Job Control Language) programming language is the next major addition. Enabled in IBM Z\xAE Open Editor 4.3.0 and "),_={href:"https://www.ibm.com/products/wazi-developer",target:"_blank",rel:"noopener noreferrer"},w=t("IBM\xAE Wazi Developer 4.3.0"),v=t(", you will be able to benefit from our "),C={href:"https://langserver.org",target:"_blank",rel:"noopener noreferrer"},J=t("Language Server Protocol (LSP)"),L=t(" implementation for JCL. This brings a plethora of language features to the editor, which make JCL development easier and more accessible."),x=l('<p>There are several language features now available to augment the JCL editing experience.</p><h2 id="syntax-highlighting" tabindex="-1"><a class="header-anchor" href="#syntax-highlighting" aria-hidden="true">#</a> Syntax highlighting</h2><p>Arguably the most important of the bunch, the colorization of code is hard to go without these days. It&#39;s quite surprising how far a little color variance can go to make distinguishing symbols easier. Bringing visual clarity to the syntactically wild JCL programming language, this feature undeniably improves the speed and precision of development.</p><p><img src="'+d+'" alt="JCL syntax highlighting"></p><h2 id="syntax-errors" tabindex="-1"><a class="header-anchor" href="#syntax-errors" aria-hidden="true">#</a> Syntax errors</h2><p>Out of the many mainframe programming languages, JCL is truly the free spirit. Job control language (JCL) is used to tell the system what program to execute, followed by a description of program inputs and outputs. Basic JCL contains three types of statements: JOB, EXEC, and DD. A job can contain several EXEC statements (steps) and each step might have several DD statements. JCL provides a wide range of parameters and controls, but you will find that you use only a subset most of the time. Making a small typing mistake in adding mentioned JCL statements can lead to a major failure in submitting a JOB about which z/OS resources will be needed to process a batch job pr to start a system task. Syntax errors in an editor can help users identify mistakes that have been made in the program easily.</p><p><img src="'+h+'" alt="JCL syntax errors"></p><h2 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code completion</h2><p>Writing code can be a tedious process, and one that requires incredible memory and focus. Some of the simplest mistakes are misspelled statements, and given that JCL does not require JOB statement before steps (EXEC statement), these spelling errors can go completely unnoticed until some strange runtime errors occur. To alleviate this problem, you can utilize code completion to see INCLUDE statement, JCL Library statement, JOB statement, PROC statements and much more as you type. This incredibly powerful feature gives you the confidence to know that the symbol you type is the right one.</p><p><img src="'+m+'" alt="JCL code completion"></p><h2 id="outline-view" tabindex="-1"><a class="header-anchor" href="#outline-view" aria-hidden="true">#</a> Outline view</h2><p>A highly underrated feature, the outline view provides an overview of a program. We did the research, studying real JCL developers, to find out how to make this feature actually useful. What we found, it can be a powerful navigation tool for quickly going a step (an EXEC statement). Instead of crowding the outline view with every EXEC statement to find a DD statement that is inside a step, it was significantly more useful when users could glance over and see what EXEC and DD statements were defined in a JOB, and if they wanted, navigate there with one click.</p><p><img src="'+g+'" alt="JCL Outline"></p><h2 id="commenting-and-uncommenting-jcl-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-jcl-code" aria-hidden="true">#</a> Commenting and uncommenting JCL code</h2><p>You can comment out one or multiple selected lines of code or a selected section of code by using the toggle comment function.</p><p><strong>How to use it</strong></p><p>To toggle comment for one or multiple selected lines of code, press Cmd+/ (Mac) or Ctrl+/ (Windows), or go to <code>Edit &gt; Toggle Line Comment</code>.</p><p>To toggle comments for a selected section of code, press Option+Shift+A (Mac) or Alt+Shift+A (Windows), or go to <code>Edit &gt; Toggle Block Comment</code>.</p><p>See the following example where we first toggle line comment on a single line, then toggle line comment on multiple selected lines, and finally toggle block comment on a selection:</p><p><img src="'+p+'" alt="jcl toggle comment"></p><h2 id="more-information" tabindex="-1"><a class="header-anchor" href="#more-information" aria-hidden="true">#</a> More information</h2><p>For information about how to utilize the different language features, see <a href="../Docs/editor_codechanges_jcl">Making JCL code changes</a>.</p>',22);function k(E,j){const o=n("ExternalLinkIcon");return i(),r(s,null,[f,b,e("p",null,[y,e("a",_,[w,a(o)]),v,e("a",C,[J,a(o)]),L]),x],64)}var z=c(u,[["render",k]]);export{z as default};
