import{r as s,o as a,a as n,b as e,d as t,F as i,e as o,c as d}from"./app.d4490272.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var p="/zopeneditor-about/assets/local_preproc_execute.1e61e487.gif",h="/zopeneditor-about/assets/remote_preproc_execute.8edd75db.gif",l="/zopeneditor-about/assets/Pl1-macros.4bf66b6d.gif";const u={},m=e("h1",{id:"cobol-and-pl-i-preprocessor-support-by-ibm-z\xAE-open-editor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cobol-and-pl-i-preprocessor-support-by-ibm-z\xAE-open-editor","aria-hidden":"true"},"#"),o(" COBOL and PL/I preprocessor support by IBM Z\xAE Open Editor")],-1),g=e("blockquote",null,[e("p",null,[o("by Ankit Kumar"),e("br"),o(" 10 December 2024")])],-1),f=e("p",null,"I remember sweating through my eyebrows trying to recall the conventional code while writing my final Computer Science paper in High School - that was 11 years back. Happy spirited, youthful me thought things would change in Engineering College; but no - Pseudo Code was still a nightmare.",-1),y=e("p",null,"Years later, here I am, redeeming myself - writing this blog as a member of the team that developed Preprocessor support for COBOL and PL/I. We, at IBM, have packaged brevity and precision for mainframe developers. You can write non standard COBOL code (custom statements) and IBM Z\xAE Open Editor will ensure that everything gets converted to standard COBOL code and your code is a success (Well, you need to ensure that your preprocessor does not have any errors, that\u2019s not on us!)",-1),b=e("p",null,"If you are new to IBM Z\xAE Open Editor - it is a Visual Studio Code extension that combines the out-of-the-box capabilities of VS Code with language support for popular z/OS\xAE programming languages. IBM Z\xAE Open Editor uses Zowe Explorer APIs for interacting with z/OS\xAE and has been doing so since the beginning",-1),w=e("h2",{id:"when-do-you-use-the-preprocessor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#when-do-you-use-the-preprocessor","aria-hidden":"true"},"#"),o(" When do you use the Preprocessor?")],-1),_=o("Use a preprocessor when you want to use custom syntax instead of the ones written in stone. You can extend COBOL and PL/I to integrate with other technologies with custom statements. These statements often have to be translated to complex standard COBOL or PL/I and a preprocessor support will help to keep development simple. Check out the example preprocessor and code samples in our Github repository at "),x={href:"https://github.com/ibm/zopeneditor-sample/tree/wazi-main/preprocessor",target:"_blank",rel:"noopener noreferrer"},v=o("https://github.com/ibm/zopeneditor-sample/tree/wazi-main/preprocessor"),O=o(". Review the Readme file in this folder with detailed instructions for building and running the sample."),P=d('<h2 id="can-you-use-the-preprocessor-on-your-machine-and-on-z-os\xAE-systems" tabindex="-1"><a class="header-anchor" href="#can-you-use-the-preprocessor-on-your-machine-and-on-z-os\xAE-systems" aria-hidden="true">#</a> Can you use the Preprocessor on your machine and on z/OS\xAE systems?</h2><p>Absolutely! You can execute it on your machine (local) and on z/OS\xAE systems (remote) - we are bringing the full package for you!</p><h3 id="what-do-you-need-to-integrate-your-preprocessor-with-ibm-z\xAE-open-editor" tabindex="-1"><a class="header-anchor" href="#what-do-you-need-to-integrate-your-preprocessor-with-ibm-z\xAE-open-editor" aria-hidden="true">#</a> What do you need to integrate your Preprocessor with IBM Z\xAE Open Editor?</h3><p>Locally, the preprocessor should run on your development machine and be executable via the command line, producing an output file with valid COBOL by appending a new file extension to the program file name.</p><p>Remotely, it should execute on a z/OS\xAE machine, typically using a <code>REXX</code> or <code>CLIST</code> program. A configured RSE API or z/OSMF Zowe profile must be available, and the processor should run via a Zowe TSO command, generating an output data member with valid COBOL or PL/I. The program file needs to reside in a recognized PDS for COBOL (or PL/I), with the corresponding language support active in IBM Z\xAE Open Editor.</p><h3 id="what-is-a-zapp-profile-and-why-do-you-need-it" tabindex="-1"><a class="header-anchor" href="#what-is-a-zapp-profile-and-why-do-you-need-it" aria-hidden="true">#</a> What is a ZAPP Profile and why do you need it?</h3><p>Using ZAPP (Z APPlication) files is a new approach for simplifying how developers and teams of developers can configure their application code for editing in IBM Z\xAE Open Editor.To specify command lines for executing a preprocessor in the background and integrating the output with the editor. ZAPP files support variable substitution. You can define variables inside VS Code settings and use those variables inside a ZAPP file.</p><h3 id="how-do-you-run-the-preprocessor" tabindex="-1"><a class="header-anchor" href="#how-do-you-run-the-preprocessor" aria-hidden="true">#</a> How do you run the preprocessor?</h3><p>One can run the preprocessor the old fashioned way, by doing Right-click and selecting <strong><code>Execute local preprocessor command</code></strong> for local files and <strong><code>Execute remote preprocessor command</code></strong> for remote files. Or you could Automatically run the preprocessor via the VS Code user setting\xA0<strong><code>zopeneditor.autoPreprocessor</code></strong>. When the preprocessor command runs, a progress dialog with a <code>Cancel</code> button is displayed. When the preprocessor finishes, it refreshes the editor and any syntax errors that were caused by preprocessor statements should go away or, if they contained problems, will show those instead. If the processor command execution failed and produced errors, a dialog will be shown with a button to open the IBM Z\xAE Open Editor log file viewer which lists the detailed error message produced by the preprocessor command.</p><p><img src="'+p+'" alt="Executing local preprocessor."><em>Executing local preprocessor.</em></p><p><img src="'+h+'" alt="Executing remote preprocessor."><em>Executing remote preprocessor.</em></p><h3 id="how-do-you-use-the-preprocessor-output-in-the-editor" tabindex="-1"><a class="header-anchor" href="#how-do-you-use-the-preprocessor-output-in-the-editor" aria-hidden="true">#</a> How do you use the preprocessor output in the editor?</h3><p>After the preprocessor is executed, you can hover the mouse of preprocessor statements in their program file to see the code that was generated for the statement. You can edit these statements and all other code in the program. Syntax errors for preprocessor statements will not be available until the preprocessor runs again. Syntax errors for other regular COBOL or PL/I code will be shown while typing as usual in IBM Z\xAE Open Editor. To get a side-by-side view of the program before and after preprocessing, you can use the right-click menu option\xA0<strong><code>Compare preprocessor input and output files</code></strong>.</p><h3 id="how-do-you-extend-the-use-of-preprocessor-for-expanding-pl-i-macros" tabindex="-1"><a class="header-anchor" href="#how-do-you-extend-the-use-of-preprocessor-for-expanding-pl-i-macros" aria-hidden="true">#</a> How do you extend the use of preprocessor for expanding PL/I macros?</h3><p>Developer for z/OS provides a sample REXX exec, <code>FEKRNPLI</code>, that can be called by the Developer for z/OS client to expand PL/I source by invoking the PL/I compiler which is located by default in <code>FEL.SFELSAMP(FEKRNPLI)</code>. So, using this exec you can run all the macro statements to resolve them. The execution of preprocessor remains the same and is supported with all the features and functionalities of preprocessing.</p><p><img src="'+l+'" alt="Resolving PL/I macros."><em>Resolving PL/I macros.</em></p><h2 id="learn-more" tabindex="-1"><a class="header-anchor" href="#learn-more" aria-hidden="true">#</a> Learn More</h2>',17),I=o("This blog was meant to give you a high-level overview of what Preprocessor feature brings to the table. Many available actions are not covered here and it is receiving new features and capabilities with each release. Try it out, and if there is a missing feature that you would like to be added, you can create an enhancement request on the IBM Z\xAE Open Editor "),L={href:"https://github.com/IBM/zopeneditor-about",target:"_blank",rel:"noopener noreferrer"},z=o("public repository"),E=o(". For more information on the Preprocessor, see its "),B={href:"https://github.ibm.com/Zowe-Commercial/wazi-docs/blob/main/zopeneditor-docs/Docs/advanced_preprocessor.md",target:"_blank",rel:"noopener noreferrer"},C=o("documentation"),S=o(".");function k(Z,M){const r=s("ExternalLinkIcon");return a(),n(i,null,[m,g,f,y,b,w,e("p",null,[_,e("a",x,[v,t(r)]),O]),P,e("p",null,[I,e("a",L,[z,t(r)]),E,e("a",B,[C,t(r)]),S])],64)}var T=c(u,[["render",k]]);export{T as default};
