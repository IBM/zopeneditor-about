import{r as a,o as n,a as r,b as t,d as i,F as s,e,c as h}from"./app.32e1a87d.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const l={},c=t("h1",{id:"a-modern-rexx-editor",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#a-modern-rexx-editor","aria-hidden":"true"},"#"),e(" A Modern REXX Editor")],-1),u=t("blockquote",null,[t("p",null,[e("by Bradley Knaysi"),t("br"),e(" 18 March 2021")])],-1),g=e("In the ongoing effort to bring z/OS\xAE application development into the rich ecosystem of modern code editors, the REXX programming language is the next major addition. Enabled in IBM Z\xAE Open Editor 1.2.0, "),f={href:"https://www.ibm.com/products/wazi-developer",target:"_blank",rel:"noopener noreferrer"},m=e("IBM\xAE Wazi Developer 1.2.0"),p=e(", and "),y={href:"https://www.ibm.com/products/developer-for-zos",target:"_blank",rel:"noopener noreferrer"},v=e("IBM Developer for z/OS 15.0.1"),b=e(", you will be able to benefit from our "),w={href:"https://langserver.org",target:"_blank",rel:"noopener noreferrer"},_=e("Language Server Protocol (LSP)"),x=e(" implementation for REXX. This brings a plethora of language features to the editor, which make REXX development easier and more accessible."),X=h('<p>There are several language features now available to augment the REXX editing experience.</p><h2 id="syntax-highlighting" tabindex="-1"><a class="header-anchor" href="#syntax-highlighting" aria-hidden="true">#</a> Syntax highlighting</h2><p>Arguably the most important of the bunch, the colorization of code is hard to go without these days. It&#39;s quite surprising how far a little color variance can go to make distinguishing symbols easier. Bringing visual clarity to the syntactically wild REXX programming language, this feature undeniably improves the speed and precision of development.</p><h2 id="syntax-errors" tabindex="-1"><a class="header-anchor" href="#syntax-errors" aria-hidden="true">#</a> Syntax errors</h2><p>Out of the many mainframe programming languages, REXX is truly the free spirit. While many languages enforce spacing, tabbing, and case-sensitivity to parse elements of the code, REXX has little to no such constraints. The result is a wide variety of programming styles, which leave the developer wondering what valid syntax is and is not. This is where syntax errors shine, bringing visual clarity to common and sometimes frustratingly trivial mistakes.</p><h2 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code completion</h2><p>Writing code can be a tedious process, and one that requires incredible memory and focus. Some of the simplest mistakes are misspelled symbols, and given that REXX does not require variable declaration before definition, these spelling errors can go completely unnoticed until some strange runtime error occurs. To alleviate this problem, you can utilize code completion to see variables, keyword instructions, internal routines, and built-in functions as suggestions as you type. This incredibly powerful feature gives you the confidence to know that the symbol you type is the right one.</p><h2 id="hover" tabindex="-1"><a class="header-anchor" href="#hover" aria-hidden="true">#</a> Hover</h2><p>REXX can be a daunting language to learn. Oftentimes, all you need is a little information about what an element is, what it does, and how to use it, in order to understand it. With the addition of the hover feature, moving your mouse over any keyword instruction or built-in function will reveal these critical bits of information. This brings documentation directly into the editor, letting you work in one place without having to navigate elsewhere to find knowledge.</p><h2 id="find-references" tabindex="-1"><a class="header-anchor" href="#find-references" aria-hidden="true">#</a> Find references</h2><p>It&#39;s fairly common to want to find matching symbols in a REXX program. Without relying on CTRL+F to navigate comments and partial matches, you can quickly find references on a symbol to get a quick view of all occurrences. This handy feature makes searching for other symbols easier than ever, without having to lose your place in the file.</p><h2 id="outline-view" tabindex="-1"><a class="header-anchor" href="#outline-view" aria-hidden="true">#</a> Outline view</h2><p>A highly underrated feature, the outline view provides an overview of a program. We did the research, studying real REXX developers, to find out how to make this feature actually useful. What we found, it can be a powerful navigation tool for quickly going to internal routine definitions. Instead of crowding the outline view with every loop and switch statement, it was significantly more useful when user&#39;s could glance over and see what internal routines were defined, and if they so desired, navigate there with one click.</p><h2 id="more-information" tabindex="-1"><a class="header-anchor" href="#more-information" aria-hidden="true">#</a> More information</h2><p>For information about how to edit REXX programs, see the <a href="../Docs/tutorial_rexx">REXX editing tutorial</a>.</p><p>For information about how to utilize the different language features, see the <a href="../Docs/editor_codechanges_rexx">Making REXX code changes</a> page.</p>',16);function k(E,R){const o=a("ExternalLinkIcon");return n(),r(s,null,[c,u,t("p",null,[g,t("a",f,[m,i(o)]),p,t("a",y,[v,i(o)]),b,t("a",w,[_,i(o)]),x]),X],64)}var z=d(l,[["render",k]]);export{z as default};
