import{r as s,o as i,a as r,b as e,d as a,F as n,e as t,c as l}from"./app.fd142dbe.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/table-submit-members-as-jobs.987c9308.gif",h="/zopeneditor-about/assets/table-search-custcopy.aa1be4ee.gif",u="/zopeneditor-about/assets/table-submit-job-view-spool-files.da1dd3a5.gif",p="/zopeneditor-about/assets/table-uss-search-dbb-error.4f71e355.gif";const m={},g=e("h1",{id:"managing-data-sets-jobs-and-unix-files-in-z-open-editor-with-the-z-os-resources-table",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#managing-data-sets-jobs-and-unix-files-in-z-open-editor-with-the-z-os-resources-table","aria-hidden":"true"},"#"),t(" Managing data sets, jobs, and UNIX files in Z Open Editor with the z/OS Resources Table")],-1),b=e("blockquote",null,[e("p",null,[t("by Benjamin Santos"),e("br"),t(" 18 September 2024")])],-1),f=e("p",null,"Speaking from experience, mainframe development has a steep learning curve. Starting out, I had no experience with z/OS or with many of the programming languages that run on z/OS. On top of that, the tools used in mainframe development seemed daunting. I had grown accustomed to the modern IDEs that I used while studying computer science in college and I felt hesitant to give them up to use traditional tools like ISPF instead.",-1),w=e("p",null,"IBM Z Open Editor is a great option for developers who prefer programming in a modern development environment (like me). It is a Visual Studio Code extension that combines the out-of-the-box capabilities of VS Code with language support for popular z/OS programming languages. From the beginning, Z Open Editor has used Zowe Explorer APIs for interacting with z/OS. Zowe Explorer relies on VS Code tree views for displaying and managing z/OS resources, which are very limited when it comes to sorting and filtering large amounts of resources. To address these shortcomings, we set out to provide a richer user experience that addresses many of our customer's requirements for dealing with large amounts of resources while still delivering a modern development experience. This was the design philosophy of the z/OS Resources Table.",-1),v=e("p",null,"The z/OS Resources Table is a tabular view that you can use to manage z/OS data sets, UNIX files, and jobs. It is intended to make the mainframe onboarding experience easier while still providing capabilities that are useful for more experienced developers.",-1),_=e("h2",{id:"getting-started",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),t(" Getting Started")],-1),y=t("To get started with the z/OS Resources Table, you need to "),S={href:"https://ibm.github.io/zopeneditor-about/Docs/interact_zos_zowe_explorer.html#setting-up-and-using-profiles-in-zowe-explorer",target:"_blank",rel:"noopener noreferrer"},x=t("create a Zowe Explorer profile"),O=t(". This profile contains information necessary for Z Open Editor to connect to your z/OS host. If you have already created a Zowe Explorer profile, you can begin using the table without any additional setup."),z=l('<h2 id="mvs-unix-system-services-and-jes-views" tabindex="-1"><a class="header-anchor" href="#mvs-unix-system-services-and-jes-views" aria-hidden="true">#</a> MVS, UNIX System Services, and JES views</h2><p>When you open the table, you will be prompted to select a profile and a resource to interact with. Select one of the three following resources:</p><ul><li><strong>MVS</strong> for managing data sets and data set members</li><li><strong>USS</strong> for managing UNIX files</li><li><strong>JES</strong> for managing jobs</li></ul><p>Each table view provides a set of actions. Some actions are available across all resources, such as the navigation actions which work like a web browser&#39;s navigation toolbar. Other actions are available only for the specific resource you access. some of which are demonstrated below.</p><h3 id="mvs" tabindex="-1"><a class="header-anchor" href="#mvs" aria-hidden="true">#</a> MVS</h3><p>The MVS view is to manage data sets. The table supports many basic data set operations such as create, delete, edit, and more complex operations for filtering and viewing data sets. Click on a partitioned data set to view its members, and clicking a sequential data set or data set member to open it in the editor.</p><p><img src="'+d+'" alt="Using the MVS view to submit data set members as jobs."><em>Using the MVS view to submit data set members as jobs.</em></p><p>As demonstrated in the GIF above, you can quickly edit and submit the table\u2019s active filter to control what resources are visible. You can also easily apply actions to multiple resources at once using batch actions. Click on any column header to sort the table alphanumerically by that attribute, as you would in an Excel spreadsheet.</p><p>In Z Open Editor v4.5.0, we released new MVS search capabilities for RSE API users. You can specify string content to search for across sequential data sets or data set members. You can also specify a data set or member name pattern to narrow down their search results further.</p><p><img src="'+h+'" alt="Using the MVS Search and Filter menus to find COBOL programs that include the copybook CUSTCOPY."><em>Using the MVS Search and Filter menus to find COBOL programs that include the copybook CUSTCOPY.</em></p><h3 id="jes" tabindex="-1"><a class="header-anchor" href="#jes" aria-hidden="true">#</a> JES</h3><p>The JES view is used for managing jobs and viewing job output. The table supports many basic job operations such as canceling jobs, issuing stop or modifying commands, viewing spool files, and provides capabilities for filtering jobs by name or status.</p><p><img src="'+u+'" alt="Viewing spool files of an active job."><em>Submitting a JCL job in the MVS view. Use the JES to view filter jobs and view spool files to see why the submitted job failed.</em></p><p>Overflow menu actions, unlike batch action, are used to perform an action on a specific resource. To Open the overflow menu, click on the three dots <code>\u22EE</code> on the right side of the table row as demonstrated in the GIF above.</p><h3 id="unix-system-services" tabindex="-1"><a class="header-anchor" href="#unix-system-services" aria-hidden="true">#</a> UNIX System Services</h3><p>The USS view is used for accessing and editing your host&#39;s UNIX files. To navigate through the table click on the rows. Clicking a directory displays its contents and clicking a file opens it in a new editor, similar to how you would navigate directories using Windows File Explorer. The table supports basic UNIX operations such as creating new files and directories, changing permissions, and more complex operations, including searching for the files. With the new UNIX System Services search capabilities released in Z Open Editor v4.5.0, you can search for files by name or content.</p><p><img src="'+p+'" alt="Locating a user build log file by searching for a DBB error code."><em>Locating a user build log file by searching for a DBB error code.</em></p><h2 id="learn-more" tabindex="-1"><a class="header-anchor" href="#learn-more" aria-hidden="true">#</a> Learn More</h2>',18),k=t("This blog was meant to give you a high-level overview of what is available in the z/OS Resources Table. Many available actions are not covered here and the table is receiving new features and capabilities with each release. Try it out, and if there is a missing feature that you would like to be added, you can create an enhancement request on the Z Open Editor "),I={href:"https://github.com/IBM/zopeneditor-about",target:"_blank",rel:"noopener noreferrer"},T=t("public repository"),E=t(". For more information on the z/OS Resources Table, see its "),j={href:"https://ibm.github.io/zopeneditor-about/Docs/advanced_resource_table.html#setting-up-profiles-for-the-z-os-resources-table",target:"_blank",rel:"noopener noreferrer"},V=t("documentation"),U=t(".");function M(C,B){const o=s("ExternalLinkIcon");return i(),r(n,null,[g,b,f,w,v,_,e("p",null,[y,e("a",S,[x,a(o)]),O]),z,e("p",null,[k,e("a",I,[T,a(o)]),E,e("a",j,[V,a(o)]),U])],64)}var F=c(m,[["render",M]]);export{F as default};
