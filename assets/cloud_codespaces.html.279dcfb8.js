import{r as i,o as c,a as d,b as e,d as o,w as a,F as l,e as t,c as r}from"./app.2a0287be.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";const u={},p=e("h1",{id:"using-z-open-editor-on-github-codespaces",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#using-z-open-editor-on-github-codespaces","aria-hidden":"true"},"#"),t(" Using Z Open Editor on GitHub Codespaces")],-1),_=e("p",null,"IBM Z\xAE Open Editor, Zowe\u2122 Explorer and Zowe\u2122 CLI can run on Microsoft's GitHub Codespaces.",-1),m=e("h2",{id:"overview",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overview","aria-hidden":"true"},"#"),t(" Overview")],-1),f=t("GitHub Codespaces is built on VS Code's Dev Container technology, which allows developers to write their code in a container that runs either locally or remotely. VS Code can then connect to that container and allow access to the folders inside the container. It also installs VS Code extensions from the marketplace in the container, so the extension can work with the files located there. In addition to connect the rich VS Code client to the container, it also supports to run the VS Code editor client in the browser where a VS Code Server, which runs inside the container, renders the editor in browser. See "),g={href:"https://code.visualstudio.com/docs/devcontainers/containers",target:"_blank",rel:"noopener noreferrer"},v=t("Developing inside a Container"),b=t(" in the VS Code documentation for more details on the underlying technology. To learn everything about GitHub Code Spaces go to the official "),w={href:"https://docs.github.com/en/codespaces",target:"_blank",rel:"noopener noreferrer"},y=t("Documentation"),k=t("."),C=t("When using GitHub codespaces, the container "),S={href:"https://docs.github.com/en/codespaces/overview",target:"_blank",rel:"noopener noreferrer"},x=t("runs in Microsoft's Azure Cloud"),V=t(" and gets dynamically created for your account on a virtual machine managed by Azure. As a user, you need not procure a development machine that can run containers; all you need is browser and a GitHub account with Git projects to write code. You can use the same container specification, the devcontainer files that you are using for Codespaces for local or on-premises deployment of these containers as well, giving you great flexibility to decide where to run your remote development environments. This allows you to chose between paying for Cloud-based compute resources or to manage your own infrastructure of virtual machines in which the containers can run."),O=r('<p>This architecture is different than Red Hat\xAE OpenShift Dev Spaces, which comes with pros and cons:</p><ul><li><strong>Codespaces runs in a container and not Kubernetes</strong>: The biggest difference is that Codespaces runs in a container that can be modified by the developer at runtime. Developers can install additional software and update components. You can even make devcontainer configuration changes on the fly and let VS Code recreate the container with the new components and settings from within VS Code. OpenShift Dev Spaces workspaces run in Kubernetes as immutable containers that cannot be modified by the developer. For installing additional or updated software, Dev Spaces requires building and publishing a new image from a dockerfile. The advantage is that these containers are more secure, because developers cannot randomly install software that was not reviewed and approved by your organization. This also ensures that all developers in a team work with the exact same versions and configuration settings, avoiding the &quot;it runs in my container&quot; effect.</li><li><strong>Codespaces is only available at github.com</strong>: OpenShift Dev Spaces can be installed wherever OpenShift runs, which includes on-premises deployments using x86 and s390x Linux on Z platforms, deployments at all the major Cloud providers such as IBM Cloud\xAE, AWS, or Azure, and even on personal laptops or development machines with a local OpenShift deployment. GitHub Codespaces is only available on github.com and is not available for GitHub Enterprise for on-premises deployments. However, you can use it from a private organization and configure it with access to your company network using OpenVPN technology as described in <a href="#connect-to-a-z-os-system-using-a-vpn">Connecting to a z/OS system using a VPN</a>.</li><li><strong>Codespaces configuration files are portable to custom containers</strong>: The devfiles you create for OpenShift DevSpaces workspaces can only be used at the moment, in an OpenShift Dev Spaces deployment. However, the Codespaces devcontainer files and dockerfiles can generally be used interchangeably between Codespaces and personal containers to run locally on your developer machine or on on-premises virtual machines.</li></ul><h2 id="configure-a-sample-z-open-editor-workspace" tabindex="-1"><a class="header-anchor" href="#configure-a-sample-z-open-editor-workspace" aria-hidden="true">#</a> Configure a sample Z Open Editor workspace</h2>',3),I=t("In our Z Open Editor Samples Git repository at "),z={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},E=t("https://github.com/IBM/zopeneditor-sample"),P=t(' we provide a special branch called "devcontainer" that contains examples for Codespaces configuration files that you can try. As described in the Quickstart section of '),N=t("Overview to using Cloud and Browser-based platforms"),Z=t(", you can easily start a Codespaces workspace with our samples repository loaded and Z Open Editor and other extensions preloaded by clicking or copy-pasting a simple URL:"),T={href:"https://github.com/codespaces/new?skip_quickstart=true&machine=basicLinux32gb&repo=160883618&ref=devcontainer&geo=UsWest&devcontainer_path=.devcontainer%2Fdevcontainer.json",target:"_blank",rel:"noopener noreferrer"},A=t("https://github.com/codespaces/new?skip_quickstart=true&machine=basicLinux32gb&repo=160883618&ref=devcontainer&geo=UsWest&devcontainer_path=.devcontainer%2Fdevcontainer.json"),D=e("p",null,"If you examine this URL carefully, you see various parameters that specify what should be loaded into the workspace. When you click the link, you see all the parameters in a Web form to change or just confirm. The parameters provide the location and type of the virtual machine to be used, the GitHub repository to load identified with its global integer ID, the branch of the repository to check out, as well as the location of the devcontainer specification file to use. The last parameter allows you to manage several alternative devcontainer specification files in the same branch, but loads different development configurations on demand if needed. In our sample repository, you also find several examples inside this folder organized in sub-directories, which is discussed throughout this documentation.",-1),G=t("To examine the sample devcontainer specification file provided with our Z Open Editor samples, open the following file from the Git repository: "),M={href:"https://github.com/IBM/zopeneditor-sample/blob/devcontainer/.devcontainer/devcontainer.json",target:"_blank",rel:"noopener noreferrer"},B=t("https://github.com/IBM/zopeneditor-sample/blob/devcontainer/.devcontainer/devcontainer.json"),R=e("p",null,'The file is located in a folder called ".devcontainer", together with a Bash script called "installZowe.sh". Inside the JSON file, you can see various configuration settings:',-1),W=t('"'),H=e("strong",null,"image",-1),L=t('": is the base image for the container to be loaded. The recommendation is, if in doubt about which image to use, to list the named "universal" as the default. It is documented at '),q={href:"https://github.com/devcontainers/images/tree/main/src/universal",target:"_blank",rel:"noopener noreferrer"},j=t("https://github.com/devcontainers/images/tree/main/src/universal"),F=t(". However, there are many special images available as well. Because Z Open Editor requires a Java\u2122 17 runtime, we selected in our devcontainer file a Java base image. For the full list of available images see here: "),U={href:"https://github.com/devcontainers/images/blob/main/README.md",target:"_blank",rel:"noopener noreferrer"},J=t("https://github.com/devcontainers/images/blob/main/README.md"),Y=t('"'),K=e("strong",null,"features",-1),$=t('": in addition to the software available on the base image, you can easily specify additional features you want without the necessity to create a custom container image using a dockerfile. You can specify features that you want to see by name with parameters, and they are loaded dynamically into the container. The first time you load the container, workspace startup takes a little longer to load the features, but as a result, the container caches and loads up much faster at the next startup. In this example, Java is configured with an additional Maven option, since the Z Open Editor preprocessor samples provided in the repository include a Maven Java project. Node.js is also installed, which is required for Zowe\u2122 CLI. Ansible is installed for the z/OS\xAE Ansible\xAE playbooks provided in the repository. After the Codespaces workspace is up, open a Terminal window and check if all the components are available, for example, run '),Q=e("code",null,"ansible --version",-1),X=t(" or "),ee=e("code",null,"mvn -version",-1),te=t(" to see version information. The list of available features is absolutely massive, as shown on the reference page here: "),oe={href:"https://containers.dev/features",target:"_blank",rel:"noopener noreferrer"},ne=t("https://containers.dev/features"),se=t("."),ie=e("li",null,[t('"'),e("strong",null,"updateContentCommand"),t('": can provide a command to load additional content into the image that is not available as a feature. In our case we run the "installZowe.sh" script, which simply uses npm to install Zowe CLI and the IBM\xAE RSE API for Zowe CLI plugin.')],-1),ae=e("li",null,[t('"'),e("strong",null,"customizations"),t(`": contains settings to configure VS Code, Codespaces, as well as the VS Code extensions that should be preloaded into the devcontainer. In our example, you see we are loading all the recommended extensions to work with Z Open Editor, which includes Zowe Explorer, Red Hat's YAML extension for editing ZAPP files, Red Hat's Ansible extension, as well as the Java development pack to build the Java samples in our repository mentioned above.`)],-1),re=e("p",null,"When you load our Z Open Editor sample workspace into Codespaces with the URL listed above. The VS Code starts up in your browser, our sample Git repository gets automatically cloned with the devcontainer branch as specified and loads into VS Code. When you check the list of installed VS Code extensions, you find all the extension listed in the devcontainer.json file ready to go. When you open a Terminal, you can test the installed software, e.g. with the command line examples from above, and you can find everything available as specified.",-1),ce=t("There a several other ways to configure a devcontainer, including installing additional software with a dockerfile. To learn more about it see the "),de={href:"https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers",target:"_blank",rel:"noopener noreferrer"},le=t("Codespaces documentation"),he=t("."),ue=e("h2",{id:"connect-to-a-z-os-system-using-a-vpn",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#connect-to-a-z-os-system-using-a-vpn","aria-hidden":"true"},"#"),t(" Connect to a z/OS system using a VPN")],-1),pe=t("As GitHub Codespaces runs on github.com and Azure, you need to establish a secure network configuration from your devcontainer to your company's intranet to access mainframe resources with Zowe Explorer and Zowe CLI. To accomplish that connect to your organization using a Virtual Private Network as described in the "),_e={href:"https://docs.github.com/en/codespaces/developing-in-a-codespace/connecting-to-a-private-network",target:"_blank",rel:"noopener noreferrer"},me=t("Connecting to a private network"),fe=t(" in the Codespaces documentation."),ge=t("The documentation page links to a Git repository with an example that we have integrated into our Z Open Editor sample repository, to try with our editor and Zowe Explorer. Under "),ve={href:"https://github.com/IBM/zopeneditor-sample/tree/devcontainer/.devcontainer/vpn",target:"_blank",rel:"noopener noreferrer"},be=t(".devcontainer/vpn"),we=t(" you find another complete example for a devcontainer that does everything the specification in the earlier example does, but also adds the ability to connect to a VPN server. To accomplish that it provides the following additions:"),ye=e("li",null,'"Dockerfile": which uses the same base image as the devcontainer specification of the previous example and adds the VPN client software installation instructions.',-1),ke=e("li",null,'"devcontainer.json": refers to the dockerfile, instead to load the resulting image. It also adds "runArgs", "initializeCommand", "postStartCommand" to initialize and start the VPN client through scripts provided in the folder as well.',-1),Ce=t('"save-config.sh": is a Bash script executed from the devcontainer that sets up the VPN client. The main thing it does is takes your personal OpenVPN configuration stored as a secret in Github under the name "OPENVPN_CONFIG" and serializes it to a temporary file that the VPN client can use to connect. See '),Se={href:"https://github.com/codespaces-contrib/codespaces-openvpn?tab=readme-ov-file#using-the-sample",target:"_blank",rel:"noopener noreferrer"},xe=t("this example"),Ve=t(" for how the secret looks."),Oe=e("li",null,'"start-openvpn.sh": starts the VPN client with the configuration prepared by "save-config.sh". You can always manually rerun this script if the VPN connection drops. The log file for the VPN client is stored in ".devcontainer/vpn/openvpn-tmp/openvpn.log", which you can open from your VS Code workspace to review it for any issues in connection.',-1),Ie=e("p",null,"Try this example in our devcontainer with the following steps:",-1),ze=t("Fork the GitHub repository at "),Ee={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},Pe=t("https://github.com/IBM/zopeneditor-sample"),Ne=t(' and checkout or select the branch "devcontainer".'),Ze=r("<li>Receive an &quot;.ovpn&quot; file from your Open VPN administrator.</li><li>In your personal fork on Github.com, go to <strong>Settings &gt; Secrets and variables &gt; Codespaces</strong> and create a secret named <code>OPENVPN_CONFIG</code> and paste the contents of the &quot;.ovpn&quot; file.</li><li>Create two additional secrets for your Zowe profile credentials: Create the secrets <code>ZOWE_OPT_USER</code> and <code>ZOWE_OPT_PASSWORD</code> with the username and password values that you use with either z/OSMF or RSE API to access your z/OS system.</li><li>Go to the <strong>Code</strong> tab of your fork and start Codespaces through the <strong>&lt;&gt; Code</strong> dropdown menu to select the <strong>Codespaces</strong> tab and <strong>New with options</strong> from the sub-menu in that tab.</li><li>In the &quot;Create codespace&quot; page, select &quot;Z Open Editor container with VPN&quot; from the <strong>Dev container configuration</strong> dropdown. It&#39;s important to select this option and not use the default devcontainer without the VPN configuration.</li><li>Click <strong>Create codespace</strong></li>",6),Te=t("After the workspace is up, create a Zowe Explorer team configuration file to connect to your z/OS system made available through the VPN. Ensure that you use the environment variables "),Ae=e("code",null,'"$ZOWE_OPT_USER"',-1),De=t(" and "),Ge=e("code",null,'"$ZOWE_OPT_PASSWORD"',-1),Me=t(" as values for the "),Be=e("code",null,'"user"',-1),Re=t(" and "),We=e("code",null,'"password"',-1),He=t(" properties in your configuration file. See the details in "),Le=t("Using Environment Variables for Authentication in Zowe Explorer and Openshift Dev Workspaces"),qe=t("."),je=t("If you are using "),Fe={href:"https://www.ibm.com/cloud/wazi-as-a-service",target:"_blank",rel:"noopener noreferrer"},Ue=t("IBM Wazi as Service"),Je=t(" ("),Ye={href:"https://www.ibm.com/docs/en/wazi-aas/1.0.0",target:"_blank",rel:"noopener noreferrer"},Ke=t("Documentation"),$e=t(") virtual z/OS server instances (VSI) that run in an IBM Cloud\xAE VPC (Virtual Private Cloud), then this is how you can access your VSIs."),Qe=t("Create a VPN server for your VPC at "),Xe={href:"https://cloud.ibm.com/infrastructure/network/vpngateways",target:"_blank",rel:"noopener noreferrer"},et=t("https://cloud.ibm.com/infrastructure/network/vpngateways"),tt=t("."),ot=e("li",null,"Configure a Route and attach your security groups for accessing z/OSMF or RSE API to the VPN server.",-1),nt=e("li",null,`Download the VPN's "Client profile", which is a zip file that contains the ".ovpn" file.`,-1),st=e("li",null,'Paste the contents of the ".ovpn" file as the secret in your Github repository fork.',-1),it=e("li",null,"Connect as described above.",-1),at=e("p",null,"You can access your Wazi as a Service VSI running in IBM Cloud from your Zowe Explorer running on Azure through a secure VPN tunnel.",-1);function rt(ct,dt){const n=i("ExternalLinkIcon"),s=i("RouterLink");return c(),d(l,null,[p,_,m,e("p",null,[f,e("a",g,[v,o(n)]),b,e("a",w,[y,o(n)]),k]),e("p",null,[C,e("a",S,[x,o(n)]),V]),O,e("p",null,[I,e("a",z,[E,o(n)]),P,o(s,{to:"/Docs/cloud_overview.html"},{default:a(()=>[N]),_:1}),Z]),e("p",null,[e("a",T,[A,o(n)])]),D,e("p",null,[G,e("a",M,[B,o(n)])]),R,e("ul",null,[e("li",null,[W,H,L,e("a",q,[j,o(n)]),F,e("a",U,[J,o(n)])]),e("li",null,[Y,K,$,Q,X,ee,te,e("a",oe,[ne,o(n)]),se]),ie,ae]),re,e("p",null,[ce,e("a",de,[le,o(n)]),he]),ue,e("p",null,[pe,e("a",_e,[me,o(n)]),fe]),e("p",null,[ge,e("a",ve,[be,o(n)]),we]),e("ul",null,[ye,ke,e("li",null,[Ce,e("a",Se,[xe,o(n)]),Ve]),Oe]),Ie,e("ul",null,[e("li",null,[ze,e("a",Ee,[Pe,o(n)]),Ne]),Ze,e("li",null,[Te,Ae,De,Ge,Me,Be,Re,We,He,o(s,{to:"/Docs/zowe_advanced_connection_scenarios.html#using-environment-variables-for-authentication-in-zowe-explorer-and-openshift-dev-workspaces"},{default:a(()=>[Le]),_:1}),qe])]),e("p",null,[je,e("a",Fe,[Ue,o(n)]),Je,e("a",Ye,[Ke,o(n)]),$e]),e("ul",null,[e("li",null,[Qe,e("a",Xe,[et,o(n)]),tt]),ot,nt,st,it]),at],64)}var ut=h(u,[["render",rt]]);export{ut as default};
