import{r as o,o as i,a as r,b as e,d as n,F as l,e as a,c as t}from"./app.1362f0f1.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const c={},d=e("h1",{id:"create-and-use-custom-images",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-and-use-custom-images","aria-hidden":"true"},"#"),a(" Create and use custom images")],-1),u=e("h2",{id:"overview",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overview","aria-hidden":"true"},"#"),a(" Overview")],-1),h=e("p",null,"The developer images provided with OpenShift Dev Spaces are examples that comprise typical stacks of development tools which cover common development scenarios. However, no development organization or project is the same and there is always a need to add, swap out, or remove tools for different teams and project. The idea is that the teams can take the images, provide it as base images and modify or even copy the dockerfiles used to build them and adjust them.",-1),m=a("The core developer image provided by Red Hat is called "),g={href:"https://catalog.redhat.com/software/containers/devspaces/udi-rhel9/673f8460bbf0c33aca0fe316",target:"_blank",rel:"noopener noreferrer"},b=a("Red Hat OpenShift Dev Spaces - Universal Developer Image (UDI)"),y=a(". It is designed with a common purpose in mind and includes wide range of programming languages and development technologies. It can be used as is, run alongside other images as a sidecar container, or used as a base image for customization."),f=a("There are also other images available, either provided by Red Hat or the Eclipse Che community that are built for special purposes. One example is the "),k={href:"https://github.com/ansible/ansible-dev-tools",target:"_blank",rel:"noopener noreferrer"},v=a("Ansible Development Tools"),_=a(" image that provides support for developing Ansible playbooks. This image is used by the Ansible stack available in the OpenShift Dev Spaces dashboard."),w=a("IBM also provides a sample image based on the UDI that adds content for z/OS development, such as Zowe CLI and IBM's plugins for Zowe CLI and others. The dockerfile for this image is available in "),I={href:"https://github.com/IBM/wazi-devspaces-images",target:"_blank",rel:"noopener noreferrer"},x=a("https://github.com/IBM/wazi-devspaces-images"),D=a(", so you can view all the applied modifications. You can use this image and modify it further. This same Git repository also includes other sample dockerfiles that show how to build a Dev Spaces image from scratch without using the UDI image as base or how to directly install additional tools like Ansible on the image instead of running a second container."),C=e("h2",{id:"build-the-sample-images",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#build-the-sample-images","aria-hidden":"true"},"#"),a(" Build the sample images")],-1),S=a("To build the sample images of the "),z={href:"https://github.com/IBM/wazi-devspaces-images",target:"_blank",rel:"noopener noreferrer"},T=a("https://github.com/IBM/wazi-devspaces-images"),M=a(" repository. You require an account with Red Hat that entitles you to pull base images from their registry, which you should have received with your purchase of OpenShift. Perform the following steps:"),B=t(`<ul><li><p>Create a development environment that has Docker or Podman installed and configured.</p></li><li><p>Clone the Git repository.</p></li><li><p>Log on to your Red Hat account using</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> login registry.redhat.io
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>To build the full image that is based on the UDI execute</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> build -f devspaces-sidecar-udibase-rhel9/wazi.Dockerfile -t idzee-devspaces-sidecar:5.3.0 ./devspaces-sidecar-udibase-rhel9
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Modify the command to build any of the other provided images. The README file in the repository also contains additional and up-to-date information.</p></li></ul><p>After you are able to build these samples, start to modify them by adding the tools you need in addition to what they already provide.</p><h2 id="deploy-the-sample-images" tabindex="-1"><a class="header-anchor" href="#deploy-the-sample-images" aria-hidden="true">#</a> Deploy the sample images</h2><p>Once you have your image built, you can deploy it to your personal image registry. Follow the instructions provided. For example, if you are using OpenShift in an IBM Cloud VPC, follow these base steps:</p>`,4),q=a("Log on to your IBM Cloud account and create a Container Registry here: "),L={href:"https://cloud.ibm.com/containers/registry/start",target:"_blank",rel:"noopener noreferrer"},O=a("https://cloud.ibm.com/containers/registry/start"),R=e("li",null,"Follow the steps described on that page to create using the ibmcloud CLI to log on, set your regions and resource group, create a namespace, tag your image correctly, and finally push the image to publish it.",-1),U=a("The image is then listed at "),A={href:"https://cloud.ibm.com/containers/registry/images",target:"_blank",rel:"noopener noreferrer"},F=a("https://cloud.ibm.com/containers/registry/images"),E=a(". Copy the the image digest and use it in your devfiles as described below."),H=t(`<h2 id="configure-openshift-dev-spaces-to-use-your-personal-registry" tabindex="-1"><a class="header-anchor" href="#configure-openshift-dev-spaces-to-use-your-personal-registry" aria-hidden="true">#</a> Configure OpenShift Dev Spaces to use your personal registry</h2><p>Dev Spaces users can configure a personal container registry directly from the Dev Spaces dashboard.</p><ol><li>Log on to the Dev Spaces Dashboard.</li><li>In the tool bar, select your user name menu and choose &quot;User Preferences&quot;.</li><li>The first tab of the User Preferences page is label &quot;Container Registries&quot;.</li><li>Click the &quot;Add Container Registry&quot; button and fill in the form.</li><li>For IBM Cloud registries, provide the name of your registry, &quot;iamapikey&quot; for the Username value, and a valid IAM api key associated with your registry account as the password.</li></ol><h2 id="create-a-devfile-with-your-personal-image" tabindex="-1"><a class="header-anchor" href="#create-a-devfile-with-your-personal-image" aria-hidden="true">#</a> Create a devfile with your personal image</h2><p>To create a Dev Spaces workspace with your personal image, create a devfile in your Git repository that lists your image. For example,</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">schemaVersion</span><span class="token punctuation">:</span> 2.3.0
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> idzee<span class="token punctuation">-</span>devspaces

<span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zowe
    <span class="token key atrule">volume</span><span class="token punctuation">:</span>
      <span class="token key atrule">size</span><span class="token punctuation">:</span> 100Mi
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wazi<span class="token punctuation">-</span>terminal
    <span class="token key atrule">container</span><span class="token punctuation">:</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>registry.com/your<span class="token punctuation">-</span>namespace/idzee<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>sidecar@sha256<span class="token punctuation">:</span>your<span class="token punctuation">-</span>sha
      <span class="token key atrule">memoryLimit</span><span class="token punctuation">:</span> 3072Mi
      <span class="token key atrule">mountSources</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zowe
          <span class="token key atrule">path</span><span class="token punctuation">:</span> /home/user/.zowe
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Then you can create a workspace by providing the URL to your Git repository in the Dashboard&#39;s &quot;Import from Git&quot; text field.</p>`,7);function V(G,P){const s=o("ExternalLinkIcon");return i(),r(l,null,[d,u,h,e("p",null,[m,e("a",g,[b,n(s)]),y]),e("p",null,[f,e("a",k,[v,n(s)]),_]),e("p",null,[w,e("a",I,[x,n(s)]),D]),C,e("p",null,[S,e("a",z,[T,n(s)]),M]),B,e("ul",null,[e("li",null,[q,e("a",L,[O,n(s)])]),R,e("li",null,[U,e("a",A,[F,n(s)]),E])]),H],64)}var Y=p(c,[["render",V]]);export{Y as default};
