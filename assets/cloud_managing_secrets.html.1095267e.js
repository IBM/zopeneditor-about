import{r as t,o,a as r,b as e,d as a,F as i,e as s,c as p}from"./app.ec5b4b42.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const l={},u=e("h1",{id:"managing-secrets",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#managing-secrets","aria-hidden":"true"},"#"),s(" Managing secrets")],-1),d=e("p",null,"When developing your application, you need to interact with other systems, for example, SSH to your z/OS system, pull and push from your Git repositories on a GitLab or GitHub server, or access asset stores such as artifactory. On a development laptop, you would typically manage keys and configuration settings for these systems in your home directory so they can be used for many different projects, for instance, you would use the same SSH keys for multiple Git repositories for many different projects on your GitHub server.",-1),h=e("p",null,[s("To achieve the same level of reuse and to securely manage your secrets, OpenShift Dev Spaces can manage these secrets and settings as Kubernetes secrets in your personal Kubernetes namespace in which your workspaces run on OpenShift. When a workspace is started, these secrets and settings will be mounted as files and provided read-only as symbolic links in your home directory. For example, a pair of private and public ssh keys would be stored as one Kubernetes secret in Openshift and then mounted as files "),e("code",null,"~/.ssh/rsa-id"),s(" and "),e("code",null,"~/.ssh/rsa-id.pub"),s(" to all your different Dev Spaces workspaces in your home directory whenever they start up.")],-1),m=s("In addition to every user creating and managing personal secrets, OpenShift Dev Spaces administrators can also set up OAuth-based authentication providers such as to a GitHub Enterprise server in your organization. This will allow you to access that server without the need of creating personal secrets, but by just using with your regular authentication method. Ask your administrator to review this documentation of the "),y={href:"https://access.redhat.com/documentation/en-us/red_hat_openshift_dev_spaces/3.17/html/user_guide/using-credentials-and-configurations-in-workspaces",target:"_blank",rel:"noopener noreferrer"},b=s("Red Hat administration guide"),k=s(" with the details."),f=s("The "),g={href:"https://access.redhat.com/documentation/en-us/red_hat_openshift_dev_spaces/3.17/html/user_guide/using-credentials-and-configurations-in-workspaces",target:"_blank",rel:"noopener noreferrer"},v=s("Red Hat user documentation"),w=s(" provides details for creating and managing personal secrets. As a convenience, here are instructions for creating all the secrets needed to access your remote z/OS system password-less. These steps are a prerequisite to run Ansible playbooks against your z/OS system."),_=p(`<h2 id="creating-secrets-for-password-less-access-to-your-z-os-system" tabindex="-1"><a class="header-anchor" href="#creating-secrets-for-password-less-access-to-your-z-os-system" aria-hidden="true">#</a> Creating secrets for password-less access to your z/OS system</h2><p>To ssh into a z/OS system, you need to create ssh private and public keys as well as a know_hosts file entry as K8s secrets.</p><p>In a nutshell to produce these secrets, for the experts, generally you need to perform the following steps:</p><ol><li>Create RSA key pairs and base64-encode them</li><li>Create a known_hosts entry and base64-encode it</li><li>Create a secret OpenShift resource and submit it against your workspace&#39;s namespace</li><li>Upload the public key to z/OS</li></ol><p>As OpenShift administrators will be able to access your secrets and decode your private key, It&#39;s strongly suggested that you create a fresh new key pair with a passphrase. You can perform all these step in a running Dev Spaces workspace. To do that, create a folder such as <code>/project/ssh-keys</code> or even <code>/projects/zopeneditor-sample/ssh-keys</code>, and store the intermediate files produced by these instructions there. After you finished, you can delete the entire directory. The following steps assume that you created and CDed into that new empty directory called <code>ssh-keys</code> in the Dev Spaces Terminal view.</p><ol><li><p>Generate a new RSA key pair with the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-keygen -t rsa -f devspaces-id -P <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The last <code>-P</code> parameter defines a passphrase, which you can provide to ensure that an OpenShift administrator will not be able to use your keys. If you leave it empty, you will not be prompted for the passphrase when using the keys.</p></li><li><p>Execute this command to generate the known_hosts entry needed for this secret. Replace the word <code>hostname</code> with the IP address or the fully qualified hostname that you are going to use for interacting with the z/OS system, for example, in the Ansible inventory files. Replace <code>ibmuser</code> with the username that you are going to use on this z/OS system. Also remember to provide a <code>-p</code> parameter for the ssh port to use if is no the standard port. This command will first prompt you to check the ECDSA key fingerprint and then for your z/OS password.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> ibmuser@hostname -o <span class="token assign-left variable">UserKnownHostsFile</span><span class="token operator">=</span>./known-hosts
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If you are doing this for multiple machines, execute this command against each one and then manually concatenate all the outputs separated by a newline character into one file.</p></li><li><p>Now you have three files in your folder that need to be base64 encoded so their content can be used with an OpenShift secret.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> devspaces-id <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> devspaces-id-private.txt
<span class="token function">cat</span> devspaces-id.pub <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> devspaces-id-public.txt
<span class="token function">cat</span> known-hosts <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> known-hosts.txt
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>Create a new file called secret.yaml in your current Dev Spaces workspace so you can edit it with the editor.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ssh<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>secret
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-to-devworkspace</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
    <span class="token key atrule">controller.devfile.io/watch-secret</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-path</span><span class="token punctuation">:</span> <span class="token string">&quot;/home/user/.ssh&quot;</span>
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">id_rsa</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>id<span class="token punctuation">-</span>private.txt<span class="token punctuation">&gt;</span>
  <span class="token key atrule">id_rsa.pub</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>id<span class="token punctuation">-</span>public.txt<span class="token punctuation">&gt;</span>
  <span class="token key atrule">known_hosts</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>contents<span class="token punctuation">-</span>of<span class="token punctuation">-</span>known_hosts.txt<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>As indicated, replace the three lines at the end with the content of your three txt files created in the previous steps.</p></li><li><p>If you have access to the OpenShift Console, then you could also use the <code>(+)</code> icon in OpenShift to submit this by copying and pasting it as an alternative. If you use the editor to create the file, then run this command from the Dev Spaces terminal to add the secret to your personal OpenShift namespace that runs your Dev Spaces workspaces.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc apply -f secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Once the secret is submitted, the Dev Spaces workspace will prompt you to reload itself. Once that has finished, you can check if your secret was made available using the Terminal again.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ll ~/.ssh
total <span class="token number">0</span>
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">13</span> May <span class="token number">30</span> <span class="token number">22</span>:20 id_rsa -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/id_rsa
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">17</span> May <span class="token number">30</span> <span class="token number">22</span>:20 id_rsa.pub -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/id_rsa.pub
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">18</span> May <span class="token number">30</span> <span class="token number">22</span>:20 known_hosts -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/known_hosts
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>Now you can add your public key to the z/OS system via this command, which will again prompt you (for the last time) for your z/OS password. Again add a <code>-p</code> parameter for a custom ssh port.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-copy-id -f -i ~/.ssh/id_rsa.pub ibmuser@hostname
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Perform the final test by logging on to the z/OS system, this time without being prompted.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> ibmuser@hostname
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="modifying-secrets-in-the-openshift-web-console" tabindex="-1"><a class="header-anchor" href="#modifying-secrets-in-the-openshift-web-console" aria-hidden="true">#</a> Modifying secrets in the OpenShift web console</h2><p>Once you have created your secrets via the <code>oc apply</code> command, you can easily review and edit them graphically in the OpenShift Developer web console.</p><ol><li>You can navigate to the console from the OpenShift Dev Spaces dashboard by clicking the <strong>Applications</strong> icon (icon with nine squares) in the toolbar and select <strong>OpenShift console</strong>. Alternatively, if you are inside a OpenShift Dev Spaces workspace, then you can click the <strong>Dev Spaces</strong> icon and text in the editor&#39;s status bar all the way on the left and select <strong>Dev Spaces: Open OpenShift Console</strong> from the drop-down menu. If you are an Openshift administrator you will see the Administrative perspective of the OpenShift web console. Switch to the Developer perspective for these steps.</li><li>In the Developer perspective, the menu on the left will show you shortcuts to information that you have access to in the context of an OpenShift project, for example, Kubernetes namespace.</li><li>Switch to the project that manages your workspaces in the drop-down menu at the top. The name of your project is typically following the schema <code>&lt;user-login-name&gt;-devspaces-&lt;unique-identifier&gt;</code>.</li><li>After you selected your project, select the <strong>Secrets</strong> menu on the left, which will show you all the secrets that your project manages for your workspaces.</li><li>Within the secrets list, click on the <code>ssh-devspaces-secret</code> secret or whatever name you used in the steps above, if you created many secrets.</li><li>You can click the <strong>Reveal value</strong> link to display the contents of your secret. This can be useful if you want to copy your public ssh key and use it with another system.</li><li>In the <strong>Actions</strong> drop-down, select <strong>Edit Secrets</strong>, which will open a form-based editor in which you can make changes such as adding another <code>known_hosts</code> entry or swapping our your ssh keys.</li></ol>`,9);function S(x,O){const n=t("ExternalLinkIcon");return o(),r(i,null,[u,d,h,e("p",null,[m,e("a",y,[b,a(n)]),k]),e("p",null,[f,e("a",g,[v,a(n)]),w]),_],64)}var z=c(l,[["render",S]]);export{z as default};
