import{r as o,o as i,a as p,b as s,d as n,w as c,F as l,e,c as t}from"./app.8e8cf100.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const d={},h=s("h1",{id:"managing-secrets",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#managing-secrets","aria-hidden":"true"},"#"),e(" Managing secrets")],-1),m=s("p",null,"Developing z/OS\xAE applications requires you to interact with z/OS through Zowe CLI and Zowe Explorer using personal credentials, such as username and password or multi-factor authentication tokens, to access data sets, UNIX files, or job outputs. You also work with Git and Git server technologies such as GitLab or GitHub, which require personal SSH keys for operations such as cloning, pulling and pushing. You may have to access asset stores, such as Artifactory, which require personal access tokens. On a development laptop, you typically manage keys and configuration settings for these systems in your home directory or encrypted key stores like Windows Credentials Manager or MacOS Keychain, to have them available for all the different projects you work on. For instance, you use the same SSH keys for multiple Git repositories for many different projects on your GitHub server.",-1),b=s("p",null,[e("To achieve the same level of reuse and securely manage your secrets, OpenShift\xAE Dev Spaces can manage these secrets and settings as Kubernetes secrets in your personal Kubernetes namespace, where your workspaces run. When a Dev Spaces workspace starts, these secrets and settings are mounted as either environment variables or files, provided as read-only symbolic links in your home directory. For example, a pair of private and public SSH keys is stored as one Kubernetes secret in Openshift and is then mounted as files "),s("code",null,"~/.ssh/rsa-id"),e(" and "),s("code",null,"~/.ssh/rsa-id.pub"),e(" in all your different Dev Spaces workspaces in your home directory whenever they start up.")],-1),k=e("Note that, by default, secrets in OpenShift might not meet your organization's security requirements and may require additional integrations with external secret vaults or drivers. As examples, see this article about the "),g={href:"https://www.redhat.com/en/blog/introducing-the-secret-store-csi-driver-in-openshift",target:"_blank",rel:"noopener noreferrer"},y=e("Secret Store CSI Driver Operator in OpenShift"),f=e(" or this article about "),v={href:"https://www.redhat.com/en/blog/managing-secrets-openshift-vault-integration",target:"_blank",rel:"noopener noreferrer"},w=e("integrating OpenShift with IBM's HashiCorp Vaults"),_=e(" (also see this "),S={href:"https://www.redhat.com/en/blog/red-hat-openshift-enhances-vault-integrations",target:"_blank",rel:"noopener noreferrer"},x=e("Red Hat OpenShift enhances Vault integrations"),O=e(" announcement)."),C=e("The following instructions show examples of how to create environment variables with credentials for Zowe CLI and Explorer, as well as SSH files to interact with Git servers or execute Ansible playbooks from your Dev Spaces workspace. You can create these secrets using the OpenShift Web Console or by using the OpenShift "),q={href:"https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/cli_tools/openshift-cli-oc#cli-installing-cli_cli-developer-commands",target:"_blank",rel:"noopener noreferrer"},A=e("oc"),D=e(" command line tool. Check with your cluster administrator on how to log in to your OpenShift console to access your personal project, which is your Kubernetes namespace or where to download the correct version of the command-line tool."),E=t(`<h2 id="locating-and-managing-secrets" tabindex="-1"><a class="header-anchor" href="#locating-and-managing-secrets" aria-hidden="true">#</a> Locating and managing secrets</h2><p>All your secrets must be stored in your personal Dev Spaces OpenShift project so that they are not accessible to other users. You can find your project name in the OpenShift Console&#39;s Developer view following these steps:</p><ol><li><p>If you are logged in to your OpenShift Dev Spaces dashboard, you can navigate to the OpenShift console by clicking the <strong>Applications</strong> icon (icon with nine squares) in the toolbar and select <strong>OpenShift console</strong>.</p></li><li><p>Alternatively, if you are inside your Dev Spaces workspace editor, click the icon all the way on the left of the editor&#39;s status bar and select <strong>Dev Spaces: Open OpenShift Console</strong> from the drop-down menu that appears at the top of the page.</p></li><li><p>After you are on the OpenShift Console page, make sure you switch to the Developer perspective, in case you are also an administrator of the cluster.</p></li><li><p>Select <strong>Project</strong> in the menu pane on the left.</p></li><li><p>Enter your OpenShift username in the search field.</p></li><li><p>The project typically is named <code>&lt;username&gt;-&lt;six-digit-id&gt;</code>.</p></li><li><p>Make note of your project name.</p></li></ol><p>If you are already running a Dev Spaces workspace, an easier way is to</p><ol><li><p>Open the VS Code terminal.</p></li><li><p>Run the command</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$WORKSPACE_NAMESPACE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>After you have identified your project name:</p><ol><li><p>Select <strong>Secrets</strong> in the OpenShift Developer Console&#39;s menu pane on the left.</p></li><li><p>In the Project drop-down at the top of the page, select your project name.</p></li><li><p>If you see a lot of projects in the drop-down, it is a good idea to mark your project as a favorite for easy access.</p></li></ol><p>You can now see the list of default secrets already created by Dev Spaces. Use the <strong>Create</strong> menu button on the top-right of the page to create new secrets as described in the instructions in the next sections, or if you create secrets through command line, you can immediately see and verify the new secrets here.</p><p>You can use this page to modify secrets as well, for example, when your password changes.</p><ol><li><p>Within the secrets list, click on a secret name.</p></li><li><p>Click the <strong>Reveal value</strong> button to display the contents of your secret. This is useful if you want to copy your public SSH key and add it to another system.</p></li><li><p>In the <strong>Actions</strong> drop-down, select <strong>Edit Secrets</strong> to open a form-based editor where you can make changes.</p></li></ol><h2 id="mount-secrets-as-environment-variables" tabindex="-1"><a class="header-anchor" href="#mount-secrets-as-environment-variables" aria-hidden="true">#</a> Mount secrets as Environment Variables</h2><p>This section describes how to create and use secrets for your personal username and password to be used by Zowe CLI and Zowe Explorer in Dev Spaces.</p><ol><li><p>The username and password that you want to store in the secret must be base64-encoded so that their content can be used with an OpenShift secret. The following commands, which you can run either in your workspace terminal or any other Unix-based terminal you have available, performs such an encoding for you.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> -n <span class="token string">&#39;&lt;username&gt;&#39;</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> encoded-user.txt
<span class="token builtin class-name">echo</span> -n <span class="token string">&#39;&lt;password&gt;&#39;</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> encoded-password.txt
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h3 id="create-the-secret-in-the-openshift-console" tabindex="-1"><a class="header-anchor" href="#create-the-secret-in-the-openshift-console" aria-hidden="true">#</a> Create the secret in the OpenShift console</h3><ol><li><p>If you want to use the OpenShift console as described in the previous section, ensure that you have selected your project on the OpenShift <strong>Secrets</strong> page.</p></li><li><p>Use the <strong>Create</strong> button with the <strong>From YAML</strong> option to open a text editor where you can paste and modify the following template:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> auth<span class="token punctuation">-</span>secrets<span class="token punctuation">-</span>zowe
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-to-devworkspace</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
    <span class="token key atrule">controller.devfile.io/watch-secret</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-as</span><span class="token punctuation">:</span> env
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">ZOWE_OPT_USER</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>encoded<span class="token punctuation">-</span>user.txt<span class="token punctuation">&gt;</span>
  <span class="token key atrule">ZOWE_OPT_PASSWORD</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>encoded<span class="token punctuation">-</span>password.txt<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>As indicated, replace the two lines at the end with the content of your two text files created in the previous step. Note that currently only these two environment variable names are supported by Zowe Explorer.</p></li><li><p>Click the Create button and check in the Console that it was created correctly, as described in the previous section.</p></li></ol><h3 id="create-the-secret-with-the-command-line-tool" tabindex="-1"><a class="header-anchor" href="#create-the-secret-with-the-command-line-tool" aria-hidden="true">#</a> Create the secret with the command-line tool</h3><ol><li><p>If you are using the command-line tool, follow the steps in the previous section to find your personal OpenShift project name and set the context for oc commands with</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc <span class="token operator">&lt;</span>my-project-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Save the contents of the modified template from above in a file called &quot;secret.yaml&quot; and run this command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc apply -f secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Another way to create secrets is by using command-line parameters like this, instead of the yaml file.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc create secret generic auth-secrets-zowe --from-literal<span class="token operator">=</span>ZOWE_OPT_USER<span class="token operator">=</span><span class="token string">&quot;&lt;username&gt;&quot;</span> --from-literal<span class="token operator">=</span>ZOWE_OPT_PASSWORD<span class="token operator">=</span><span class="token string">&quot;&lt;password&gt;&quot;</span> -n <span class="token operator">&lt;</span>my-project-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="testing-the-secret" tabindex="-1"><a class="header-anchor" href="#testing-the-secret" aria-hidden="true">#</a> Testing the secret</h3><p>After the secret is created, any currently running Dev Spaces workspace editor prompts you to reload the page.</p>`,19),I=t(`<li><p>After it finishes reloading, you can check the values of your environment variables in the VS Code terminal using the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$ZOWE_OPT_USER</span> <span class="token variable">$ZOWE_OPT_PASSWORD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li>`,1),T=e("Now use the two environment variables "),z=s("code",null,"$ZOWE_OPT_USER",-1),j=e(" and "),P=s("code",null,"$ZOWE_OPT_PASSWORD",-1),R=e(" in your Zowe team configuration files as the values for the "),W=s("code",null,"user",-1),Z=e(" and "),V=s("code",null,"password",-1),H=e(" properties. See the details in "),U=e("Using Environment Variables for Authentication in Zowe Explorer and Openshift Dev Workspaces"),M=t(`<h2 id="create-secrets-for-password-less-access-to-your-z-os-system" tabindex="-1"><a class="header-anchor" href="#create-secrets-for-password-less-access-to-your-z-os-system" aria-hidden="true">#</a> Create secrets for password-less access to your z/OS system</h2><p>To ssh into a z/OS system, you need to create ssh private and public keys as well as a know_hosts file entry as K8s secrets.</p><p>In a nutshell, for experts and based on the instructions above, you need to perform the following steps to produce these secrets:</p><ol><li>Create RSA key pairs and base64-encode them</li><li>Create a known_hosts entry and base64-encode it</li><li>Create a secret OpenShift resource and submit it against your workspace&#39;s namespace</li><li>Upload the public key to z/OS</li></ol><p>Note, unless you are using vault technology as described at the beginning of this section, OpenShift administrators can access your secrets and decode your private key. It is strongly suggested that you create a fresh key pair with a passphrase to use for Dev Spaces. If you are a Windows user, you can perform some of the steps involving Unix commands in a running Dev Spaces workspace&#39;s VS Code terminal. If you do so, create a folder such as <code>/project/ssh-keys</code> or <code>/projects/zopeneditor-sample/ssh-keys</code>, and store the intermediate files produced by these instructions there. After you finish, delete the entire directory. In the following steps, assume that you have created and changed directory into that new empty directory called <code>ssh-keys</code> in the Dev Spaces terminal view.</p><ol><li><p>Generate a new RSA key pair with the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-keygen -t rsa -f devspaces-id -P <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The last <code>-P</code> parameter defines a passphrase, which you can provide to ensure that an OpenShift administrator cannot use your keys. If you leave it empty, it does not prompt you for the passphrase when using the keys.</p></li><li><p>Execute this command to generate the &quot;known_hosts&quot; entry required for this secret. Replace the word <code>&lt;hostname&gt;</code> with the IP address or the fully qualified hostname that you use to interact with the z/OS system. Replace <code>&lt;username&gt;</code> with your username on the z/OS system. Also, remember to provide the <code>-p</code> parameter for the SSH port if it is not the standard port. This command first prompts you to check the ECDSA key fingerprint and then enter your z/OS password.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span> -o <span class="token assign-left variable">UserKnownHostsFile</span><span class="token operator">=</span>./known-hosts
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If you do this for multiple machines, execute this command against each one and then manually concatenate all the outputs, separated by a newline character into one file.</p></li><li><p>You have three files in your folder that must be base64 encoded so their contents can be used with an OpenShift secret.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> devspaces-id <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> devspaces-id-private.txt
<span class="token function">cat</span> devspaces-id.pub <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> devspaces-id-public.txt
<span class="token function">cat</span> known-hosts <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">&#39;\\n&#39;</span> <span class="token operator">&gt;</span> known-hosts.txt
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>Create a new file called &quot;secret.yaml&quot;. See the section above for alternative ways to perform these steps, either in the OpenShift Console or through command-line operations using the <code>oc</code> command.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ssh<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>secret
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-to-devworkspace</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
    <span class="token key atrule">controller.devfile.io/watch-secret</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">controller.devfile.io/mount-path</span><span class="token punctuation">:</span> <span class="token string">&quot;/home/user/.ssh&quot;</span>
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">id_rsa</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>id<span class="token punctuation">-</span>private.txt<span class="token punctuation">&gt;</span>
  <span class="token key atrule">id_rsa.pub</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>content<span class="token punctuation">-</span>of<span class="token punctuation">-</span>devspaces<span class="token punctuation">-</span>id<span class="token punctuation">-</span>public.txt<span class="token punctuation">&gt;</span>
  <span class="token key atrule">known_hosts</span><span class="token punctuation">:</span> &lt;paste<span class="token punctuation">-</span>contents<span class="token punctuation">-</span>of<span class="token punctuation">-</span>known_hosts.txt<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>As indicated, replace the three lines at the end with the content of your three text files created in the previous steps.</p></li><li><p>Create the secrets in the Console as described above or through the &quot;oc&quot; command with</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc apply -f secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>After the secret is submitted, the Dev Spaces workspace editor prompts you to reload. After it finishes reloading, you can check if your secret is available using the VS Code terminal again.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ll ~/.ssh
total <span class="token number">0</span>
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">13</span> May <span class="token number">30</span> <span class="token number">22</span>:20 id_rsa -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/id_rsa
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">17</span> May <span class="token number">30</span> <span class="token number">22</span>:20 id_rsa.pub -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/id_rsa.pub
lrwxrwxrwx. <span class="token number">1</span> root <span class="token number">1000720000</span> <span class="token number">18</span> May <span class="token number">30</span> <span class="token number">22</span>:20 known_hosts -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>data/known_hosts
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>Now you can add your public key to the z/OS system through this command, which again prompts you (for the last time) for your z/OS password. Again add a <code>-p</code> parameter for a custom ssh port.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-copy-id -f -i ~/.ssh/id_rsa.pub <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Perform the final test by logging on to the z/OS system from the VS Code terminal in Dev Spaces this time without being prompted for your password.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="other-security-integrations" tabindex="-1"><a class="header-anchor" href="#other-security-integrations" aria-hidden="true">#</a> Other security integrations</h2>`,7),N=e("In addition to creating and managing personal secrets, OpenShift Dev Spaces administrators also set up OAuth-based authentication providers, such as GitHub Enterprise servers in your organization. This enables you to access the server without creating personal secrets, using your regular authentication method. Ask your administrator to review this documentation of the "),L={href:"https://access.redhat.com/documentation/en-us/red_hat_openshift_dev_spaces/3.21/html/user_guide/using-credentials-and-configurations-in-workspaces",target:"_blank",rel:"noopener noreferrer"},G=e("Red Hat administration guide"),K=e(" with the details."),Y=e("The "),F={href:"https://access.redhat.com/documentation/en-us/red_hat_openshift_dev_spaces/3.21/html/user_guide/using-credentials-and-configurations-in-workspaces",target:"_blank",rel:"noopener noreferrer"},$=e("Red Hat user documentation"),B=e(" provides details on how to create and manage personal secrets. As a convenience, here are the instructions to create all the secrets required to access your remote z/OS\xAE system without a password. These steps are a prerequisite to run Ansible\xAE playbooks against your z/OS\xAE system.");function X(J,Q){const a=o("ExternalLinkIcon"),r=o("RouterLink");return i(),p(l,null,[h,m,b,s("p",null,[k,s("a",g,[y,n(a)]),f,s("a",v,[w,n(a)]),_,s("a",S,[x,n(a)]),O]),s("p",null,[C,s("a",q,[A,n(a)]),D]),E,s("ol",null,[I,s("li",null,[s("p",null,[T,z,j,P,R,W,Z,V,H,n(r,{to:"/Docs/zowe_advanced_connection_scenarios.html#using-environment-variables-for-authentication-in-zowe-explorer-and-openshift-dev-workspaces"},{default:c(()=>[U]),_:1})])])]),M,s("p",null,[N,s("a",L,[G,n(a)]),K]),s("p",null,[Y,s("a",F,[$,n(a)]),B])],64)}var ne=u(d,[["render",X]]);export{ne as default};
