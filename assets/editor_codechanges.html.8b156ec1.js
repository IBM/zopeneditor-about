import{r as s,o as l,a as c,b as o,d as t,w as i,F as d,e,c as r}from"./app.9a9d1e31.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var p="/zopeneditor-about/assets/outline-explorer.b627b471.gif",u="/zopeneditor-about/assets/code-complete.80474fa5.gif",g="/zopeneditor-about/assets/declaration-hover.7c4db833.gif",m="/zopeneditor-about/assets/preview-cpy.b2972b87.gif",f="/zopeneditor-about/assets/peek-references.e1027ab6.gif",b="/zopeneditor-about/assets/peek-definition.46a952a9.gif",w="/zopeneditor-about/assets/dbc-editing.a44e336b.png",y="/zopeneditor-about/assets/cobol-code-folding.cb3828fd.gif",v="/zopeneditor-about/assets/pli-code-folding.d1610344.gif",_="/zopeneditor-about/assets/pli-toggle-comment.59dde837.gif";const k={},C=o("h1",{id:"making-cobol-and-pl-i-code-changes",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#making-cobol-and-pl-i-code-changes","aria-hidden":"true"},"#"),e(" Making COBOL and PL/I code changes")],-1),O=e("IBM Z\xAE Open Editor supports COBOL, PL/I, HLASM, and REXX editing. Select a program, copybook, include, or JCL file in the Explorer to open it in the editor. For HLASM specific details, see "),x=e("Making High Level Assembler code changes"),L=e(". For REXX specific details, see "),S=e("Making REXX code changes"),I=e("."),E=r('<p>With the syntax highlighting capability, you can quickly distinguish reserved words, comments, constants, and variables of COBOL, PL/I and HLASM programs. With vertical rulers, which mark different areas, you can better determine the correct areas for comments and the boundaries for coding in areas A and B, and so on.</p><p>The editor provides the following features and capabilities:</p><h2 id="browsing-code-by-using-the-outline-view" tabindex="-1"><a class="header-anchor" href="#browsing-code-by-using-the-outline-view" aria-hidden="true">#</a> Browsing code by using the Outline view</h2><p>As you view the source, you can use the Outline view to efficiently explore and navigate the code of the program. By looking through the items in this view, you can get an idea of what the program does at a high level.</p><p><img src="'+p+'" alt="Illustration of using the Outline view"></p><p><strong>How to use it</strong></p><p>You can use the Outline view only after you have opened a file or program. If the Outline view is not already expanded, you can open it by clicking <strong>View &gt; Open view &gt; Outline</strong>.</p><p>You can use this view to:</p><ul><li>Expand and collapse sections such as Division Headings, Section Headings, and Variable Group Names in the Outline View.</li><li>Recognize includes, procedures, loops quickly via the icons located by the various items.</li><li>Go to a wanted location in the code by clicking that section header in the view.</li><li>Sort by Position, Name, or Type.</li><li>Search for identifiers within the outline by pressing Ctrl+Shift+O (Windows), or Cmd+Shift+O (Mac) within the Editor window.</li></ul><p>When you move your cursor over the program, outline nodes are automatically selected. To toggle this and other features related to the Outline View, hover over the upper right corner of the Outline View. You can see the option <strong>...</strong>, where you can click to find multiple options to organize your outline view such as Follow on Cursor, Filter by Type and Sort by Name, Position, and Type.</p><h2 id="code-and-variable-completion-suggestion" tabindex="-1"><a class="header-anchor" href="#code-and-variable-completion-suggestion" aria-hidden="true">#</a> Code and variable completion suggestion</h2><p>When you are typing code, code completion suggestion provides you with a matching list from which you can select commands, defined variable and paragraph names, and code snippets.</p><p><img src="'+u+'" alt="Illustration of code and variable completion"></p><p><strong>How to use it</strong></p><p>The code completion suggestion is displayed automatically while you are typing or when you press Ctrl+Space (Windows and Mac) depending on your preferences settings.</p><h2 id="hovering-for-declaration" tabindex="-1"><a class="header-anchor" href="#hovering-for-declaration" aria-hidden="true">#</a> Hovering for declaration</h2><p>You can see the working storage definition or DCL definition and the parent group of a variable or paragraph name by moving your mouse cursor over to the variable or paragraph name.</p><p><img src="'+g+'" alt="Illustration of hovering for declaration"></p><p><strong>How to use it</strong></p><p>The declaration hover is enabled by default.</p><h2 id="previewing-copybooks-and-include-files" tabindex="-1"><a class="header-anchor" href="#previewing-copybooks-and-include-files" aria-hidden="true">#</a> Previewing copybooks and include files</h2><p>You can preview the contents of a copybook or include file by moving your mouse cursor over the copybook name in a <strong><code>COPY</code></strong> statement in COBOL and HLASM, or the include file in a <strong><code>%INCLUDE</code></strong> statement in PL/I and REXX, without having to navigate away from the file you are working in. To open the file in a separate editor, press Ctrl+Click (Windows) or Cmd+Click (Mac).</p><p><img src="'+m+'" alt="Illustration of previewing copybooks and include files"></p><p><strong>How to use it</strong></p><p>You must specify the filepath to the copybooks or include files in your <a href="setting_propertygroup">ZAPP file property groups</a> to resolve the references. The location can be a local one, such as another directory in your workspace or it can be an MVS data set on a remote z/OS system using Zowe connectivity to find an load the files.</p><p>If no filepath is specified or the copybooks or include files are not found in the provided filepath, an error (red squiggle) is shown. To resolve this, follow the instructions provided and our <a href="zapp">ZAPP overview</a> and <a href="setting_propertygroup">Property Groups</a> pages.</p><h2 id="expanding-programs-with-copybooks" tabindex="-1"><a class="header-anchor" href="#expanding-programs-with-copybooks" aria-hidden="true">#</a> Expanding programs with copybooks</h2><p>You can preview how the compiler will be expanding copybooks in your COBOL program. The results will be displayed in a new editor tab for a temporary file showing how the copybooks will be inserted into the code and <code>REPLACING</code> statements expanded.</p><p><strong>How to use it</strong></p><ul><li><p>Open a COBOL program that includes copybooks.</p></li><li><p>Right-click inside the editor and select <strong>Expand source code</strong> from the context menu.</p><p>A new editor tab will open appending &quot;expanded_COBOL&quot; to the filename showing the results. You will see copybooks inside the program text with additional comments listing the source location of the included file. Inside the program you find variable names substituted with <code>REPLACING</code> values if specified in the original <code>COPY</code> statement.</p></li></ul><h2 id="operations-on-variable-and-paragraph-names" tabindex="-1"><a class="header-anchor" href="#operations-on-variable-and-paragraph-names" aria-hidden="true">#</a> Operations on variable and paragraph names</h2><p>When you double-click a variable or paragraph name to highlight the entire name and then right-click it, you can see the available operations.</p><p><strong>How to use it</strong></p><ul><li><p>Click <strong>Change All Occurrences</strong>: Ctrl+F2 (Windows) or Cmd+F2 (Mac)</p><p>When you type the new name, all occurrences are changed simultaneously.</p><p><strong>NOTE</strong>: In the scroll bar on the right side of the editor, each occurrence is noted with a location bar.</p></li><li><p>Click <strong>Find All References</strong>: Alt+Shift+F12 (Windows) or Option+Shift+F12(Mac)</p><p>A Results References view for the variable or paragraph is displayed on the left side of the screen. Click any result to go to that location in the file.</p></li><li><p>Click <strong>Peek References</strong>: Shift+F12 (Windows and Mac)</p><p>This opens a Results References view in the CodeLens box underneath the variable or paragraph. Click any result to go to that location in the file.</p><p><img src="'+f+'" alt="Illustration of peeking references"></p></li><li><p>Click <strong>Go to Definition</strong>: F12 (Windows and Mac)</p><p>Go to the location where the variable or paragraph is defined. It opens the copybook or include file if applicable.</p></li><li><p>Click <strong>Go to Symbol</strong>: Ctrl+Shift+O (Windows) or Cmd+Shift+O (Mac)</p><p>When you enter an object name in the search bar or you scroll through the items to select the object, the cursor is moved to that location.</p></li><li><p>Click <strong>Peek Definition</strong>: Alt+F12 (Windows) or Option+F12 (Mac)</p><p>This opens a CodeLens box that shows where the variable or paragraph was defined in the code. If you use the keyboard shortcut Alt+F12 (Windows) or Option+F12 (Mac), the variable or paragraph name is only clicked once before the keyboard shortcuts are pressed. Double-click any result to go to that location in the file.</p><p><img src="'+b+'" alt="Illustration of peeking definition"></p></li><li><p>Click <strong>Rename Symbol</strong>: F2 (Windows and Mac)</p><p>Rename the selected symbol, and the changes are done in the whole program and copybook or include if it is attached to that symbol.</p></li></ul><h2 id="syntax-checking" tabindex="-1"><a class="header-anchor" href="#syntax-checking" aria-hidden="true">#</a> Syntax checking</h2><p>The syntax checking feature underlines unrecognized statements and expressions in red, which helps you to make quick corrections and reduce compile errors.</p><p>Syntax checking also works for misspelled COBOL, PL/I reserved words and unknown variable names. For HLASM, there are syntax errors for improper spaces in a continuation line and unresolved copy statements.</p><p><strong>How to use it</strong></p><p>To see all the syntax errors in the open files, open the Problems view through the View menu or by clicking the error and warning icon at the bottom in the status bar. Double-click the list item to directly go to the problem.</p><h2 id="editing-double-byte-characters" tabindex="-1"><a class="header-anchor" href="#editing-double-byte-characters" aria-hidden="true">#</a> Editing double-byte characters</h2><p>When writing international applications with string constants that contain shift-in/shift-out double-byte characters, Z Open Editor will assist developers in ensuring that the COBOL program lines do not exceed the <a href="./setting_maximum_line_length">maximum line length configured for the editor</a>.</p><p>It will do that in two ways:</p><ol><li>Any sets of characters that take up more than one byte will be automatically visualized in the editor with special guillemets (<code>\xAB \xBB</code>) annotations. These annotations only help you to identify the characters. They are not actual characters of the program and will not be stored with it. Also, when you copy and paste the text to another editor, they will not be added to the clipboard.</li><li>When you start typing such characters, the status bar will automatically start displaying a Byte Count entry that shows you how many bytes you have left before reaching the maximum line length.</li></ol><p><img src="'+w+'" alt="Editing strings with double-byte characters"></p>',44),T=e("Also review "),B=e("EBCDIC code pages and mappings files"),P=e(" with examples for converting double-byte characters from EBCDIC to UTF-8 and vice versa when working with files from z/OS MVS and UNIX System Services."),M=r('<h2 id="undoing-and-redoing" tabindex="-1"><a class="header-anchor" href="#undoing-and-redoing" aria-hidden="true">#</a> Undoing and redoing</h2><p>Undo your changes by pressing Ctrl+Z (Windows) or Cmd+Z (Mac). Redo your changes by pressing Ctrl+Shift+Z (Windows) or Cmd+Shift+Z (Mac).</p><h2 id="renumbering-and-unnumbering-sequence-numbers" tabindex="-1"><a class="header-anchor" href="#renumbering-and-unnumbering-sequence-numbers" aria-hidden="true">#</a> Renumbering and unnumbering sequence numbers</h2><p>The Renumber/Unnumber function applies only to COBOL and will renumber the lines in the COBOL file. There is an option in preferences to control which columns will have sequence numbers inserted and removed. The user selects either columns 1-6, 73-80, or both. The numbering will start with 100 and increment each line by 100 while preserving non-numeric markers. This function equates to turning on the number mode in ISPF.</p><p>The COBOL Unnumber function will remove the line numbering in either columns 1-6, 73-80, or both while preserving non-numeric markers. This function equates to turning off the number mode in ISPF.</p><p><strong>How to use it</strong></p><p>To configure the preferences in the Z Open Editor Settings for which columns you would like to renumber and unnumber, modify your settings as follows.</p><ol><li><p>Open your settings:</p><ul><li>Windows: <strong>File &gt; Preferences &gt; Settings</strong></li><li>Mac: <strong>Code &gt; Preferences &gt; Settings</strong></li></ul></li><li><p>In the left side of the opened Settings interface, expand <strong>Extensions</strong> from the list of categories, and click <strong>IBM Z Open Editor</strong>. In the IBM Z Open Editor settings, under <strong>COBOL: Sequence Numbers</strong>, click the dropdown menu to select a preference.</p></li><li><p>Click the appropriate option to specify the location of sequence numbers that are inserted and removed from a file by the Renumber and Unnumber editor actions. The options are as follows.</p><ul><li><strong><code>column-1</code></strong>: The sequence numbering begins at column 1, and will fill columns 1-6.</li><li><strong><code>column-73</code></strong>: The sequence numbering begins at column 73, and will fill columns 73-80.</li><li><strong><code>column-1-and-73</code></strong>: The sequence numbering begins at column 1 and 73, and will fill columns 1-6 and 73-80.</li></ul></li></ol><p>To number or renumber a COBOL file, right-click in the file in the editor and select the <strong><code>Renumber Sequence Numbers</code></strong> command. To unnumber the COBOL file, right-click in file in the editor and select the <strong><code>Unnumber Sequence Numbers</code></strong> command.</p><h2 id="commenting-and-uncommenting-cobol-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-cobol-code" aria-hidden="true">#</a> Commenting and uncommenting COBOL code</h2><p>You can comment and uncomment COBOL code by using the keyboard shortcut. This method works for both single-line comments and multi-line block comments.</p><p><strong>How to use it</strong></p><p>To comment COBOL code:</p><ol><li>In a COBOL file, place your cursor where you want to add a single-line comment, or click and select the code or text where you want to comment out a code block.</li><li>Press Ctrl+/ (Windows) or Cmd+/ (Mac).</li></ol><p>To uncomment COBOL code:</p><ol><li>Select the code that is currently commented out.</li><li>Press Ctrl+/ (Windows) or Cmd+/ (Mac).</li></ol><h2 id="cobol-code-folding" tabindex="-1"><a class="header-anchor" href="#cobol-code-folding" aria-hidden="true">#</a> COBOL Code Folding</h2><p>Code folding is a feature that allows users to show or hide logical sections of the COBOL source code, which makes it easier for users to focus on the code they are working on. Logical sections of COBOL source code include but not limited to DIVISION, SECTION, PARAGRAPH, IF, ELSE, WHEN, DO, DATA-ITEMS, and EXEC SQL/CICS statements.</p><p><strong>How to use it</strong></p>',19),A=e("You can fold regions of COBOL source code using the folding icons in the gutter between the line numbers and line start. Move the mouse over the gutter and click to fold and unfold regions. Use "),F=o("code",null,"Shift + Click",-1),W=e(" on the folding icon to fold or unfold the region and all regions inside. For more detailed information about code folding, refer to the "),R={href:"https://code.visualstudio.com/docs/editor/codebasics#_folding",target:"_blank",rel:"noopener noreferrer"},H=e("VS Code code folding documentation"),N=e("."),q=o("p",null,[o("img",{src:y,alt:"COBOL Code Folding Example"})],-1),z=o("p",null,[e("COBOL code folding is enabled by default. To disable it use the setting "),o("code",null,"zopeneditor.cobol.enableCodeFolding"),e(".")],-1),D=o("h2",{id:"pl-i-code-folding",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#pl-i-code-folding","aria-hidden":"true"},"#"),e(" PL/I Code Folding")],-1),V=o("p",null,"Code folding is a feature that allows users to show or hide logical sections of the PL/I source code which makes it easier for users to focus on the code they are working on. Logical sections of PL/I source code include IF, ELSE, DO, SELECT, WHEN, OTHERWISE, PACKAGE, BEGIN, PROCEDURE and ON blocks.",-1),Y=o("p",null,[o("strong",null,"How to use it")],-1),U=e("You can fold regions of PL/I source code using the folding icons in the gutter between the line numbers and line start. Move the mouse over the gutter and click to fold and unfold regions. Use "),Z=o("code",null,"Shift + Click",-1),G=e(" on the folding icon to fold or unfold the region and all regions inside. For more detailed information about code folding, refer to the "),X={href:"https://code.visualstudio.com/docs/editor/codebasics#_folding",target:"_blank",rel:"noopener noreferrer"},j=e("VS Code code folding documentation"),J=e("."),K=r('<p><img src="'+v+'" alt="PL/I Code Folding Example"></p><h2 id="commenting-and-uncommenting-pl-i-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-pl-i-code" aria-hidden="true">#</a> Commenting and uncommenting PL/I code</h2><p>You can comment out one or multiple selected lines of code or a selected section of code by using the toggle comment function.</p><p><strong>How to use it</strong></p><p>To toggle comment for one or multiple selected lines of code, press Cmd+/ (Mac) or Ctrl+/ (Windows), or go to <code>Edit &gt; Toggle Line Comment</code>.</p><p>To toggle comments for a selected section of code, press Option+Shift+A (Mac) or Alt+Shift+A (Windows), or go to <code>Edit &gt; Toggle Block Comment</code>.</p><p>See the following example where we first toggle line comment on multiple selected lines, then toggle line comment on a single line, and finally toggle block comment on a selection:</p><p><img src="'+_+'" alt="pli toggle comment"></p>',8);function Q($,ee){const n=s("RouterLink"),a=s("ExternalLinkIcon");return l(),c(d,null,[C,o("p",null,[O,t(n,{to:"/Docs/editor_codechanges_hlasm.html"},{default:i(()=>[x]),_:1}),L,t(n,{to:"/Docs/editor_codechanges_rexx.html"},{default:i(()=>[S]),_:1}),I]),E,o("p",null,[T,t(n,{to:"/Docs/ebcdic_encoding.html"},{default:i(()=>[B]),_:1}),P]),M,o("p",null,[A,F,W,o("a",R,[H,t(a)]),N]),q,z,D,V,Y,o("p",null,[U,Z,G,o("a",X,[j,t(a)]),J]),K],64)}var ne=h(k,[["render",Q]]);export{ne as default};
