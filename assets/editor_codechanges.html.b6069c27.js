import{r as s,o as a,a as l,b as e,d as t,w as i,F as c,e as o,c as r}from"./app.8d6890da.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";var h="/zopeneditor-about/assets/outline-explorer.b627b471.gif",p="/zopeneditor-about/assets/code-complete.80474fa5.gif",u="/zopeneditor-about/assets/declaration-hover.7c4db833.gif",g="/zopeneditor-about/assets/preview-cpy.b2972b87.gif",m="/zopeneditor-about/assets/peek-references.e1027ab6.gif",f="/zopeneditor-about/assets/peek-definition.46a952a9.gif";const b={},y=e("h1",{id:"making-cobol-and-pl-i-code-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#making-cobol-and-pl-i-code-changes","aria-hidden":"true"},"#"),o(" Making COBOL and PL/I code changes")],-1),w=o("IBM Z\xAE Open Editor supports COBOL, PL/I, HLASM, and REXX editing. Select a program, copybook, include, or JCL file in the Explorer to open it in the editor. For HLASM specific details, see "),v=o("Making High Level Assembler code changes"),k=o(". For REXX specific details, see "),O=o("Making REXX code changes"),_=o("."),C=r('<p>With the syntax highlighting capability, you can quickly distinguish reserved words, comments, constants, and variables of COBOL, PL/I and HLASM programs. With vertical rulers, which mark different areas, you can better determine correct areas for comments and the boundaries for coding in areas A and B, and so on.</p><p>The editor provides the following features and capabilities:</p><h2 id="browsing-code-by-using-the-outline-view" tabindex="-1"><a class="header-anchor" href="#browsing-code-by-using-the-outline-view" aria-hidden="true">#</a> Browsing code by using the Outline view</h2><p>As you view the source, you can use the Outline view to efficiently explore and navigate the code of the program. By looking through the items in this view, you can get an idea of what the program does at a high level.</p><p><img src="'+h+'" alt="Illustration of using the Outline view"></p><p><strong>How to use it</strong></p><p>You can use the Outline view only after you have opened a file or program. If the Outline view is not already expanded, you can open it by clicking <strong>View &gt; Open view &gt; Outline</strong>.</p><p>You can use this view to:</p><ul><li>Expand and collapse sections such as Division Headings, Section Headings, and Variable Group Names in the Outline View.</li><li>Recognize includes, procedures, loops quickly via the icons located by the various items.</li><li>Go to a wanted location in the code by clicking that section header in the view.</li><li>Sort by Position, Name, or Type.</li><li>Search for identifiers within the outline by pressing Ctrl+Shift+O (Windows), or Cmd+Shift+O (Mac) within the Editor window.</li></ul><p>When you move your cursor over the program, outline nodes are automatically selected. To toggle this and other features related to the Outline View, hover over the upper right corner of the Outline View. You can see the option <strong>...</strong>, where you can click to find multiple options to organize your outline view such as Follow on Cursor, Filter by Type and Sort by Name, Position, and Type.</p><h2 id="code-and-variable-completion-suggestion" tabindex="-1"><a class="header-anchor" href="#code-and-variable-completion-suggestion" aria-hidden="true">#</a> Code and variable completion suggestion</h2><p>When you are typing code, code completion suggestion provides you with a matching list from which you can select commands, defined variable and paragraph names, and code snippets.</p><p><img src="'+p+'" alt="Illustration of code and variable completion"></p><p><strong>How to use it</strong></p><p>The code completion suggestion is displayed automatically while you are typing or when you press Ctrl+Space (Windows and Mac) depending on your preferences settings.</p><h2 id="hovering-for-declaration" tabindex="-1"><a class="header-anchor" href="#hovering-for-declaration" aria-hidden="true">#</a> Hovering for declaration</h2><p>You can see the working storage definition or DCL definition and the parent group of a variable or paragraph name by moving your mouse cursor over to the variable or paragraph name.</p><p><img src="'+u+'" alt="Illustration of hovering for declaration"></p><p><strong>How to use it</strong></p><p>The declaration hover is enabled by default.</p><h2 id="previewing-copybooks-and-include-files" tabindex="-1"><a class="header-anchor" href="#previewing-copybooks-and-include-files" aria-hidden="true">#</a> Previewing copybooks and include files</h2><p>You can preview the contents of a copybook or include file by moving your mouse cursor over the copybook name in a <strong><code>COPY</code></strong> statement in COBOL and HLASM, or the include file in a <strong><code>%INCLUDE</code></strong> statement in PL/I, without having to navigate away from the file you are working in.</p><p><img src="'+g+'" alt="Illustration of previewing copybooks and include files"></p><p><strong>How to use it</strong></p><p>You must specify the filepath to the copybooks or include files in your settings to resolve the references. If no filepath is specified or the copybooks or include files are not found in the provided filepath, an error (red squiggle) is shown.</p><p>To resolve this, add the filepath to the references in the <strong><code>zopeneditor.propertygroups</code></strong> section of your <code>settings.json</code> settings as follows.</p>',26),S=r("<li><p>Open your settings:</p><ul><li>Windows: <strong>File &gt; Preferences &gt; Settings</strong></li><li>Mac: <strong>Code &gt; Preferences &gt; Settings</strong></li></ul></li><li><p>In the left side of the opened Settings interface, expand <strong>Extensions</strong> from the list of categories, and click <strong>IBM Z Open Editor</strong>. In the IBM Z Open Editor settings, under <strong>Propertygroups</strong>, click <strong>Edit in settings.json</strong> to open the <code>settings.json</code> file.</p></li>",2),x=e("p",null,[o("Edit the "),e("code",null,"settings.json"),o(" file to specify filepaths to folders that contain copybooks or include files in the "),e("strong",null,[e("code",null,"syslib")]),o(" field. You can hover over the field names (such as "),e("strong",null,[e("code",null,"name")]),o(", "),e("strong",null,[e("code",null,"type")]),o(") to view details about what kind of information is expected for each field.")],-1),L=o("You can refer to the examples and supported patterns in "),I=o("Setting property groups"),T=o("."),M=e("li",null,[e("p",null,[o("Save the "),e("code",null,"settings.json"),o(" file by selecting "),e("strong",null,"File > Save"),o(".")])],-1),B=r('<p>If you have installed Zowe CLI, you can define a search path to resolve copybooks over the network against your remote MVS data sets or even USS directories (COBOL only at the moment).</p><p>To open the file in a separate editor, press Ctrl+Click (Windows) or Cmd+Click (Mac).</p><h2 id="operations-on-variable-and-paragraph-names" tabindex="-1"><a class="header-anchor" href="#operations-on-variable-and-paragraph-names" aria-hidden="true">#</a> Operations on variable and paragraph names</h2><p>When you double-click a variable or paragraph name to highlight the entire name and then right-click it, you can see the available operations.</p><p><strong>How to use it</strong></p><ul><li><p>Click <strong>Change All Occurrences</strong>: Ctrl+F2 (Windows) or Cmd+F2 (Mac)</p><p>When you type the new name, all occurrences are changed simultaneously.</p><p><strong>NOTE</strong>: In the scroll bar on the right side of the editor, each occurrence is noted with a location bar.</p></li><li><p>Click <strong>Find All References</strong>: Alt+Shift+F12 (Windows) or Option+Shift+F12(Mac)</p><p>A Results References view for the variable or paragraph is displayed on the left side of the screen. Click any result to go to that location in the file.</p></li><li><p>Click <strong>Peek References</strong>: Shift+F12 (Windows and Mac)</p><p>This opens a Results References view in the CodeLens box underneath the variable or paragraph. Click any result to go to that location in the file.</p><p><img src="'+m+'" alt="Illustration of peeking references"></p></li><li><p>Click <strong>Go to Definition</strong>: F12 (Windows and Mac)</p><p>Go to the location where the variable or paragraph is defined. It opens the copybook or include file if applicable.</p></li><li><p>Click <strong>Go to Symbol</strong>: Ctrl+Shift+O (Windows) or Cmd+Shift+O (Mac)</p><p>When you enter an object name in the search bar or you scroll through the items to select the object, the cursor is moved to that location.</p></li><li><p>Click <strong>Peek Definition</strong>: Alt+F12 (Windows) or Option+F12 (Mac)</p><p>This opens a CodeLens box that shows where the variable or paragraph was defined in the code. If you use the keyboard shortcut Alt+F12 (Windows) or Option+F12 (Mac), the variable or paragraph name is only clicked once before the keyboard shortcuts are pressed. Double-click any result to go to that location in the file.</p><p><img src="'+f+'" alt="Illustration of peeking definition"></p></li><li><p>Click <strong>Rename Symbol</strong>: F2 (Windows and Mac)</p><p>Rename the selected symbol, and the changes are done in the whole program and copybook or include if it is attached to that symbol.</p></li></ul><h2 id="syntax-checking" tabindex="-1"><a class="header-anchor" href="#syntax-checking" aria-hidden="true">#</a> Syntax checking</h2><p>The syntax checking feature underlines unrecognized statements and expressions in red, which helps you to make quick corrections and reduce compile errors.</p><p>Syntax checking also works for misspelled COBOL, PL/I reserved words and unknown variable names. For HLASM, there are syntax errors for improper spaces in a continuation line and unresolved copy statements.</p><p><strong>How to use it</strong></p><p>To see all the syntax errors in the open files, open the Problems view through the View menu or by clicking the error and warning icon at the bottom in the status bar. Double-click the list item to directly go to the problem.</p><h2 id="undoing-and-redoing" tabindex="-1"><a class="header-anchor" href="#undoing-and-redoing" aria-hidden="true">#</a> Undoing and redoing</h2><p>Undo your changes by pressing Ctrl+Z (Windows) or Cmd+Z (Mac). Redo your changes by pressing Ctrl+Shift+Z (Windows) or Cmd+Shift+Z (Mac).</p><h2 id="renumbering-and-unnumbering-sequence-numbers" tabindex="-1"><a class="header-anchor" href="#renumbering-and-unnumbering-sequence-numbers" aria-hidden="true">#</a> Renumbering and unnumbering sequence numbers</h2><p>The Renumber/Unnumber function applies only to COBOL and will renumber the lines in the COBOL file. There is an option in preferences to control which columns will have sequence numbers inserted and removed. The user selects either columns 1-6, 73-80, or both. The numbering will start with 100 and increment each line by 100 while preserving non-numeric markers. This function equates to turning on the number mode in ISPF.</p><p>The COBOL Unnumber function will remove the line numbering in either columns 1-6, 73-80, or both while preserving non-numeric markers. This function equates to turning off the number mode in ISPF.</p><p><strong>How to use it</strong></p><p>To configure the preferences in the Z Open Editor Settings for which columns you would like to renumber and unnumber, modify your settings as follows.</p><ol><li><p>Open your settings:</p><ul><li>Windows: <strong>File &gt; Preferences &gt; Settings</strong></li><li>Mac: <strong>Code &gt; Preferences &gt; Settings</strong></li></ul></li><li><p>In the left side of the opened Settings interface, expand <strong>Extensions</strong> from the list of categories, and click <strong>IBM Z Open Editor</strong>. In the IBM Z Open Editor settings, under <strong>COBOL: Sequence Numbers</strong>, click the dropdown menu to select a preference.</p></li><li><p>Click the appropriate option to specify the location of sequence numbers that are inserted and removed from a file by the Renumber and Unnumber editor actions. The options are as follows.</p><ul><li><strong><code>column-1</code></strong>: The sequence numbering begins at column 1, and will fill columns 1-6.</li><li><strong><code>column-73</code></strong>: The sequence numbering begins at column 73, and will fill columns 73-80.</li><li><strong><code>column-1-and-73</code></strong>: The sequence numbering begins at column 1 and 73, and will fill columns 1-6 and 73-80.</li></ul></li></ol><p>To number or renumber a COBOL file, right-click in the file in the editor and select the <strong><code>Renumber Sequence Numbers</code></strong> command. To unnumber the COBOL file, right-click in file in the editor and select the <strong><code>Unnumber Sequence Numbers</code></strong> command.</p><h2 id="commenting-and-uncommenting-cobol-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-cobol-code" aria-hidden="true">#</a> Commenting and uncommenting COBOL code</h2><p>You can comment and uncomment COBOL code using a keyboard shortcut. This method works for both single-line comments and multi-line block comments.</p><p><strong>How to use it</strong></p><ol><li><p>In a COBOL file, place your cursor where you would like to add a single-line comment.</p><ul><li>If you want to comment out a code block, then click and drag your cursor over the area of interest to select the code or text in the COBOL program.</li></ul></li><li><p>Press the comment shortcut that corresponds to your platform:</p><ul><li>Windows: Ctrl+/</li><li>Mac: Cmd+/</li></ul></li></ol><p>To uncomment COBOL code, use the same steps as previously described: select the code that is currently commented out, and then press the keyboard shortcut. The COBOL code will become uncommented again.</p>',25);function F(W,P){const n=s("RouterLink");return a(),l(c,null,[y,e("p",null,[w,t(n,{to:"/Docs/editor_codechanges_hlasm.html"},{default:i(()=>[v]),_:1}),k,t(n,{to:"/Docs/editor_codechanges_rexx.html"},{default:i(()=>[O]),_:1}),_]),C,e("ol",null,[S,e("li",null,[x,e("p",null,[L,t(n,{to:"/Docs/setting_propertygroup.html"},{default:i(()=>[I]),_:1}),T])]),M]),B],64)}var q=d(b,[["render",F]]);export{q as default};
