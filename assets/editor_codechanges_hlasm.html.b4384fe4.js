import{r as s,o as a,a as l,b as e,d as i,w as n,F as c,e as o,c as r}from"./app.00882f34.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/hlasm-outline.62567372.gif",p="/zopeneditor-about/assets/hlasm-completion.d984eb2b.gif",u="/zopeneditor-about/assets/hlasm-hover.19402729.gif",m="/zopeneditor-about/assets/hlasm-copy.7b7a1315.gif",g="/zopeneditor-about/assets/hlasm-references.8a795b5e.gif",f="/zopeneditor-about/assets/hlasm-peek-definition.ad097ffd.gif",y="/zopeneditor-about/assets/hlasm-macro-resolution.d2ec1e50.gif";const b={},w=e("h1",{id:"making-high-level-assembler-code-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#making-high-level-assembler-code-changes","aria-hidden":"true"},"#"),o(" Making High Level Assembler code changes")],-1),_=e("p",null,"In addition to COBOL and PL/I, IBM Z\xAE Open Editor supports IBM Z High Level Assembler (HLASM) editing. You can use the following features to program in HLASM effectively.",-1),v=e("p",null,"With the syntax highlighting capability, you can quickly distinguish between labels, operations, operands, and comments in a HLASM program. With vertical rulers, which mark different areas, you can better determine correct areas for symbols, operations, operands, continuation line indicators, and sequence numbers.",-1),k=e("p",null,"The editor provides the following features and capabilities:",-1),C=e("h2",{id:"browsing-code-by-using-the-outline-view",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#browsing-code-by-using-the-outline-view","aria-hidden":"true"},"#"),o(" Browsing code by using the Outline view")],-1),S=o("You can use the Outline view to efficiently explore and browse the source code of a program. By looking through the items in this view, you can get an idea of what the program does at a high level and easily go to key instructions, branch labels, and symbols. We purposely chose not to include every symbol, because in large assembler programs, the Outline view often becomes extremely cluttered. For more information, see "),M=o("Customizing the Outline view"),O=o("."),x=r('<p><img src="'+d+'" alt="HLASM Outline"></p><p><strong>How to use it</strong></p><p>You can use the Outline view only after you have opened a file or program. If the Outline view is not expanded, you can open it by clicking <strong>View &gt; Open view &gt; Outline</strong>.</p><p>You can use this view to:</p><ul><li>Recognize the following instructions quickly through the icons: <ul><li>CSECT</li><li>DSECT</li><li>RSECT</li><li>COM</li><li>LOCTR</li><li>MACRO</li></ul></li><li>Identify the following unique icons: <ul><li>All labels used in a branch instruction</li><li>All labels, if enabled</li></ul></li><li>Go to a location that you want in the code by clicking that section header in the view.</li><li>Sort by Position, Name, or Type.</li><li>Search for identifiers by pressing Ctrl+Shift+O on Windows or Cmd+Shift+O on Mac in the Editor window.</li></ul><p>When you move your cursor over the program, outline nodes are automatically selected. To toggle this and other features related to the Outline View, hover over the upper-right corner of the Outline view. You can see the option <strong>...</strong>, where you can click to find multiple options to organize your outline view such as Follow on Cursor, Filter by Type and Sort by Name, Position, and Type. To filter which icons to display in the Outline view, see <a href="customizing_the_outline_view#hlasm">Customizing the Outline view</a>.</p><h2 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code completion</h2><p>When you are typing in an HLASM program, code completion provides you with a list from which you can select operations or labels depending on the current context. Currently, code completion for symbols works for symbols defined in the current file and copied files. Code completion for operations works for default (SYS1.MACLIB) macros and macros defined in the current file. Work is in progress to extend this feature to custom macros and symbols defined in custom macros.</p><p><img src="'+p+'" alt="Code completion"></p><p><strong>How to use it</strong></p><p>The code completion suggestion is displayed automatically while you are typing in an appropriate context.</p><h2 id="hovering-for-declaration" tabindex="-1"><a class="header-anchor" href="#hovering-for-declaration" aria-hidden="true">#</a> Hovering for declaration</h2><p>You can see hovers for operations and operands by moving your mouse cursor over the operation or operand.</p><p><img src="'+u+'" alt="HLASM Hover"></p><p><strong>How to use it</strong></p><p>Operation and operand hovers are enabled by default. Simply move your mouse over an operation or operand. If the operand or operation is defined, a hover will appear.</p><h2 id="previewing-copybooks" tabindex="-1"><a class="header-anchor" href="#previewing-copybooks" aria-hidden="true">#</a> Previewing copybooks</h2><p>To preview the contents of a COPY statement move your mouse cursor over the copybook name. If the copybook cannot be resolved, a red error underline will appear on the copybook name. To open the file in a separate editor, press Ctrl+Click (Windows) or Cmd+Click (Mac).</p><p><img src="'+m+'" alt="HLASM Copy File Preview"></p><p><strong>How to use it</strong></p><p>To resolve copybooks, you must specify the filepath to the copybooks or include files in your <a href="setting_propertygroup">ZAPP file property groups</a> to resolve the references. The location can be a local one, such as another directory in your workspace, or it can be an MVS data set on a remote z/OS system using Zowe connectivity to find an load the files.</p><p>If no filepath is specified the include files are not found in the provided filepath, an error (red squiggle) is shown. To resolve this, follow the instructions provided and our <a href="zapp">ZAPP overview</a> and <a href="setting_propertygroup">Property Groups</a> pages.</p><h2 id="operations-on-symbols" tabindex="-1"><a class="header-anchor" href="#operations-on-symbols" aria-hidden="true">#</a> Operations on symbols</h2><p>When you double-click a symbol to highlight the entire name and then right-click it, you can see the available operations.</p><p><strong>How to use it</strong></p><ul><li><p>Click <strong>Change All Occurrences</strong>: Ctrl+F2 (Windows) or Cmd+F2 (Mac)</p><p>When you type the new name, all occurrences are changed simultaneously.</p><p><strong>NOTE</strong>: In the scroll bar on the right side of the editor, each occurrence is noted with a location bar.</p></li><li><p>Click <strong>Find All References</strong>: Alt+Shift+F12 (Windows) or Option+Shift+F12(Mac)</p><p>A Results References view for the variable or paragraph is displayed on the left side of the screen. Click any result to go to that location in the file.</p></li><li><p>Click <strong>Peek References</strong>: Shift+F12 (Windows and Mac)</p><p>This opens a Results References view in the CodeLens box underneath the variable or paragraph. Click any result to go to that location in the file.</p><p><img src="'+g+'" alt="HLASM PEEK REFERENCES"></p></li><li><p>Click <strong>Go to Definition</strong>: F12 (Windows and Mac)</p><p>Go to the location where the variable or paragraph is defined. It opens the copybook or include file if applicable.</p></li><li><p>Click <strong>Go to Symbol</strong>: Ctrl+Shift+O (Windows) or Cmd+Shift+O (Mac)</p><p>When you enter an object name in the search bar or you scroll through the items to select the object, the cursor is moved to that location.</p></li><li><p>Click <strong>Peek Definition</strong>: Alt+F12 (Windows) or Option+F12 (Mac)</p><p>This opens a CodeLens box that shows where the variable or paragraph was defined in the code. If you use the keyboard shortcut Alt+F12 (Windows) or Option+F12 (Mac), the variable or paragraph name is only clicked once before the keyboard shortcuts are pressed. Double-click any result to go to that location in the file.</p><p><img src="'+f+'" alt="HLASM PEEK DEFINITION"></p></li></ul><h2 id="remote-macros" tabindex="-1"><a class="header-anchor" href="#remote-macros" aria-hidden="true">#</a> Remote macros</h2><p>Macros in <code>SYS1.MACLIB</code> are available for code completion. In addition, if you configured Zowe Explorer to a z/OS MVS system that has a <code>SYS1.MACLIB</code> data set with a valid user z/OSMF or RSE API profile, you can preview remote macros in rich hovers. The tools will follow the same rules as for include file resolution, although no property groups need to be defined.</p><p><img src="'+y+'" alt="HLASM REMOTE MACRO"></p>',29),A=o("To enable the automatic lookup with your default Zowe CLI profile, go to "),I=e("strong",null,"Preferences > Settings",-1),L=o(", expand "),T=e("strong",null,"Extensions > IBM Z Open Editor",-1),H=o(" and check the option "),E=e("strong",null,"Hlasm: Enable Resolving Macros",-1),z=o(". Additionally, you can adjust the lookup to use the z/OS 2.4, 2.5, or 3.1 version of "),R=e("code",null,"SYS1.MACLIB",-1),W=o(" using "),F=e("strong",null,"Hlasm: Zos Macros Version",-1),P=o(". This will ensure proper hover and code completion support for the macro set that you are using. See "),Z=o("Setting preferences"),B=o(" for more details on managing preferences."),Y=e("p",null,"If you do not have any connectivity, we recommend keeping this feature switched off; otherwise the editor will continue trying to resolve the file via your Zowe CLI profile.",-1),N=o("If you want to use a different Zowe CLI profile than the default RSE API or z/OSMF profiles, specify the name of a different profile in the "),V=e("code",null,'"zopeneditor.zowe"',-1),D=o(" user setting. See the details in "),q=o("Setting up and using RSE profiles in IBM Z Open Editor"),G=o("."),j=r('<h2 id="syntax-checking" tabindex="-1"><a class="header-anchor" href="#syntax-checking" aria-hidden="true">#</a> Syntax checking</h2><p>The syntax checking feature underlines unrecognized statements and expressions in red, which helps you to make quick corrections and reduce compile errors. Currently, there are syntax errors for improper spaces in a continuation line, unresolved copy statements, and an invalid number of operands.</p><p><strong>How to use it</strong></p><p>To see all the syntax errors in the open files, open the Problems view through the View menu or by clicking the error and warning icon at the bottom in the status bar. Double-click the list item to directly go to the problem.</p><ul><li><p><strong>Invalid number of operands</strong></p><p>This syntax error is currently supported for all machine instructions. Assembler instructions and macros are not currently supported.</p></li></ul><h2 id="undoing-and-redoing" tabindex="-1"><a class="header-anchor" href="#undoing-and-redoing" aria-hidden="true">#</a> Undoing and redoing</h2><p>Undo your changes by pressing Ctrl+Z (Windows) or Cmd+Z (Mac). Redo your changes by pressing Ctrl+Shift+Z (Windows) or Cmd+Shift+Z (Mac).</p><h2 id="commenting-and-uncommenting-hlasm-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-hlasm-code" aria-hidden="true">#</a> Commenting and uncommenting HLASM code</h2><p>You can comment and uncomment HLASM code by using the keyboard shortcut. This method works for both single-line comments and multi-line block comments.</p><p><strong>How to use it</strong></p><p>To comment HLASM code:</p><ol><li>In an HLASM file, place your cursor where you want to add a single-line comment, or click and select the code or text where you want to comment out a code block.</li><li>Press Ctrl+/ (Windows) or Cmd+/ (Mac).</li></ol><p>To uncomment HLASM code:</p><ol><li>Select the code that is currently commented out.</li><li>Press Ctrl+/ (Windows) or Cmd+/ (Mac).</li></ol>',14);function K(U,J){const t=s("RouterLink");return a(),l(c,null,[w,_,v,k,C,e("p",null,[S,i(t,{to:"/Docs/customizing_the_outline_view.html"},{default:n(()=>[M]),_:1}),O]),x,e("p",null,[A,I,L,T,H,E,z,R,W,F,P,i(t,{to:"/Docs/setting_preferences.html"},{default:n(()=>[Z]),_:1}),B]),Y,e("p",null,[N,V,D,i(t,{to:"/Docs/interact_zos_zowe_explorer.html#setting-up-and-using-rse-profiles-in-ibm-z-open-editor"},{default:n(()=>[q]),_:1}),G]),j],64)}var $=h(b,[["render",K]]);export{$ as default};
