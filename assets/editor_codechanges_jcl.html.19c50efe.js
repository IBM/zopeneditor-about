import{r as i,o as s,a,b as o,d as r,F as d,c as t,e}from"./app.6f734deb.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var l="/zopeneditor-about/assets/jcl-outline.7501ea05.gif",h="/zopeneditor-about/assets/jcl-completion.a66212f2.gif",g="/zopeneditor-about/assets/preview-incl-jcl.2661ba25.png",u="/zopeneditor-about/assets/dsn-resolution.2caa607b.png",p="/zopeneditor-about/assets/jcl-code-folding.9cae3e19.gif",m="/zopeneditor-about/assets/jcl-toggle-comment.0dbcbaff.gif";const f={},b=t('<h1 id="making-jcl-code-changes" tabindex="-1"><a class="header-anchor" href="#making-jcl-code-changes" aria-hidden="true">#</a> Making JCL code changes</h1><p>In addition to COBOL, PL/I, REXX, and High Level Assembler (HLASM), IBM Z\xAE Open Editor supports z/OS MVS JCL editing. You can use the following features to edit JCL programs effectively.</p><p>With the syntax highlighting capability, you can quickly distinguish the comments, job, step (exec) and DD statements in a JCL program.</p><p>The editor provides the following features and capabilities:</p><h2 id="browsing-code-by-using-the-outline-view" tabindex="-1"><a class="header-anchor" href="#browsing-code-by-using-the-outline-view" aria-hidden="true">#</a> Browsing code by using the Outline view</h2><p>As you view the source, you can use the Outline view to efficiently explore and navigate the code of the program. By looking through the items in this view, you can see the Jobs, Steps, DD statements and directly navigate to one by selecting it.</p><p><img src="'+l+'" alt="JCL Outline"></p><p><strong>How to use it</strong></p><p>You can use the Outline view only after you have opened a file or program. If the Outline view is not already expanded, you can open it by clicking <strong>View &gt; Open view &gt; Outline</strong>.</p><p>You can use this view to:</p><ul><li>Recognize internal routines quickly via the icons in the outline view.</li><li>Go to a wanted location in the code by clicking the section header in the view.</li><li>Sort by Position or Name.</li><li>Search for identifiers within the outline by pressing Ctrl+Shift+O (Windows), or Cmd+Shift+O (Mac) within the Editor window.</li><li>Select the entire step/job/DD statement by double clicking on the symbol in the outline view.</li></ul><p>When you move your cursor over the program, outline nodes are automatically selected. To toggle this and other features related to the Outline View, hover over the upper right corner of the Outline View. You can see the option <strong>...</strong>, where you can click to find multiple options to organize your outline view such as Follow on Cursor, Filter by Type and Sort by Name, Position, and Type.</p><h2 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code completion</h2><p>The code completion feature suggests simple symbols, constant symbols, jobs, steps, DD statements, keyword instructions, and built-in functions. The editor applies a suggestion to the file based on the context of the cursor position. For a cursor position inside a stem, the suggestion replaces the entire symbol. For a cursor position inside the tail of a compound symbol, the suggestion replaces a segment of the symbol. The casing of the suggestion replaces the casing of the symbol in the file. The code completion suggestions are not filtered by case.</p><p><img src="'+h+'" alt="Code Completion"></p><p><strong>How to use it</strong></p><p>The code completion suggestion is displayed automatically while you are typing outside of any comments or strings.</p><h2 id="syntax-checking" tabindex="-1"><a class="header-anchor" href="#syntax-checking" aria-hidden="true">#</a> Syntax checking</h2><p>The syntax checking feature underlines unrecognized statements and expressions in red, which helps you to make quick corrections and reduce compile errors.</p><p><strong>How to use it</strong></p><p>To see all the syntax errors in the open files, open the Problems view through the View menu or by clicking the error and warning icon in the status bar. Double-click the list item to directly go to the problem.</p><h2 id="previewing-include-files-and-procs" tabindex="-1"><a class="header-anchor" href="#previewing-include-files-and-procs" aria-hidden="true">#</a> Previewing include files and PROCs</h2><p>You can preview the contents of an include file by moving your mouse cursor over the include file name in an <strong><code>INCLUDE MEMBER</code></strong> statement, without having to navigate away from the file you are working in. To open the file in a separate editor, press Ctrl+Click (Windows) or Cmd+Click (Mac).</p><p><img src="'+g+'" alt="Illustration of previewing include files"></p><p>The editor can load PROCs from z/OS using the current default Zowe profile and display their contents in hovers, including from <code>SYS1.PROCLIB</code>. Note that automatic retrieval from <code>SYS1.PROCLIB</code> must be enabled in the user settings and an MVS PROCLIB must be present in the ZAPP file. The setting <code>zopeneditor.jcl.enableResolvingProcs</code> is disabled (set to <code>false</code>) by default to prevent unnecessary traffic with z/OS.</p><h2 id="expand-source-code" tabindex="-1"><a class="header-anchor" href="#expand-source-code" aria-hidden="true">#</a> Expand source code</h2><p>In addition to reviewing include file content in a hover, you can also create an expanded version of your JCL file that shows how the file is included and expanded.</p><p><strong>How to use it</strong></p><p>In the editor right-click to open the context menu and select <strong>Expand source code</strong>. This opens a new read-only editor tab that shows the file with all include files embedded and expanded.</p><h2 id="on-hover-data-set-name-resolution" tabindex="-1"><a class="header-anchor" href="#on-hover-data-set-name-resolution" aria-hidden="true">#</a> On-hover data set name resolution</h2><p>You can preview the dereferenced value of a data set when hovering over the DSN statement. The SET values in the file are used to dereference the data set name.</p><p><img src="'+u+'" alt="dsn resolution"></p><h2 id="jcl-code-folding" tabindex="-1"><a class="header-anchor" href="#jcl-code-folding" aria-hidden="true">#</a> JCL Code Folding</h2><p>Code folding is a feature that allows users to show or hide logical sections of the JCL source code, which makes it easier for users to focus on the code they are working on. Logical sections of JCL source code includes JOB, EXEC, and DD statements.</p><p><strong>How to use it</strong></p>',35),w=e("You can fold regions of JCL source code using the folding icons in the gutter between the line numbers and line start. Move the mouse over the gutter and click to fold and unfold regions. Use Shift + Click on the folding icon to fold or unfold the region and all regions inside. For more detailed information about code folding, refer to the "),y={href:"https://code.visualstudio.com/docs/editor/codebasics#_folding",target:"_blank",rel:"noopener noreferrer"},v=e("VS Code code folding documentation"),C=e("."),_=t('<p><img src="'+p+'" alt="JCL Code Folding Example"></p><p>JCL code folding is enabled by default. To disable it use the setting <code>zopeneditor.jcl.enableCodeFolding</code>.</p><h2 id="undoing-and-redoing" tabindex="-1"><a class="header-anchor" href="#undoing-and-redoing" aria-hidden="true">#</a> Undoing and redoing</h2><p>Undo your changes by pressing Ctrl+Z (Windows) or Cmd+Z (Mac). Redo your changes by pressing Ctrl+Shift+Z (Windows) or Cmd+Shift+Z (Mac).</p><h2 id="commenting-and-uncommenting-jcl-code" tabindex="-1"><a class="header-anchor" href="#commenting-and-uncommenting-jcl-code" aria-hidden="true">#</a> Commenting and uncommenting JCL code</h2><p>You can comment out one or multiple selected lines of code or a selected section of code by using the toggle comment function.</p><p><strong>How to use it</strong></p><p>To toggle comment for one or multiple selected lines of code, press Cmd+/ (Mac) or Ctrl+/ (Windows), or go to <strong>Edit &gt; Toggle Line Comment</strong>.</p><p>To toggle comments for a selected section of code, press Option+Shift+A (Mac) or Alt+Shift+A (Windows), or go to <strong>Edit &gt; Toggle Block Comment</strong>.</p><p>See the following example where we first toggle line comment on a single line, then toggle line comment on multiple selected lines, and finally toggle block comment on a selection:</p><p><img src="'+m+'" alt="jcl toggle comment"></p>',11);function x(k,S){const n=i("ExternalLinkIcon");return s(),a(d,null,[b,o("p",null,[w,o("a",y,[v,r(n)]),C]),_],64)}var T=c(f,[["render",x]]);export{T as default};
