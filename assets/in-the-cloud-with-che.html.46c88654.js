import{r as i,o as r,a,b as e,d as n,F as l,e as o,c as s}from"./app.dfb34f82.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var h="/zopeneditor-about/assets/ibmzopeneditorinche.13b929bd.png",d="/zopeneditor-about/assets/workspace-using-ibmzstack.75a77fb4.png",p="/zopeneditor-about/assets/wazi-development-client-zowe-explorer.89a406ac.png";const u={},m=e("h1",{id:"ibm-z\xAE-open-editor-in-the-cloud-with-eclipse-che",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ibm-z\xAE-open-editor-in-the-cloud-with-eclipse-che","aria-hidden":"true"},"#"),o(" IBM Z\xAE Open Editor in the cloud with Eclipse Che")],-1),f=e("blockquote",null,[e("p",null,[o("by Prasang A. Prajapati, Eric Subah, and Peter Haumer."),e("br"),o(" Last updated: 3 December 2019")])],-1),g={href:"https://marketplace.visualstudio.com/items?itemName=IBM.zopeneditor",target:"_blank",rel:"noopener noreferrer"},_=o("IBM Z Open Editor"),w=o(" is a free Visual Studio Code extension that provides a modern editing experience for IBM Z Enterprise languages. It gives developers the freedom to code in COBOL and PL/I using the same editor they use for other languages such as Java and JavaScript. "),y={href:"https://ibm.github.io/zopeneditor-about/",target:"_blank",rel:"noopener noreferrer"},b=o("Learn more"),v=o("."),k=e("p",null,"However, Visual Studio Code is a rich client editor that needs to be installed and configured by every development team member on their development machines. In addition to installing the editor, enterprise developers also have to get access to source code and other resources residing in SCMs and on z/OS.",-1),O=e("p",null,"What if you could avoid all this and developers could just join a project by getting access and logging on to a website? After logging on, the source code, access to z/OS, and the development environment required for maintaining the project would just be there and developers can just dive in?",-1),C=o("To realize on this vision, there is an excellent open source tool platform called "),S={href:"https://www.eclipse.org/che/",target:"_blank",rel:"noopener noreferrer"},I=o("Eclipse Che"),E=o(". It was built to make Kubernetes development accessible for development teams, providing one-click developer workspaces and eliminating the need for local environment configurations for the entire team. This use case applies not only to Kubernetes development, but by utilizing z/OS connectivity features such as the ones provided by the "),x={href:"https://zowe.org",target:"_blank",rel:"noopener noreferrer"},z=o("Zowe"),T=o(" open source project also fits with the requirements for z/OS Mainframe development projects."),M=o("You can run Eclipse Che in the public cloud, private cloud, or install it on a large list of distributed OS (Ubuntu/Linux/MacOS/Windows). To learn more about Eclipse Che, see "),B={href:"https://www.eclipse.org/che/docs/",target:"_blank",rel:"noopener noreferrer"},j=o("Introduction to Eclipse Che"),L=o(". It is also built for extensibility allowing organizations to create and plug-in additional enhancements or features."),F=o("In the following, we want to show you how easy it is to set up such an Eclipse Che environment in IBM Cloud using OpenShift that is fully integrated with "),W={href:"https://marketplace.visualstudio.com/items?itemName=IBM.zopeneditor",target:"_blank",rel:"noopener noreferrer"},A=o("IBM Z Open Editor"),Z=o(" as well as "),P={href:"https://marketplace.visualstudio.com/items?itemName=Zowe.vscode-extension-for-zowe",target:"_blank",rel:"noopener noreferrer"},q=o("Zowe Explorer"),N=o(" in three simple steps. We will provide a sample application that you can use for exploration, but once you have it up and running, you can explore other possibilities for this new kind of development style using your own source code. We would love to hear your feedback and engage into a discussion on how we can make this work for your teams."),D=e("p",null,[e("img",{src:h,alt:"Screen capture for IBM Z Open Editor in Eclipse Che"}),o(" Fig. 1: The user experience of IBM Z Open Editor in Eclipse Che")],-1),U=e("h2",{id:"step-1-getting-started-with-ibm-cloud-and-openshift",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-1-getting-started-with-ibm-cloud-and-openshift","aria-hidden":"true"},"#"),o(" Step 1: Getting started with IBM Cloud and OpenShift")],-1),R=o("We recommend exploring Eclipse Che on IBM Cloud utilizing IBM's OpenShift V3.11 offering available there. However, the instruction provided here should also work on any other OpenShift or Kubernetes hosting platforms that can run Eclipse Che. If in fact you have Eclipse Che running somewhere in your organization or a Cloud account of your own, you can directly jump to "),G=e("a",{href:"#step-3:-creating-a-development-workspace-for-z"},"Step 3",-1),V=o(" now. Note that although the cluster and Che environment you are using needs to have at least 3 GB of memory available, the standard Che trial servers at "),Y={href:"https://che.openshift.io",target:"_blank",rel:"noopener noreferrer"},K=o("https://che.openshift.io"),H=o(" do not provide enough resources at the moment unfortunately."),J=e("h3",{id:"introducing-openshift",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#introducing-openshift","aria-hidden":"true"},"#"),o(" Introducing OpenShift")],-1),Q=o("An open source containerized platform developed by "),$={href:"https://www.redhat.com/en",target:"_blank",rel:"noopener noreferrer"},X=o("Red Hat"),ee=o("."),oe=o("It is "),te={href:"https://en.wikipedia.org/wiki/Platform_as_a_service",target:"_blank",rel:"noopener noreferrer"},ne=o("platform as a service (PaaS)"),se=o(". PaaS is a category of cloud computing services which provides an environment for customers to develop, run and manage their applications without the complex infrastructure of building and managing applications."),ie=e("li",null,"OpenShift container platform is a service which can be deployed on public, private or hybrid cloud which will help customers to deploy applications using docker containers.",-1),re=o("It is built on top of "),ae={href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"},le=o("Kubernetes"),ce=o(" and provides you tools like OpenShift web console or OpenShift CLI to manage projects and deployments."),he=e("li",null,"It simplifies development and operations for cloud native applications.",-1),de=o("It provides a web console to access and manage all the projects using built-in catalogs as well as OpenShift Container Platform templates. To learn more about OpenShift Web Console, you can view the "),pe={href:"https://docs.openshift.com/container-platform/3.7/getting_started/developers_console.html",target:"_blank",rel:"noopener noreferrer"},ue=o("OpenShift web console Walkthrough documentation"),me=o("."),fe=e("h3",{id:"creating-an-openshift-cluster-on-ibm-cloud",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-an-openshift-cluster-on-ibm-cloud","aria-hidden":"true"},"#"),o(" Creating an OpenShift cluster on IBM Cloud")],-1),ge=e("p",null,"Prerequisite: To run Eclipse Che on IBM Cloud using OpenShift, you need have a full IBM Cloud account because the IBM Cloud trial accounts do not have the option to create OpenShift clusters at the moment.",-1),_e=e("p",null,"After you have a full IBM Cloud account, follow the steps below to create an OpenShift cluster:",-1),we=o("Log in to your "),ye={href:"https://cloud.ibm.com/",target:"_blank",rel:"noopener noreferrer"},be=o("IBM Cloud account"),ve=o("."),ke=o("From the Services Catalog, select "),Oe={href:"https://cloud.ibm.com/kubernetes/catalog/openshiftcluster",target:"_blank",rel:"noopener noreferrer"},Ce=o("Red Hat OpenShift Cluster"),Se=o(". Then, click "),Ie=e("strong",null,"Create",-1),Ee=o(" in the summary page."),xe=s("<li><p>In the <strong>Create a new OpenShift cluster</strong> page, choose your cluster setup details and name:</p><ol><li>For the <strong>Location</strong>, select the <strong>Single zone</strong>, which should be enough for evaluation. Set the <strong>Geography</strong> and then select any of the <strong>Worker zones</strong>.</li><li>Enter a unique name for your cluster and select the resource group that you want to assign to your cluster.</li><li>For <strong>Default worker pool</strong>, choose an available flavor for your worker nodes. Red Hat OpenShift on IBM Cloud supports OpenShift version 3.11 only, which includes Kubernetes version 1.11. The operating system is Red Hat Enterprise Linux 7.</li><li>Set a number of worker nodes to create per zone, such as 3.</li></ol></li><li><p>To finish, click <strong>Create cluster</strong>.</p></li>",2),ze=e("p",null,[e("strong",null,"Notes"),o(":")],-1),Te=e("ul",null,[e("li",null,[e("p",null,[o("Your cluster creation might take some time to complete. After the cluster state shows "),e("strong",null,"Normal"),o(", the cluster network and load-balancing component take about 10 more minutes to deploy and update the cluster domain that you use for the OpenShift web console and other routes.")])]),e("li",null,[e("p",null,[o("Verify that your cluster setup is finished before you continue to the next step by checking that the Ingress subdomain on the cluster details page follows a pattern of "),e("code",null,"<cluster_name>.<region>.containers.appdomain.cloud"),o(".")])])],-1),Me=e("strong",null,"Tip",-1),Be=o(": If you want to learn more about customizing your cluster setup with the CLI, check out "),je={href:"https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-create-cluster",target:"_blank",rel:"noopener noreferrer"},Le=o("Creating an OpenShift cluster"),Fe=o("."),We=e("h2",{id:"step-2-deploying-eclipse-che",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-2-deploying-eclipse-che","aria-hidden":"true"},"#"),o(" Step 2: Deploying Eclipse Che")],-1),Ae=e("p",null,"Once you have an OpenShift cluster, you can deploy Eclipse Che on it. This will be done with just a few command-line operations. To be able to execute these commands, there are two prerequisites that you need to install:",-1),Ze=o("Git: To use the features that involve Git, you must install Git and have it available in your system path so that Visual Studio Code can display it. On Macs, Git comes out of the box. On Linux, you can install Git with your distribution's package manager. On Windows, you can get Git from "),Pe={href:"https://git-scm.com",target:"_blank",rel:"noopener noreferrer"},qe=o("https://git-scm.com"),Ne=o("OpenShift CLI: OpenShift CLI is used to manage projects and their deployments. The easiest way to download the CLI is by accessing the About page on the web console if your cluster administrator has enabled the download links. To install OpenShift CLI, you can follow the "),De={href:"https://docs.openshift.com/container-platform/3.7/cli_reference/get_started_cli.html",target:"_blank",rel:"noopener noreferrer"},Ue=o("OpenShift CLI reference documentation"),Re=o(". The steps basically consist of downloading a .zip file with two binary files that you need to place in the right location of your command path."),Ge=e("p",null,"Once you have these two in place, your can perform these installation steps:",-1),Ve=o("Using a command line shell, find a location for your home directory and clone the "),Ye={href:"https://github.com/eclipse/che-operator",target:"_blank",rel:"noopener noreferrer"},Ke=o("che-operator"),He=o(" repository by running this command:"),Je=s(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/eclipse/che-operator.git
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,1),Qe=o("This repository contains all the scripts and configuration files needed to deploy Eclipse Che and all of its components to your cluster. Refer to "),$e={href:"https://github.com/eclipse/che-operator/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"},Xe=o("Che/Codeready Workspaces Operator Documentation"),eo=o(" to learn more about che-operator. Then, navigate to the new directory with"),oo=s(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> che-operator
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>as you will execute commands form there further below.</p>`,2),to=o("Using the OpenShift command line tool you need to now first log in to your cluster. The OpenShift web console provides a user-friendly way to do so using access token generating the entire login command for you to copy-paste. To find that, go back to your OpenShift web console browser screen and open user menu in the upper right corner. There you find the option "),no=e("code",null,"Copy Login Command",-1),so=o(", which will copy the command to your clipboard. Go back to your command line shell and paste the login command and run it. For more information, see "),io={href:"https://docs.openshift.com/container-platform/3.11/getting_started/developers_cli.html#developers-cli-creating-a-project",target:"_blank",rel:"noopener noreferrer"},ro=o("Creating a Project"),ao=o("."),lo=o("Now you are ready to create a namespace in your cluster and deploy Che in that namespace. A namespace is a virtual cluster in which multiple resources exist. Each resource can be referenced by its unique name. Therefore, namespaces avoid basic naming collisions. A Project in OpenShift is equivalent to a Kubernetes namespace. However, in addition to the namespace name, OpenShift projects can also manage a user-friendly display name and description. For details, see "),co={href:"https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/projects_and_users.html",target:"_blank",rel:"noopener noreferrer"},ho=o("Users, Namespaces, and Projects"),po=o("."),uo=s(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc create namespace <span class="token operator">&lt;</span>your_namespace_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Then, navigate with your cluster login to the newly created namespace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>oc project <span class="token operator">&lt;</span>your_namespace_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Finally, run the command to deploy Eclipse Che into that namespace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./deploy.sh <span class="token variable">$namespace</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The script will return to the command line prompt immediately, but the actually jobs to deploy can take a couple of minutes. You can follow along on the deployment progress in the Monitoring section of the OpenShift Application Console as described below.</p>`,6),mo=s('<p>Upon successful deployment, navigate back to OpenShift web console in your browser. Based on the version of OpenShift available to you and deployed to your cluster, there are new two different alternative ways to perform the next steps.</p><ul><li><p>If you are using OpenShift V3</p><ol><li>From the list of <code>My Projects</code> on the right, click <code>View All</code>, then find your project name from the list and select it.</li><li>Using the <code>Monitoring</code> section from the left side menu in your project helps you to see the events and logs of your deployment.</li><li>If all the containers are in the state of <code>running</code>, it means your application is up and running. If you get any issues, feel free to ask <a href="#questions-or-feedback-we-would-love-to-hear-from-you">questions</a>.</li><li>If all the containers are running, select the <code>Overview</code> tab from the left menu items which will show all your deployed application in the project. Find <code>che</code> application and then click the URL appears at the top.</li><li>The URL will take you to a login page of Eclipse Che because che-operator uses Operator SDK and Go Kube client to deploy, update, and manage K8S/OpenShift resources that constitute a multi-user Eclipse Che. The multi-user feature in Eclipse Che allows multiple users to create workspaces in single Che instance. All workspaces created by each user are independent of each other. Each user has his/her own sandbox where workspaces are created and stored.</li></ol></li><li><p>If you are using OpenShift v4:</p><ol><li>From the left side menu, open the <code>Home</code> section, click <code>Projects</code>, find your project name from the list and select it.</li><li>Using the <code>Networking</code> section from the left side menu in your project helps you to see the events and logs of your deployment pods.</li><li>If all the pods are in the state of <code>running</code>, it means your application is up and running. If you get any issues, feel free to ask <a href="#questions-or-feedback-we-would-love-to-hear-from-you">questions</a>.</li><li>If all the pods are running, select the <code>Routes</code> tab from the left menu items under <code>Networking</code> tab which will show all your deployed application in the project, their routes as well as status. Successful deployment shows <code>STATUS</code> as <code>Accepted</code>. Find <code>che</code> application and then click the URL appears under the <code>LOCATION</code> section.</li><li>The URL will take you to a login page of Eclipse Che because che-operator uses Operator SDK and Go Kube client to deploy, update, and manage K8S/OpenShift resources that constitute a multi-user Eclipse Che. The multi-user feature in Eclipse Che allows multiple users to create workspaces in single Che instance. All workspaces created by each user are independent of each other. Each user has his/her own sandbox where workspaces are created and stored.</li></ol></li></ul>',2),fo=o("Eclipse Che has provided an authentication mechanism called "),go={href:"https://www.keycloak.org/documentation.html",target:"_blank",rel:"noopener noreferrer"},_o=o("Keycloak"),wo=o(". It uses Keycloak to create, import, manage, delete, and authenticate users."),yo=o("The default Keycloak credentials are "),bo=e("code",null,"admin:admin",-1),vo=o(". You can use these credentials to log in to Eclipse Che workspaces for the first time. It has system privileges. Also you can register first. On the login page, click register and complete the form. Log in and follow the steps below to create a workspace. A "),ko={href:"https://www.eclipse.org/che/docs/che-7/introduction-to-eclipse-che/",target:"_blank",rel:"noopener noreferrer"},Oo=o("workspace"),Co=o(" is just an environment in Che where projects, dependencies, Web IDE, and other necessary tools exist."),So=e("h2",{id:"step-3-creating-a-development-workspace-for-z",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-3-creating-a-development-workspace-for-z","aria-hidden":"true"},"#"),o(" Step 3: Creating a development workspace for Z")],-1),Io=e("h3",{id:"introducing-che-workspaces",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#introducing-che-workspaces","aria-hidden":"true"},"#"),o(" Introducing Che workspaces")],-1),Eo=o("Che workspaces are kubernetes pods which were conceived for distributed development to allow Kubernetes developers to replicate the application runtime environments and micro services used in production. Container-based developer workspaces provide all the tools and dependencies needed to code, build, test, run, and debug distributed applications. All the tools are embedded and always included with the workspace. Workspaces are isolated from one another and are responsible for managing the lifecycle of their components. Developer workspaces provide four different components: Project source code, Browser-based IDE, Tool dependencies and application runtime. To learn more about workspaces refer to "),xo={href:"https://www.eclipse.org/che/docs/che-7/workspaces-overview/",target:"_blank",rel:"noopener noreferrer"},zo=o("Workspaces overview"),To=o("."),Mo=o("For z/OS development workspaces can be used to host the source code, the IDE with enterprise language support such as the Z Open Editor as well as other client-side tools needed for development such as Debug clients. In this example, we are going to start a workspace that has IBM Z Open Editor, Zowe Explorer, plus a sample Git repository with an application. All of it was preconfigured by us in a simple yaml file called devfile. Go "),Bo={href:"https://github.com/IBM/zopeneditor-about/blob/master/che/ibm-z-devfile.yaml",target:"_blank",rel:"noopener noreferrer"},jo=o("here with a Web browser"),Lo=o(" to see the devfile we are using in the step below. Every development lead can easily create such files to define workspaces for his team that can then be easily instantiated by developers via a few mouse clicks."),Fo=e("h3",{id:"getting-organized-with-plug-ins-and-devfile-registries",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getting-organized-with-plug-ins-and-devfile-registries","aria-hidden":"true"},"#"),o(" Getting organized with plug-ins and devfile registries")],-1),Wo=e("p",null,"As devfiles declare the configurations for workspaces, plug-ins are a declaration in Eclipse Che for how the tools such as IBM Z Open Editor need to be installed and configured for a workspace. You can then combine workspaces with many different plug-ins to make up your development environment.",-1),Ao=e("p",null,"Eclipse Che uses plug-in and devfile registry servers for default out of the box workspace declarations. Development organization can manage their own registries replacing or augmenting these defaults.",-1),Zo=o("The Che devfile registry is a service that provides a list of Che stacks to create ready-to-use workspaces. This list of stacks is used in the Dashboard \u2192 Create Workspace window. The devfile registry runs in a container and can be deployed wherever the user dashboard can connect. The default registry: "),Po={href:"https://che-devfile-registry.openshift.io",target:"_blank",rel:"noopener noreferrer"},qo=o("https://che-devfile-registry.openshift.io"),No=o("."),Do=o("The Che plug-in registry is a service that provides the list of plug-ins and editors for the Che workspaces. A devfile only references a plug-in that is published in a Che plug-in registry. It runs in a container and can be deployed wherever wsmaster connects. The default registry: "),Uo={href:"https://che-plugin-registry.openshift.io",target:"_blank",rel:"noopener noreferrer"},Ro=o("https://che-plugin-registry.openshift.io"),Go=o("."),Vo=e("h3",{id:"creating-an-ibm-z-open-editor-workspace",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-an-ibm-z-open-editor-workspace","aria-hidden":"true"},"#"),o(" Creating an IBM Z Open Editor workspace")],-1),Yo=o("In addition to using a Devfile registry, Eclipse Che even allows you to point to a single devfile on the intranet or internet to create a workspace, which is what we are going to do now with our "),Ko={href:"https://github.com/IBM/zopeneditor-about/blob/master/che/ibm-z-devfile.yaml",target:"_blank",rel:"noopener noreferrer"},Ho=o("devfile"),Jo=o(" we explored earlier."),Qo=s("<li><p>At the end of Step 2, you logged in to your deployed Eclipse Che.</p></li><li><p>If you log on for the first time and have no workspace yet, you will be redirected automatically to the <code>New Workspace</code> page. If you have already created workspaces before, select <code>Create Workspace</code> from <code>Dashboard</code> menu item from the left.</p></li><li><p>Select the <code>IMPORT DEVFILE</code> option and select <code>URL</code> as a source.</p></li>",3),$o=o("Add the IBM Z Open Editor stack URL: "),Xo={href:"https://raw.githubusercontent.com/IBM/zopeneditor-about/master/che/ibm-z-devfile.yaml",target:"_blank",rel:"noopener noreferrer"},et=o("https://raw.githubusercontent.com/IBM/zopeneditor-about/master/che/ibm-z-devfile.yaml"),ot=o(" and click "),tt=e("code",null,"CREATE AND OPEN",-1),nt=o("."),st=e("p",null,[e("img",{src:d,alt:"Importing the IBM Z Stack"}),o(" Fig. 2: Instead of a devfile registry we can use this screen to point to single devfile.")],-1),it=e("p",null,[e("strong",null,"Note"),o(": While starting a workspace, you may run into some known issues such as timeouts if the creation takes longer. Refer to the "),e("a",{href:"#troubleshooting"},"Troubleshooting"),o(" section for dealing with some of the known issues. The Che development team is actively working on improving these issues.")],-1),rt=o("Importing the devfile as shown above will automatically start a workspace, which includes our Z Open Editor, Zowe Explorer, as well as a sample Git repository with sample application written in COBOL and PL/I. It even includes important prerequisites. Because the COBOL and PL/I language server have been written in Java, the workspace stack also includes a runtime container with Java 11. You can review the "),at={href:"https://github.com/IBM/zopeneditor-about/blob/master/che/plugins/z-open-editor.yaml",target:"_blank",rel:"noopener noreferrer"},lt=o("plug-in definition that was used by our devfile here"),ct=o("."),ht=s('<p>To turn plug-ins on or off for adding or removing editors and features, you can go to the Che workspace configuration, select the plug-ins menu item, and then add or remove plug-ins. You can also turn plug-ins on or off from the Che IDE using the <code>Che Plugins</code> menu item from <code>View Menu</code>.</p><p>You can share your workspace with other teammates who have registered themselves in the same Eclipse Che deployment.</p><ol><li><p>Go to the <code>Workspaces</code> tab and open the <code>Workspace Configuration</code> item by clicking the configuration icon on the right side under the <code>ACTIONS</code> tab.</p></li><li><p>Select the <code>Share</code> tab.</p></li><li><p>Click <code>Add Developer</code> and add the developer&#39;s registered email address.</p></li></ol><h2 id="exploring-your-workspace" tabindex="-1"><a class="header-anchor" href="#exploring-your-workspace" aria-hidden="true">#</a> Exploring your workspace</h2><p>Now that you are up and running, you can start exploring Eclipse Che with IBM Z Open Editor using the sample files that we included. After clicking the documents icon on the left, Che will expand the <code>File Explorer</code> showing you two directories: <code>.theia</code> and <code>ibm-zopeneditor-sample</code>. You now want to open that later directory directly as a top-level folder to use its predefined settings. To do that, take these steps:</p><ol><li><p>Open the menu <code>File &gt; Open...</code></p></li><li><p>In the Open dialog, double-click <code>ibm-zopeneditor-sample</code> to drill down and click the <code>Open</code> button.</p></li><li><p>Another browser tab will open loading now the contents of <code>ibm-zopeneditor-sample</code> into the top level.</p></li><li><p>Close the other browser tab left open as you do not want to accidentally use it anymore.</p></li></ol><p>The <code>File Explorer</code> now shows you several folders such as <code>COBOL</code>, <code>COPYBOOK</code>, <code>INCLUDES</code>, <code>JCL</code>, <code>PLI</code> with code samples in these different languages.</p><ol><li><p>Expand the <code>COBOL</code> folder and select the file <code>SAM1.cbl</code> to open it.</p></li><li><p>The COBOL program is open in the editor and you immediately see the syntax highlighting.</p></li><li><p>On the right, there are two icons. The first looks like a bullet point list. Click it to open the COBOL program&#39;s outline view.</p></li><li><p>Once you click inside the COBOL editor the outline view gets populated and you can use it to quickly navigate the program.</p></li><li><p>Try some of the other language features such as right-clicking any variable and selecting <code>Peek References</code> from the context menu showing you all the places in which the variable is used inside the program.</p></li></ol>',8),dt=o("You can explore many other editing features that our IBM Z Open Editor's Language Servers for COBOL and PL/I provide. Find them documented in the "),pt={href:"https://ibm.github.io/zopeneditor-about/Docs/editor_codechanges.html",target:"_blank",rel:"noopener noreferrer"},ut=o("IBM Z Open Editor online documentation"),mt=o(". Try them out here and you will see that you have a full enterprise language editor experience in the cloud now."),ft=e("h2",{id:"optional-exploring-z-os-using-zowe-explorer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#optional-exploring-z-os-using-zowe-explorer","aria-hidden":"true"},"#"),o(" Optional: Exploring z/OS using Zowe Explorer")],-1),gt=e("p",null,[o("Another thing you can try is to access z/OS system resources such as COBOL programs in MVS or USS directly from your Eclipse Che workspace by using Zowe Explorer that we included in our devfile as well. You can find Zowe Explorer by clicking the stylized "),e("code",null,"Z"),o(" for Zowe icon in the icon bar on the left. It should be the last icon in that list. Once opened, the view will show you three different tree browsers for MVS, USS, and JES.")],-1),_t=o("To be able to try these out, you need access to a z/OS system with zOSMF configured. This could be any system that you can reach from your OpenShift cluster, if you deployed on your own in-house OpenShift deployment. If you are using IBM Cloud, you could try this using a system provided by the "),wt={href:"https://www.ibm.com/it-infrastructure/z/education/master-the-mainframe",target:"_blank",rel:"noopener noreferrer"},yt=o("Master the Mainframe"),bt=o(" learning site by following these steps:"),vt=o("Sign up with Master the Mainframe "),kt={href:"https://www-01.ibm.com/events/wwe/ast/mtm/audit.nsf/enrollall?",target:"_blank",rel:"noopener noreferrer"},Ot=o("here"),Ct=o("."),St=e("li",null,[e("p",null,"Once you received your Welcome email, follow the instructions to use a 3270 terminal to change your password to gain access.")],-1),It=e("li",null,[e("p",null,"The Welcome email will also send you a link to join the Master the Mainframe Slack community, which needs to join to get access to a Bot that will enable zOSMF for your account, which is switch off by default, but required for Zowe Explorer.")],-1),Et=o("In the Slack community, follow the "),xt={href:"https://mtm2019.mybluemix.net/references/references_password_reset.html",target:"_blank",rel:"noopener noreferrer"},zt=o("instruction here"),Tt=o(" to get access to the "),Mt=e("code",null,"Zih",-1),Bt=o(" Bot."),jt=e("li",null,[e("p",null,[o("Do "),e("strong",null,"not"),o(` do the steps to "Reset your password", but instead just type your username into the Bot's chat.`)])],-1),Lt=e("li",null,[e("p",null,"The Bot will ask you if you want to activate zOSMF for Zowe for your account. Follow the steps to complete that request.")],-1),Ft=e("p",null,"Now you have an account that you can experiment with from your Eclipse Che workspace. To create a connection, connect to your z/OS account with these steps:",-1),Wt=e("li",null,[e("p",null,[o("Open the Zowe view in Eclipse Che and click the "),e("code",null,"+"),o(" icon in the Data Sets view at the upper left.")])],-1),At=e("p",null,[o("A drop-down picker will appear in the middle-top of the screen. Select "),e("code",null,"Create a New Connection to z/OS"),o(". A series of follow-up prompts will ask you for all your connection details.")],-1),Zt=e("li",null,"Specify any name for your connection.",-1),Pt=o("For the z/OSMF url, use the IP that you used for the 3270 connection above and the port 10443 for the Master the Mainframe machines. For example: "),qt={href:"https://192.86.32.91:10443",target:"_blank",rel:"noopener noreferrer"},Nt=o("https://192.86.32.91:10443"),Dt=o(". The default port for zOSMF is normally 443."),Ut=e("li",null,[o("For the final question about rejecting connections with self-signed certificates, select "),e("code",null,"false"),o(" for the Master the Mainframe systems.")],-1),Rt=e("li",null,[e("p",null,[o("Now an entry appears in the Data Sets tree. You can use the "),e("code",null,"Search"),o(" icon next to that entry to enter your username to find the "),e("code",null,"ISPF.ISPPROF"),o(" data set.")])],-1),Gt=e("li",null,[e("p",null,"You can use the other action icon to create a new data set.")],-1),Vt=e("li",null,[e("p",null,[o("You can add the same connection to the USS view by simply clicking the "),e("code",null,"+"),o(" icon and then just selecting that connection from the drop-down.")])],-1),Yt=s(`<p>Before you can now open and save files, you need to do one more step.</p><p>As your Eclipse Che workspaces consist of of many different containers that have been linked together, you need to tell Zowe Explorer where it can store temporary files loaded from z/OS. It will use that folder to download files, open them in the editor from, and then send them back to z/OS during a Save. To set a folder, take these steps:</p><ol><li><p>Open the menu <code>File &gt; Settings &gt; Open Preferences</code>. The Preferences editor window will open that show User and Workspace specific settings.</p><p>Note that in this case the word Workspace means a different thing than Eclipse Workspace. This is an inconsistency between Che and the editor used by Che Eclipse Theia. In this case, workspace refers to the directory in which your project files are stored.</p></li><li><p>Make sure you selected the User tab and add the following JSON object to the one displayed there.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;Zowe-Temp-Folder-Location&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;folderPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/projects&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The editor is saved automatically. Make sure the JSON does not have any syntax errors and then just close it. Now you can create files in USS and save them.</p></li></ol><p><img src="`+p+'" alt="Zowe Explorer opening MVS data set member with COBOL program."> Fig. 3: Using Zowe Explorer to access z/OS resources such as COBOL programs in MVS data sets from Eclipse Che.</p><h2 id="limitations-and-outlook" tabindex="-1"><a class="header-anchor" href="#limitations-and-outlook" aria-hidden="true">#</a> Limitations and Outlook</h2><p>The steps described above allowed you to very quickly get up and running with Eclipse Che creating a workspace that contained the IBM Z Open Editor as well as the Zowe Explorer. However, the workspace definition we used was not integrated into your Eclipse Che Stacks list now, nor can it be easily configured and changed. To set this up in your organization so that development teams can create their own custom workspace definitions and instantiate many more workspaces easily you need to setup and manage two registries: a plugin and a devfiles registry. We will go into the details for doing that in our next Blog post.</p>',6),Kt=o("If you already want to read up on the workspace architecture of Che you can review these documentation pages for the "),Ht={href:"https://www.eclipse.org/che/docs/che-7/che-workspaces-architecture/",target:"_blank",rel:"noopener noreferrer"},Jt=o("Che Workspace Architecture"),Qt=o(" and the "),$t={href:"https://www.eclipse.org/che/docs/che-7/che-workspace-controller/",target:"_blank",rel:"noopener noreferrer"},Xt=o("Workspace Controller"),en=o("."),on=s('<h2 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h2><p>Working with a cluster sometimes requires a bit more patience waiting for deployment jobs to complete. Sometime timeouts or other errors could happen. Here are some of the more common issue you might run into and suggestions for how to solve them:</p><ol><li><p><code>Failed to start workspace</code></p><p>Sometimes it does happen when the workspace pod is not assigned to the project. Press <code>F5</code> and click <code>refresh</code> link appears on the screen.</p></li><li><p><code>Error: Failed to run the workspace: &quot;Workspace is going to be STOPPED. Reason: Workspace is not started in time. Trying interrupt runtime start&quot;</code></p><p>While creating a workspace, it requires storage to be configured on the cluster. Che claims a persistent volume to the cluster. OpenShift cluster on IBM Cloud has capability to provision storages dynamically when a project claims for the persistent volume. Depending on the IBM Cloud traffic, it spends good amount of time to approve your claim and assign a storage to your workspace pod. You may refresh or press <code>F5</code> to start over again.</p></li><li><p><code>Unable to create persistent volume on workspace pod</code></p><p>While creating a workspace, it requires storage to be configured on the cluster. Che claims a persistent volume to the cluster. Your cluster may not have configured for dynamic storage allocation. You need to create workspace in an <code>Ephemeral Mode</code>. Ephemeral mode is a function that allows users to browse the Web on a shared device or a personal laptop by using a profile that won&#39;t save any data or history after the browser is closed. Stop our workspace first, then you can go to <code>Workspaces</code> tab and open <code>Workspace Configuration</code> by click a middle configuration icon on the right side under <code>ACTIONS</code> tab, open <code>Overview</code> tab and turn on <code>Ephemeral Mode</code>. SAVE and RUN your workspace again.</p></li></ol><h2 id="questions-or-feedback" tabindex="-1"><a class="header-anchor" href="#questions-or-feedback" aria-hidden="true">#</a> Questions or Feedback</h2>',4),tn=o("We would love to hear what you think of this solution. For any questions, issues, or enhancement ideas, please do not hesitate to "),nn={href:"https://github.com/IBM/zopeneditor-about/issues",target:"_blank",rel:"noopener noreferrer"},sn=o("open an issue at our GitHub"),rn=o("."),an=e("p",null,"We are always looking for ways to improve.",-1);function ln(cn,hn){const t=i("ExternalLinkIcon");return r(),a(l,null,[m,f,e("p",null,[e("a",g,[_,n(t)]),w,e("a",y,[b,n(t)]),v]),k,O,e("p",null,[C,e("a",S,[I,n(t)]),E,e("a",x,[z,n(t)]),T]),e("p",null,[M,e("a",B,[j,n(t)]),L]),e("p",null,[F,e("a",W,[A,n(t)]),Z,e("a",P,[q,n(t)]),N]),D,U,e("p",null,[R,G,V,e("a",Y,[K,n(t)]),H]),J,e("ul",null,[e("li",null,[Q,e("a",$,[X,n(t)]),ee]),e("li",null,[oe,e("a",te,[ne,n(t)]),se]),ie,e("li",null,[re,e("a",ae,[le,n(t)]),ce]),he,e("li",null,[de,e("a",pe,[ue,n(t)]),me])]),fe,ge,_e,e("ol",null,[e("li",null,[e("p",null,[we,e("a",ye,[be,n(t)]),ve])]),e("li",null,[e("p",null,[ke,e("a",Oe,[Ce,n(t)]),Se,Ie,Ee])]),xe]),ze,Te,e("p",null,[Me,Be,e("a",je,[Le,n(t)]),Fe]),We,Ae,e("ul",null,[e("li",null,[Ze,e("a",Pe,[qe,n(t)])]),e("li",null,[Ne,e("a",De,[Ue,n(t)]),Re])]),Ge,e("ol",null,[e("li",null,[e("p",null,[Ve,e("a",Ye,[Ke,n(t)]),He]),Je,e("p",null,[Qe,e("a",$e,[Xe,n(t)]),eo]),oo]),e("li",null,[e("p",null,[to,no,so,e("a",io,[ro,n(t)]),ao])]),e("li",null,[e("p",null,[lo,e("a",co,[ho,n(t)]),po]),uo]),e("li",null,[mo,e("p",null,[fo,e("a",go,[_o,n(t)]),wo]),e("p",null,[yo,bo,vo,e("a",ko,[Oo,n(t)]),Co])])]),So,Io,e("p",null,[Eo,e("a",xo,[zo,n(t)]),To]),e("p",null,[Mo,e("a",Bo,[jo,n(t)]),Lo]),Fo,Wo,Ao,e("p",null,[Zo,e("a",Po,[qo,n(t)]),No]),e("p",null,[Do,e("a",Uo,[Ro,n(t)]),Go]),Vo,e("p",null,[Yo,e("a",Ko,[Ho,n(t)]),Jo]),e("ol",null,[Qo,e("li",null,[e("p",null,[$o,e("a",Xo,[et,n(t)]),ot,tt,nt]),st])]),it,e("p",null,[rt,e("a",at,[lt,n(t)]),ct]),ht,e("p",null,[dt,e("a",pt,[ut,n(t)]),mt]),ft,gt,e("p",null,[_t,e("a",wt,[yt,n(t)]),bt]),e("ol",null,[e("li",null,[e("p",null,[vt,e("a",kt,[Ot,n(t)]),Ct])]),St,It,e("li",null,[e("p",null,[Et,e("a",xt,[zt,n(t)]),Tt,Mt,Bt])]),jt,Lt]),Ft,e("ol",null,[Wt,e("li",null,[At,e("ul",null,[Zt,e("li",null,[Pt,e("a",qt,[Nt,n(t)]),Dt]),Ut])]),Rt,Gt,Vt]),Yt,e("p",null,[Kt,e("a",Ht,[Jt,n(t)]),Qt,e("a",$t,[Xt,n(t)]),en]),on,e("p",null,[tn,e("a",nn,[sn,n(t)]),rn]),an],64)}var un=c(u,[["render",ln]]);export{un as default};
