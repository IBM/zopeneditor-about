(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{498:function(e,t,o){"use strict";o.r(t);var a=o(45),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"exploring-the-sample-files"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#exploring-the-sample-files"}},[e._v("#")]),e._v(" Exploring the sample files")]),e._v(" "),o("p",[e._v("Within this documentation we refer to a set of sample files that you can use to explore the editor features. These samples are provided on Github.com.")]),e._v(" "),o("h2",{attrs:{id:"get-the-sample-files"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#get-the-sample-files"}},[e._v("#")]),e._v(" Get the sample files")]),e._v(" "),o("p",[e._v("Assuming that you have Git installed as described in the "),o("RouterLink",{attrs:{to:"/Docs/getting_started.html#prerequisites"}},[e._v("Prerequisites")]),e._v(", create a work directory somewhere on your machine and clone the sample repository:")],1),e._v(" "),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/IBM/zopeneditor-sample.git\n")])])]),o("p",[e._v("Then open the directory "),o("code",[e._v("zopeneditor-sample")]),e._v(" using the "),o("strong",[e._v("File > Open...")]),e._v(" menu. The sample files in this directory will be referred to throughout the rest of the documentation.")]),e._v(" "),o("h2",{attrs:{id:"understand-the-git-repository-branches"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#understand-the-git-repository-branches"}},[e._v("#")]),e._v(" Understand the Git repository branches")]),e._v(" "),o("p",[e._v("The sample Git repository contains four branches.")]),e._v(" "),o("ul",[o("li",[e._v("master: provides code and configuration file examples that can be used with the basic IBM Z Open Editor installation obtains from the VS Code Marketplace.")]),e._v(" "),o("li",[e._v("tutorial_complete: extends the examples from the master branch with code changes that you can use to simulate a before and after view of making changes to source code.")]),e._v(" "),o("li",[e._v("wazi-master: provides additional configuration file examples for commercial extensions to IBM Z Open Editor such as IBM Open Debug or User Build with IBM Dependency-Based Build. The "),o("a",{attrs:{href:"https://www.ibm.com/docs/en/wdfrhcw",target:"_blank",rel:"noopener noreferrer"}},[e._v("Knowledge Center on ibm.com"),o("OutboundLink")],1),e._v(" has more details for using these tools and examples.")]),e._v(" "),o("li",[e._v("wazi-tutorial-complete: provides an after-changes-view of the examples in wazi-master with the same advanced configurations files.")])]),e._v(" "),o("h2",{attrs:{id:"examine-the-sample-files"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#examine-the-sample-files"}},[e._v("#")]),e._v(" Examine the sample files")]),e._v(" "),o("p",[e._v("The sample application consists of the following files:")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("COBOL programs: "),o("code",[e._v("SAM1")]),e._v(", "),o("code",[e._v("SAM2")]),e._v(", and "),o("code",[e._v("SAM1LIB")])]),e._v(" "),o("p",[o("code",[e._v("SAM1")]),e._v(" reads in both the "),o("code",[e._v("CUSTFILE")]),e._v(" and "),o("code",[e._v("TRANFILE")]),e._v(" data files, and then performs different actions on the "),o("code",[e._v("CUSTFILE")]),e._v(" based on transactions from the "),o("code",[e._v("TRANFILE")]),e._v(". Valid transactions are "),o("code",[e._v("ADD")]),e._v(", "),o("code",[e._v("UPDATE")]),e._v(", and "),o("code",[e._v("DELETE")]),e._v(". When an "),o("code",[e._v("UPDATE")]),e._v(" transaction is processed, "),o("code",[e._v("SAM1")]),e._v(" calls "),o("code",[e._v("SAM2")]),e._v(" to perform the requested update.")]),e._v(" "),o("p",[o("code",[e._v("SAM2")]),e._v(" includes some base code in place for "),o("code",[e._v("CRUNCH")]),e._v(" transactions, which can be enhanced using Instructions provided later in this document . At the end of processing the "),o("code",[e._v("TRANFILE")]),e._v(", "),o("code",[e._v("SAM1")]),e._v(" generates a report on the transactions processed and produces an updated "),o("code",[e._v("CUSTFILE")]),e._v(".")]),e._v(" "),o("p",[o("code",[e._v("SAM1LIB")]),e._v(" is included to demonstrate the editor's ability to resolve copybooks that are part of a library. It is a copy of "),o("code",[e._v("SAM1")]),e._v(" with the exception of the library-based copybooks.")])]),e._v(" "),o("li",[o("p",[e._v("Copybooks: "),o("code",[e._v("CUSTCOPY")]),e._v(", "),o("code",[e._v("REGISTRS")]),e._v(", and "),o("code",[e._v("TRANREC")])])]),e._v(" "),o("li",[o("p",[e._v("Libraries Copybooks: "),o("code",[e._v("DATETIME")]),e._v(" (local) and "),o("code",[e._v("REPTTOTL")]),e._v(" (MVS).\nThese copybooks demonstrate using the libraries option in a "),o("code",[e._v("COPY <copybook> IN <library>")]),e._v(" statement for local and MVS copybooks")])]),e._v(" "),o("li",[o("p",[e._v("PL/I programs: "),o("code",[e._v("PSAM1")]),e._v(", "),o("code",[e._v("PSAM2")]),e._v(", and "),o("code",[e._v("PSAM1LIB")])]),e._v(" "),o("p",[o("code",[e._v("PSAM1")]),e._v(" reads in both the "),o("code",[e._v("PLI.CUSTFILE")]),e._v(" and "),o("code",[e._v("PLI.TRANFILE")]),e._v(" data files, and then produces a report with customer information and a Totals summary section. Valid transactions are "),o("code",[e._v("PRINT")]),e._v(" and "),o("code",[e._v("TOTALS")]),e._v(". A "),o("code",[e._v("PRINT")]),e._v(" transaction prints the Customer records to the Customer section of the report. When "),o("code",[e._v("PSAM1")]),e._v(" reads in a "),o("code",[e._v("TOTALS")]),e._v(" transaction, it generates the Totals Report section. The instructions, provided later in this document, guide you through making the necessary code changes to allow "),o("code",[e._v("PSAM1")]),e._v(" to process a new type of Customer record called a Product record and generate a new line for the Service Calls in the Totals Report section.")]),e._v(" "),o("p",[o("code",[e._v("PSAM1LIB")]),e._v(" is included to demonstrate the editor's ability to resolve includes that are part of a library. It is a copy of "),o("code",[e._v("PSAM1")]),e._v(" with the exception of the library-based includes.")])]),e._v(" "),o("li",[o("p",[e._v("Include files: "),o("code",[e._v("BALSTATS")]),e._v(" and "),o("code",[e._v("CUSTPLI")])])]),e._v(" "),o("li",[o("p",[e._v("Libraries Includes: "),o("code",[e._v("DATETIME")]),e._v(" (local) and "),o("code",[e._v("REPTTOTL")]),e._v(" (MVS) - these includes demonstrate using the libraries option in an "),o("code",[e._v("%INCLUDE <library> (<include>);")]),e._v(" statement for local and MVS includes")])]),e._v(" "),o("li",[o("p",[e._v("HLASM programs: "),o("code",[e._v("ASAM1")]),e._v(" and "),o("code",[e._v("ASAM2")])]),e._v(" "),o("p",[o("code",[e._v("ASAM1")]),e._v(" reads the "),o("code",[e._v("ASM.FILEIN")]),e._v(" data file and will write out the record number, column number heading records, and the input string to "),o("code",[e._v("ASM.FILEOUT")]),e._v(". Instructions provided later in this document will guide you through making the necessary code changes to have "),o("code",[e._v("ASAM1")]),e._v(" call "),o("code",[e._v("ASAM2")]),e._v(" which will take the input string, convert it to hexadecimal format and pass it back to "),o("code",[e._v("ASAM1")]),e._v(", which will then write the hex value for the string to the "),o("code",[e._v("ASM.FILEOUT")]),e._v(" data file.")])]),e._v(" "),o("li",[o("p",[e._v("REXX program: "),o("code",[e._v("RSAM1")])]),e._v(" "),o("p",[o("code",[e._v("RSAM1")]),e._v(" reads the "),o("code",[e._v("REXX.FILEIN1")]),e._v(" and "),o("code",[e._v("REXX.FILEIN2")]),e._v(" data files and will write out the records to "),o("code",[e._v("REXX.FILEOUT")]),e._v(". Instructions provided later in this document will guide you through making the necessary code changes to create a new subroutine in "),o("code",[e._v("RSAM1")]),e._v(" to have it read through "),o("code",[e._v("REXX.FILEOUT")]),e._v(" and display all of the records.")])]),e._v(" "),o("li",[o("p",[e._v("JCL members that set up and run the applications: "),o("code",[e._v("ALLOCATE")]),e._v(", "),o("code",[e._v("RUN")]),e._v(", "),o("code",[e._v("PLIALLOC")]),e._v(", "),o("code",[e._v("RUNPSAM1")]),e._v(", "),o("code",[e._v("ASMALLOC")]),e._v(", "),o("code",[e._v("RUNASAM1")]),e._v(", and "),o("code",[e._v("REXALLOC")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Data source files: "),o("code",[e._v("CUSTFILE")]),e._v(", "),o("code",[e._v("TRANFILE")]),e._v(", "),o("code",[e._v("PLI.TRANFILE")]),e._v(", "),o("code",[e._v("PLI.CUSTFILE")]),e._v(", "),o("code",[e._v("ASM.FILEIN")]),e._v(", "),o("code",[e._v("REXX.FILEIN1")]),e._v(", and "),o("code",[e._v("REXX.FILEIN2")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Script Files:")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("zowecli-create-profiles.sh")]),e._v(" - This shell script will create Zowe CLI RSE and SSH profiles and then set them as the default profiles.")]),e._v(" "),o("ul",[o("li",[e._v("Parameters necessary to run the script:\n"),o("ul",[o("li",[e._v("TSO USER ID and Password")]),e._v(" "),o("li",[e._v("Z host address")]),e._v(" "),o("li",[e._v("RSE API port number")]),e._v(" "),o("li",[e._v("SSH port number")])])])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("zowecli-cobol-upload-run-simple.sh")]),e._v(" - This shell script will run the sample COBOL application.")]),e._v(" "),o("ul",[o("li",[e._v("Submits the JCL to allocate the required MVS datasets")]),e._v(" "),o("li",[e._v("Uploads the application components from the local directory to the MVS datasets")]),e._v(" "),o("li",[e._v("Submits the JCL to run the application")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("zowecli-cobol-upload-run-tutorial.sh")]),e._v(" - This shell script will run the sample COBOL application and download the output files.")]),e._v(" "),o("ul",[o("li",[e._v("Submits the JCL to allocate the required MVS datasets")]),e._v(" "),o("li",[e._v("Uploads the application components from the local directory to the MVS datasets")]),e._v(" "),o("li",[e._v("Submits the JCL to run the application")]),e._v(" "),o("li",[e._v("Downloads the output data files once the JES job is complete")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("zowecli-cobol-clean.sh")]),e._v(" - This shell script will delete the MVS data sets allocated and created during the execution of the sample application.")])])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);