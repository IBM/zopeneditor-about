(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{463:function(e,t,s){"use strict";s.r(t);var a=s(45),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"experimental-configure-your-applications-with-zapp-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#experimental-configure-your-applications-with-zapp-files"}},[e._v("#")]),e._v(" Experimental: Configure your applications with ZAPP files")]),e._v(" "),s("p",[e._v("Using ZAPP (Z APPlication) files, which are independent of Visual Studio Code, is a new experimental approach for simplifying how developers and teams of developers can configure their application code for editing in IBM Z Open Editor. As you have seen in "),s("a",{attrs:{href:"setting_propertygroup"}},[e._v("Setting property groups")]),e._v(", configuration settings such as property groups had to be entered as either VS Code user or workspace settings, despite being focused on describing the structure of your enterprise application. In essence, these configuration settings are actually independent of the VS Code editor. This makes it possible for property groups to be reused outside of VS Code and used with other editors or IDEs, as well as even for command-line operations for building your programs and other similar use cases.")]),e._v(" "),s("p",[e._v("Therefore, we created the new notion of a ZAPP file that describes your application in an independent representation, such as a YAML or JSON file, that can be managed with your source code, and that can be read by various editors and command-line tools in the future. The vision is for ZAPP files to become as useful for z/OS Enterprise Applications as Maven POM (Project Object Models) are for Java or "),s("code",[e._v("package.json")]),e._v(" files are for Node.js.")]),e._v(" "),s("p",[e._v("Although this early version of ZAPP supports only a few Z Open Editor use cases, we are hoping that with feedback from the user community, we can evolve them over time by adding more specification items, supporting more tools, adding a command-line interface, and so on. Then, at some point we would like to provide extensibility APIs and open specifications that others can use to contribute to ZAPP as well.")]),e._v(" "),s("h2",{attrs:{id:"zapp-use-cases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zapp-use-cases"}},[e._v("#")]),e._v(" ZAPP use cases")]),e._v(" "),s("p",[e._v("This early version of ZAPP is intended to provide a first impression to some of the ideas and to gather feedback. ZAPP files can currently be used to specify the following configurations:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Property Groups for finding local or remote include files")]),e._v(" providing a complete alternative to settings described in the section "),s("a",{attrs:{href:"setting_propertygroup"}},[e._v("Setting property groups")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("Property Groups for defining language-specific compiler options")]),e._v(" that impact how the IBM language servers interpret source code.")]),e._v(" "),s("li",[s("strong",[e._v("Code pages mappings for RSE API")]),e._v(" defining mappings for file name patterns to how they should be uploaded to and downloaded from MVS, which is fully documented in the section "),s("a",{attrs:{href:"mvs_encoding"}},[e._v("MVS EBCDIC code pages and mappings files")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("User Build")]),e._v(" for building your programs currently edited in Z Open Editor remotely with the IBM Dependency Based Build offering. (You can find detailed documentation for this feature in our "),s("a",{attrs:{href:"https://www.ibm.com/support/knowledgecenter/SSCH39",target:"_blank",rel:"noopener noreferrer"}},[e._v("IBM Knowledge Center"),s("OutboundLink")],1),e._v(").")])]),e._v(" "),s("h2",{attrs:{id:"getting-started-with-zapp-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-zapp-files"}},[e._v("#")]),e._v(" Getting started with ZAPP files")]),e._v(" "),s("p",[e._v("Create a ZAPP file in your development workspace, that is, the top-level directory that typically contains your .git directory if you are using git, and/or the top-level directory that you would open in VS Code with "),s("strong",[e._v("File > Open...")]),e._v(". This directory typically also contains your .vscode directory in which your workspace settings can be stored, which was also the home previously for property groups and user build settings that now can be stored in ZAPP files instead.")]),e._v(" "),s("blockquote",[s("p",[e._v("Note: This current version of ZAPP supports only single-root VS Code and Eclipse Che/Red Hat CodeReady Workspaces workspaces.")])]),e._v(" "),s("p",[e._v("You can choose to edit your ZAPP file as a YAML file or as a JSON file and create a file with either of the following names in your top-level directory. The file must be named exactly like that to enable YAML or JSON editors to recognize the schema to be used.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("zapp.yaml")])]),e._v(" "),s("li",[s("code",[e._v("zapp.json")])])]),e._v(" "),s("p",[e._v("If you decide to use YAML, which is the recommended format, you are suggested to install the "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Hat YAML VS Code Extension"),s("OutboundLink")],1),e._v(". This VS Code extension provides code completion, documentation, and formatting features, which are useful for ZAPP. Z Open Editor can recognize the installation of the Red Hat YAML extension automatically and configure the ZAPP schema for this extension in your VS Code user settings. In addition, code snippets for ZAPP in YAML is supported, which makes you productive instantaneously.")]),e._v(" "),s("p",[e._v("If you use JSON, the default VS Code JSON editor also provides code completion and formatting, but currently no snippets.")]),e._v(" "),s("p",[e._v("To verify that Z Open Editor has configured itself to work with the Red Hat YAML extension or VS Code JSON, look for entries as shown below in your VS Code user settings. The entries should be added after Z Open Editor has started up.")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"yaml.schemas"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"file:///Users/user1/.vscode/extensions/ibm.zopeneditor-1.1.0/resources/zapp-schema-0.0.1.json"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"zapp.yaml"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"json.schemas"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"fileMatch"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/zapp.json"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"url"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"file:///Users/user1/.vscode/extensions/ibm.zopeneditor-1.1.0/resources/zapp-schema-0.0.1.json"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("You are now ready to create your first ZAPP file.")]),e._v(" "),s("h2",{attrs:{id:"precedence-of-configuration-settings-sets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#precedence-of-configuration-settings-sets"}},[e._v("#")]),e._v(" Precedence of configuration settings sets")]),e._v(" "),s("p",[s("strong",[e._v("Note")]),e._v(": Because this is an experimental new feature, the previous ways of specifying the contents of a ZAPP file in user and workspace settings are still valid and all the settings you have created with previous versions of Z Open Editor can still be used. However, you cannot mix and match settings in different places.")]),e._v(" "),s("p",[e._v("Z Open Editor searches for property groups and user build settings in the following order and uses only the first set it finds:")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("zapp.yaml")]),e._v(" in the workspace directory.")]),e._v(" "),s("li",[s("code",[e._v("zapp.json")]),e._v(" in the workspace directory.")]),e._v(" "),s("li",[s("code",[e._v(".vscode/settings.json")]),e._v(" in the workspace directory, which is the VS Code Workspace Setting you enter via the Preferences menu.")]),e._v(" "),s("li",[e._v("Your user settings that you enter via the Preferences menu, which are stored in a "),s("a",{attrs:{href:"https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations",target:"_blank",rel:"noopener noreferrer"}},[e._v("different user-specific location"),s("OutboundLink")],1),e._v(" depending on your operating system.")])]),e._v(" "),s("h2",{attrs:{id:"a-zapp-file-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-zapp-file-example"}},[e._v("#")]),e._v(" A ZAPP file example")]),e._v(" "),s("p",[e._v("You can get started with ZAPP by cloning our sample GitHub repository at")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/IBM/zopeneditor-sample"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("This repository contains the following settings files so you can try all the variants and decide which works best for you:")]),e._v(" "),s("ul",[s("li",[e._v("A "),s("code",[e._v("zapp.yaml")]),e._v(" file")]),e._v(" "),s("li",[e._v("A "),s("code",[e._v("zapp.json")]),e._v(" file")]),e._v(" "),s("li",[e._v("The legacy workspace settings")])]),e._v(" "),s("p",[s("strong",[e._v("Note")]),e._v(": According to the "),s("a",{attrs:{href:"#precedence-of-configuration-settings-sets"}},[e._v("precedence rules")]),e._v(" stated in the previous section, if you want to try the "),s("code",[e._v("zapp.json")]),e._v(" file, you must first delete or rename the "),s("code",[e._v("zapp.yaml")]),e._v(" file.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("zapp.yaml")]),e._v(" file contains the following content:")]),e._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" sam\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Wazi's code samples with COBOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" PL/I"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" and HLASM applications\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 1.1.0\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("author")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" IBM CORPORATION\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("property-groups")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cobol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("language")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cobol\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("syslib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/COPYBOOK"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("libraries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MYFILE\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("locations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/COPYLIB"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" pl1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("language")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" pl1\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("compilerOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" not("),s("span",{pre:!0,attrs:{class:"token tag"}},[e._v("!)")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("syslib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/INCLUDES"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hlasm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("language")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hlasm\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" local\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("syslib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/ASMCOPY"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zowe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("mvs\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" mvs\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("system")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zos1000.example.com\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("syslib")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" USER1.SAMPLE.COBCOPY\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("libraries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MYLIB\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("locations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" USER1.SAMPLE.COPY\n")])])]),s("p",[e._v("This simple example defines four property groups. The first three are of the type "),s("code",[e._v("local")]),e._v(" and define the location for include files for the zopeneditor-sample project for each language. The properties that are defined for each property group are spelled exactly the same as "),s("a",{attrs:{href:"setting_propertygroup"}},[e._v("documented for workspace/user settings")]),e._v(" and listed in the "),s("RouterLink",{attrs:{to:"/Docs/reference_propertygroup.html"}},[e._v("property groups reference page")]),e._v(" for completeness.")],1),e._v(" "),s("p",[e._v("The difference is that these property groups are now not mixed in with your editor settings and can be edited much more efficiently in YAML.")]),e._v(" "),s("h2",{attrs:{id:"editing-the-zapp-yaml-file-with-code-completion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#editing-the-zapp-yaml-file-with-code-completion"}},[e._v("#")]),e._v(" Editing the zapp.yaml file with code completion")]),e._v(" "),s("p",[e._v("Code completion requires that you have the Red Hat VS Code YAML extension installed and configured as outlined above. You can try it out as follows:")]),e._v(" "),s("ol",[s("li",[e._v("Place your cursor behind the line with "),s("code",[e._v("type: mvs")]),e._v(" (around line 34) and press Enter to start a new line.")]),e._v(" "),s("li",[e._v("Press Ctrl+Space to open up the code completion drop-down.")])]),e._v(" "),s("p",[e._v("It then shows two properties that could still be added here: "),s("code",[e._v("language")]),e._v(" and "),s("code",[e._v("compilerOptions")]),e._v(", which are not specified by this remote mvs property group yet.")]),e._v(" "),s("h2",{attrs:{id:"editing-the-zapp-yaml-file-with-property-group-code-snippets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#editing-the-zapp-yaml-file-with-property-group-code-snippets"}},[e._v("#")]),e._v(" Editing the zapp.yaml file with property group code snippets")]),e._v(" "),s("p",[e._v("ZAPP also provides code snippets so that you can enter new property groups rapidly as follows.")]),e._v(" "),s("ol",[s("li",[e._v("Place your cursor at the empty line at the end of the file.")]),e._v(" "),s("li",[e._v("Press Ctrl+Space again, and you will see four code snippets listed in the drop-down.")]),e._v(" "),s("li",[e._v("Navigate down and select "),s("code",[e._v("ZAPP Remote MVS Property Groups")]),e._v(" by pressing the Enter key.")]),e._v(" "),s("li",[e._v("You can see that a new property group is inserted with highlighted placeholders.")]),e._v(" "),s("li",[e._v("Before clicking or typing anything else, while the placeholders are still highlighted, use the Tab and Shift+Tab keys to navigate between the placeholders and enter values for name, language (using another drop down), and syslib entries.")]),e._v(" "),s("li",[e._v("At the end of the new property groups, add another "),s("code",[e._v("syslib")]),e._v(" entry by adding a new line and entering a new value such as "),s("code",[e._v("- USER1.SAMPLE.INCLUDES")]),e._v(".")])]),e._v(" "),s("p",[e._v("Remember that you need to provide a valid YAML file. As the "),s("code",[e._v("syslib")]),e._v(" entry required a string array in JSON, it now needs to be entered in YAML as an ordered list using "),s("code",[e._v("-")]),e._v(" for each value.")]),e._v(" "),s("p",[e._v("There is also a code snippet template for a complete ZAPP file. You can try it out as follows:")]),e._v(" "),s("ol",[s("li",[e._v("In the current editor window for "),s("code",[e._v("zapp.yaml")]),e._v(", do a Select-All and delete all the contents of the file. You can withdraw the deletion later as the file is managed in Git.")]),e._v(" "),s("li",[e._v("In the first line and column of the empty document, press Ctrl+Space and select the "),s("code",[e._v("ZAPP Template")]),e._v(" snippet. Instead of scrolling all the way to the bottom, you can type that snippet name instead.")]),e._v(" "),s("li",[e._v("You see that a snippet was inserted that contains a local and a remote property group. You can then modify as needed.")])]),e._v(" "),s("p",[e._v("In addition to using Ctrl+Space, you can also insert snippets via the VS Code Snippet Gallery that you can reach by following the steps below:")]),e._v(" "),s("ol",[s("li",[e._v("Press Cmd+Shift+P (Mac) or Ctrl+Shift+P (Windows).")]),e._v(" "),s("li",[e._v("Select "),s("strong",[e._v("Insert Snippet")]),e._v(" from the drop-down. You can type "),s("code",[e._v("snippet")]),e._v(" to narrow down the list.")])]),e._v(" "),s("h2",{attrs:{id:"reviewing-syntax-errors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reviewing-syntax-errors"}},[e._v("#")]),e._v(" Reviewing syntax errors")]),e._v(" "),s("p",[e._v("When you create an invalid "),s("code",[e._v("zapp.yaml")]),e._v(" file by typing incorrect YAML or misspelling property names, the "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Hat YAML extension"),s("OutboundLink")],1),e._v(" will show you syntax errors in the Problems view. You can try it out as follows:")]),e._v(" "),s("ol",[s("li",[e._v("Remove a few letters from any of the properties to misspell it.")]),e._v(" "),s("li",[e._v("Switch to the VS Code Problems view. Use the "),s("strong",[e._v("View > Problems View")]),e._v(" menu if you do not see it. This view will now show you the exact syntax error as well as the line and column it happened in.")])]),e._v(" "),s("p",[e._v("If you do not have the Red Hat YAML extension installed, you can still find simple error lists provided by Z Open Editor in the Output view as follows:")]),e._v(" "),s("ol",[s("li",[e._v("Switch to the Output view. Use the "),s("strong",[e._v("View > Output View")]),e._v(" menu if you do not see it.")]),e._v(" "),s("li",[e._v("On the right side of the Output view, select "),s("strong",[e._v("IBM Z Open Editor")]),e._v(" from the drop-down.")]),e._v(" "),s("li",[e._v("Make some syntax errors. Note that whereas the Red Hat extension will show you errors right away, here you will not see any errors until you attempt a save.")]),e._v(" "),s("li",[e._v("Save your file with the syntax error. Now the Output View will show you error messages such as "),s("code",[e._v("should NOT have additional properties(additionalProperty:lauage)")]),e._v(".")])]),e._v(" "),s("p",[e._v("As you can see, the output here is much simpler and does not have line numbers. The Red Hat extension is by far the superior solution for editing ZAPP files as that extension includes a full YAML Language Server that generates an Outline view.")]),e._v(" "),s("h2",{attrs:{id:"formatting-your-zapp-yaml-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#formatting-your-zapp-yaml-file"}},[e._v("#")]),e._v(" Formatting your zapp.yaml file")]),e._v(" "),s("p",[e._v("Another capability of the Red Hat YAML extension is the ability to format your ZAPP file consistently. If you used different indentations in places, you can simply correct the formatting of the entire file by using one of the following two ways to format:")]),e._v(" "),s("ul",[s("li",[e._v("Use the shortcut Shift+Option+F (Mac) or Shift+Alt+F (Windows).")]),e._v(" "),s("li",[e._v('Press Cmd+Shift+P (Mac) or Ctrl+Shift+P (Windows), and type "format" to select '),s("strong",[e._v("Format Document")]),e._v(".")])]),e._v(" "),s("h2",{attrs:{id:"converting-your-existing-property-groups-to-zapp-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#converting-your-existing-property-groups-to-zapp-files"}},[e._v("#")]),e._v(" Converting your existing property groups to ZAPP files")]),e._v(" "),s("p",[e._v("If you have used property groups with previous versions of Z Open Editor and would like to convert them to ZAPP, then you can do that in one or two simple steps.")]),e._v(" "),s("ol",[s("li",[e._v("Copy your property groups into a "),s("code",[e._v("zapp.json")]),e._v(" file.")]),e._v(" "),s("li",[e._v("(Optional) Convert the "),s("code",[e._v("zapp.json")]),e._v(" to "),s("code",[e._v("zapp.yaml")]),e._v(".")])]),e._v(" "),s("p",[e._v("Here are the steps in detail:")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Create an empty "),s("code",[e._v("zapp.json")]),e._v(" file with an empty object "),s("code",[e._v("{ }")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Use code completion in the JSON file to enter some required and optional properties such as name, version, and author.")])]),e._v(" "),s("li",[s("p",[e._v("Open your VS Code workspace or user settings file in which you had previously stored your property groups.")])]),e._v(" "),s("li",[s("p",[e._v("Cut the entire property groups entry from the settings file and paste it inside the object of your "),s("code",[e._v("zapp.json")]),e._v(". The result should look similar to the JSON object below:")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sam"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"zopeneditor.propertygroups"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SAM-Copybooks"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"local"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"syslib"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/COPYBOOK"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/INCLUDES"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/ASMCOPY"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Change "),s("code",[e._v('"zopeneditor.propertygroups"')]),e._v(" to "),s("code",[e._v('"property-groups"')]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Format the file by pressing Shift+Option+F (Mac) or Shift+Alt+F (Windows).")])]),e._v(" "),s("li",[s("p",[e._v("Test whether your include files get resolved.")])])]),e._v(" "),s("p",[e._v("The resulting file looks as follows:")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sam"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"property-groups"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SAM-Copybooks"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"local"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"syslib"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/COPYBOOK"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/INCLUDES"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"**/ASMCOPY"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("You can easily convert a valid "),s("code",[e._v("zapp.json")]),e._v(" file to a "),s("code",[e._v("zapp.yaml")]),e._v(" file by using another third-party VS Code Extension as follows.")]),e._v(" "),s("ol",[s("li",[e._v("Install a VS Code Extension that can do such conversion; for example, "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=hilleer.yaml-plus-json",target:"_blank",rel:"noopener noreferrer"}},[e._v("YAML+JSON"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("li",[e._v("With this extension, you can now right-click the "),s("code",[e._v("zapp.json")]),e._v(" files and select "),s("strong",[e._v("Convert to YAML")]),e._v(".")]),e._v(" "),s("li",[e._v("Rename the resulting file from "),s("code",[e._v("zapp.yml")]),e._v(" to "),s("code",[e._v("zapp.yaml")]),e._v(".")]),e._v(" "),s("li",[e._v("Test whether property groups are resolving correctly.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);