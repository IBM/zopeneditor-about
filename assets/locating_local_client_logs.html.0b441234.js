import{r as t,o as s,a,b as e,d as i,w as d,F as c,e as o,c as n}from"./app.16cdc755.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var g="/zopeneditor-about/assets/editor-log-info.f9d45119.png";const u={},p=e("h1",{id:"troubleshooting-using-log-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#troubleshooting-using-log-files","aria-hidden":"true"},"#"),o(" Troubleshooting using log files")],-1),f=e("p",null,"You can enable logging for IBM Z Open Editor to produce detailed logs that can be used to troubleshoot problems by providing more information and a trace about the activities the editor is performing.",-1),m=o("You can enable logging through a "),w=o("user preference setting"),b=n(' called <code>zopeneditor.logger</code>. In the VS Code Preferences editor, select from the allowed <a href="#log-levels">log levels</a>: <code>DEBUG</code>, <code>INFO</code> (default), <code>WARN</code>, <code>ERROR</code>, and <code>OFF</code>.',15),v=e("p",null,"After logging is enabled, you can find the logging output in two places:",-1),_=e("li",null,[o("In the VS Code Output panel, by selecting "),e("code",null,"IBM Z Open Editor"),o(" from the drop-down list.")],-1),x=o("A log file written to your disk that can be shared with technical support (if you are entitled to it) or attached to the issue you file against our "),y={href:"https://github.com/IBM/zopeneditor-about/issues",target:"_blank",rel:"noopener noreferrer"},I=o("public issues repository on GitHub"),E=o(". The first line in the VS Code Output panel will contain the absolute path to where the file is located on your system."),C=n('<p>Use the log file for troubleshooting issues with the information provided. For example, when trying to understand why a specific include file was not found by the editor, the log file produced under the <code>DEBUG</code> log level will give you a trace of the editor&#39;s activities for finding ZAPP files in your workspaces, the property groups it used, as well as in which locations it is looking. You can search in the log to see where an initial request for a specific file was made, the steps of processing the request, as well as any errors that were reported. Because the requests for all the include files in a program happen in parallel, each request will have a unique request ID that will help in distinguishing the concurrent events in the log.</p><h2 id="finding-versions-of-all-vs-code-extensions-installed" tabindex="-1"><a class="header-anchor" href="#finding-versions-of-all-vs-code-extensions-installed" aria-hidden="true">#</a> Finding versions of all VS Code extensions installed</h2><p>Enabling logging also provides information that technical support will be asking for. To retrieve it:</p><ol><li><p>Ensure that your IBM Z Open Editor logger preference is set to <code>DEBUG</code>.</p></li><li><p>In the <code>Output</code> console window, select <code>IBM Z Open Editor</code> from the drop-down list. The following information will be listed:</p><ul><li>IBM Z Open Editor version</li><li>Editor platform and version</li><li>Editor Installation information</li><li>Java SDK configuration location and memory allocation</li><li>Key user settings</li><li>Zowe Explorer VS Code Extension version</li><li>Other VS Code Extensions visible</li></ul><p><img src="'+g+'" alt="CRW Log Info"></p></li></ol><h2 id="locating-vs-code-extension-and-lsp-log-files-on-the-local-client" tabindex="-1"><a class="header-anchor" href="#locating-vs-code-extension-and-lsp-log-files-on-the-local-client" aria-hidden="true">#</a> Locating VS Code extension and LSP log files on the local client</h2><p>In addition to the Z Open Editor log file, there are other log files that can help with troubleshooting. For example, Zowe Explorer has implemented the same mechanism of selecting the log level from Settings, showing the content in the VS Code Output view, and writing it to a file that you can find by looking at the first line. Here a reference for where the extension and other relevant log files are typically located:</p><table><thead><tr><th>Log type</th><th>Location</th></tr></thead><tbody><tr><td>Main log</td><td>The location is specified in output console window on 2nd line. <br><code>** The log file is available at...</code><br><ul><li>Windows example: <code>C:\\Users\\username\\AppData\\Roaming\\Code\\logs\\20200921T153526\\exthost1\\IBM.zopeneditor\\zopeneditor-1-1-0.log</code></li><li>Mac example: <code>/Users/username/Library/Application Support/Code/logs/20200928T093225/exthost5/IBM.zopeneditor/zopeneditor-1-1-0.log</code></li></ul></td></tr><tr><td>Language Server Protocol (LSP) log</td><td>Find the line that begins with the following sentence to locate the LSP logs: <br> <code>** ZLanguageServer: Will start a language server with command...</code> <br><br>Then, find the <code>-data,</code> tag which immediately precedes the LSP log file location.<br><ul><li>Windows example: <code>C:\\Users\\username\\AppData\\Local\\Temp\\_ws_&lt;id&gt;\\.metadata/.log</code></li><li>Mac example: <code>/var/folders/sr/qztfyx3d39z50jgl50ls_b0r0000gn/T/_ws_&lt;id&gt;/.metadata/.log</code></li></ul></td></tr><tr><td>Zowe Explorer log</td><td><ul><li>Windows example: <code>C:\\Users\\username\\.vscode\\extensions\\zowe.vscode-extension-for-zowe-1.9.0\\logs</code></li><li>Mac example: <code>/Users/username/.vscode/extensions/zowe.vscode-extension-for-zowe-1.9.0/logs</code></li></ul></td></tr><tr><td>RSE API plug-in for Zowe CLI (RSE CLI plug-in) logs</td><td>Log files can be found in two locations: <ul><li><code>~\\.zowe\\zowe\\logs\\</code></li><li><code>~\\.zowe\\imperative\\logs\\</code></li></ul></td></tr></tbody></table><h2 id="finding-zowe-cli-version-and-rse-cli-plug-in-version" tabindex="-1"><a class="header-anchor" href="#finding-zowe-cli-version-and-rse-cli-plug-in-version" aria-hidden="true">#</a> Finding Zowe CLI version and RSE CLI plug-in version</h2><p>In the VS Code Terminal window, enter the applicable commands:</p><ul><li>Command for Zowe CLI: <code>zowe --version</code></li><li>Command for RSE CLI plug-in: <code>zowe plugins list</code></li></ul><h2 id="log-levels" tabindex="-1"><a class="header-anchor" href="#log-levels" aria-hidden="true">#</a> Log levels</h2><p>IBM Z Open Editor uses the log levels described in the following chart. These levels are listed in order of most to least detailed (with the exception of <code>OFF</code>, which turns off all logging). For example, the <code>DEBUG</code> setting will output detailed debug information as well as messages from the other levels below it: <code>INFO</code>, <code>WARN</code>, and <code>ERROR</code>. In contrast, the <code>ERROR</code> setting will only log important errors.</p><table><thead><tr><th>Log level</th><th>Description</th></tr></thead><tbody><tr><td>Debug</td><td>Identifies detailed informational events that are useful for troubleshooting the editor&#39;s behavior.</td></tr><tr><td>Info</td><td>Provides informative messages that are of general interest to the end user for observing activities performed by the editor.</td></tr><tr><td>Warn</td><td>Indicates potentially problematic situations that could cause unexpected behaviors or errors.</td></tr><tr><td>Error</td><td>Designates error events that interrupted the editor in executing an operation as intended.</td></tr><tr><td>Off</td><td>Nothing is logged.</td></tr></tbody></table>',13);function L(S,z){const l=t("RouterLink"),r=t("ExternalLinkIcon");return s(),a(c,null,[p,f,e("p",null,[m,i(l,{to:"/Docs/setting_preferences.html#user-preferences"},{default:d(()=>[w]),_:1}),b]),v,e("ul",null,[_,e("li",null,[x,e("a",y,[I,i(r)]),E])]),C],64)}var B=h(u,[["render",L]]);export{B as default};
