import{r as n,o as l,a as d,b as e,d as r,w as a,F as s,e as o,c as t}from"./app.a2a94e98.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var g="/zopeneditor-about/assets/editor-log-info.f9d45119.png";const h={},p=e("h1",{id:"troubleshooting-using-log-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#troubleshooting-using-log-files","aria-hidden":"true"},"#"),o(" Troubleshooting using log files")],-1),u=o("You can enable logging for IBM Z Open Editor to produce detailed logs that can be used to troubleshoot problems. Logs can be valuable inputs when you file defects or contact technical support (if you are entitled to it). You can enable logging via a "),f=o("user preference setting"),m=t(' called <code>zopeneditor.logger</code>. In the VS Code Preferences editor, select from the allowed <a href="#log-levels">log levels</a>: <code>DEBUG</code>, <code>INFO</code> (default), <code>WARNING</code>, <code>ERROR</code> and <code>OFF</code>.',15),b=t('<p>Once logging is enabled, you can find the logging output in two places:</p><ul><li>In the VS Code Output panel, by selecting <code>IBM Z Open Editor</code> from the drop-down.</li><li>A log file written to your disk. More details on the logs for IBM Z Open Editor and its integrations can be found further below.</li></ul><p>If you use IBM Z Open Editor with Eclipse Che or Red Hat CodeReady Workspaces, you can also enable logging by specifying the same user preference setting, <code>zopeneditor.logger</code>. To find the generated log file, open a Terminal window in the container called <strong>ibm-wazi???</strong>, with the question marks being replaced by randomly generated characters. Do not mistake that with the default user content container called <strong>wazi</strong>, which you use for coding.</p><h2 id="finding-versions-of-all-vs-code-extensions-installed" tabindex="-1"><a class="header-anchor" href="#finding-versions-of-all-vs-code-extensions-installed" aria-hidden="true">#</a> Finding versions of all VS Code extensions installed</h2><ol><li><p>Ensure that your IBM Z Open Editor logger preference is set to <code>DEBUG</code>.</p></li><li><p>In the <code>Output</code> console window, select <code>IBM Z Open Editor</code> from the drop down list. The following information will be listed:</p><ul><li>IBM Z Open Editor version</li><li>Editor platform and version</li><li>Editor Installation information</li><li>Java SDK configuration location and memory allocation</li><li>Key user settings</li><li>Zowe Explorer VS Code Extension version</li><li>Other VS Code Extensions visible</li></ul><p><img src="'+g+'" alt="CRW Log Info"></p></li></ol><h2 id="locating-vs-code-extension-and-lsp-log-files-on-the-local-client" tabindex="-1"><a class="header-anchor" href="#locating-vs-code-extension-and-lsp-log-files-on-the-local-client" aria-hidden="true">#</a> Locating VS Code extension and LSP log files on the local client</h2><table><thead><tr><th>Log type</th><th>Location</th></tr></thead><tbody><tr><td>Main log</td><td>The location is specified in output console window on 2nd line. <br><code>** The log file is available at...</code><br><ul><li>Windows example: <code>C:\\Users\\username\\AppData\\Roaming\\Code\\logs\\20200921T153526\\exthost1\\IBM.zopeneditor\\zopeneditor-1-1-0.log</code></li><li>Mac example: <code>/Users/username/Library/Application Support/Code/logs/20200928T093225/exthost5/IBM.zopeneditor/zopeneditor-1-1-0.log</code></li></ul></td></tr><tr><td>Language Server Protocol (LSP) log</td><td>Find the line that begins with the following sentence to locate the LSP logs: <br> <code>** ZLanguageServer: Will start a language server with command...</code> <br><br>Then, find the <code>-data,</code> tag which immediately precedes the LSP log file location.<br><ul><li>Windows example: <code>C:\\Users\\username\\AppData\\Local\\Temp\\_ws_&lt;id&gt;\\.metadata/.log</code></li><li>Mac example: <code>/var/folders/sr/qztfyx3d39z50jgl50ls_b0r0000gn/T/_ws_&lt;id&gt;/.metadata/.log</code></li></ul></td></tr><tr><td>Zowe Explorer log</td><td><ul><li>Windows example: <code>C:\\Users\\username\\.vscode\\extensions\\zowe.vscode-extension-for-zowe-1.9.0\\logs</code></li><li>Mac example: <code>/Users/username/.vscode/extensions/zowe.vscode-extension-for-zowe-1.9.0/logs</code></li></ul></td></tr><tr><td>RSE API plug-in for Zowe CLI (RSE CLI plug-in) logs</td><td>Log files can be found in two locations: <ul><li><code>~\\.zowe\\zowe\\logs\\</code></li><li><code>~\\.zowe\\imperative\\logs\\</code></li></ul></td></tr></tbody></table><h2 id="finding-zowe-cli-version-and-rse-cli-plug-in-version" tabindex="-1"><a class="header-anchor" href="#finding-zowe-cli-version-and-rse-cli-plug-in-version" aria-hidden="true">#</a> Finding Zowe CLI version and RSE CLI plug-in version</h2><p>In the VS Code Terminal window, enter the applicable commands:</p><ul><li>Command for Zowe CLI: <code>zowe --version</code></li><li>Command for RSE CLI plug-in: <code>zowe plugins list</code></li></ul><h2 id="log-levels" tabindex="-1"><a class="header-anchor" href="#log-levels" aria-hidden="true">#</a> Log levels</h2><p>IBM Z Open Editor uses the log levels described in the following chart. These levels are listed in order of most to least detailed (with the exception of <code>OFF</code>, which turns off all logging). For example, the <code>DEBUG</code> setting will output detailed debug information as well as messages from the other levels below it: <code>INFO</code>, <code>WARN</code>, and <code>ERROR</code>. In contrast, the <code>ERROR</code> setting will only log important errors.</p><table><thead><tr><th>Log level</th><th>Description</th></tr></thead><tbody><tr><td>Debug</td><td>Identifies detailed informational events that are useful for troubleshooting the editor&#39;s behavior.</td></tr><tr><td>Info</td><td>Provides informative messages that are of general interest to the end user for observing activities performed by the editor.</td></tr><tr><td>Warn</td><td>Indicates potentially problematic situations that could cause unexpected behaviors or errors.</td></tr><tr><td>Error</td><td>Designates error events that interrupted the editor in executing an operation as intended.</td></tr><tr><td>Off</td><td>Nothing is logged.</td></tr></tbody></table>',13);function w(v,x){const i=n("RouterLink");return l(),d(s,null,[p,e("p",null,[u,r(i,{to:"/Docs/setting_preferences.html#user-preferences"},{default:a(()=>[f]),_:1}),m]),b],64)}var E=c(h,[["render",w]]);export{E as default};
