import{r as n,o as r,a as d,b as o,d as t,w as s,F as c,c as i,e}from"./app.574d1b99.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";var h="/zopeneditor-about/assets/vsc-zopeneditor-sample.ccb9b0c9.png",u="/zopeneditor-about/assets/vsc-allocate-jcl.96a95b47.png",m="/zopeneditor-about/assets/rse-zowe-explorer-view-profiles.6e22fb24.gif",g="/zopeneditor-about/assets/rse-upload-files-vsc.0fd6e0e7.gif",b="/zopeneditor-about/assets/rse-copy-ps.f4d7c98d.gif",f="/zopeneditor-about/assets/rse-download-local.48960b12.png",L="/zopeneditor-about/assets/rse-script.ad48c90f.gif";const S={},w=i('<h1 id="managing-z-os-resources-with-ibm-rse-api-plug-in-for-zowe-cli-tutorial" tabindex="-1"><a class="header-anchor" href="#managing-z-os-resources-with-ibm-rse-api-plug-in-for-zowe-cli-tutorial" aria-hidden="true">#</a> Managing z/OS resources with IBM RSE API Plug-in for Zowe CLI tutorial</h1><p>This tutorial demonstrates some features of IBM RSE API Plug-in for Zowe CLI (RSE CLI plug-in) and includes exercises to help you become familiar with managing z/OS resources via command-line operations and the Zowe Explorer VS Code extension.</p><h2 id="learning-objectives" tabindex="-1"><a class="header-anchor" href="#learning-objectives" aria-hidden="true">#</a> Learning objectives</h2><p>This tutorial does not cover all features of the RSE CLI plug-in, but demonstrates the approaches that you can apply when managing z/OS resources.</p><p>By completing the tutorial, you learn about the following approaches to manage z/OS resources with the RSE CLI plug-in:</p><ul><li><a href="#approach-1-using-the-zowe-explorer-vs-code-extension-to-manage-z-os-resources">Use the Zowe Explorer VS Code extension</a></li><li><a href="#approach-2-using-a-command-line-terminal-to-manage-z-os-resources">Use a command-line window</a></li><li><a href="#approach-3-using-a-script-to-automate-command-line-operations-against-z-os-resources">Use a script to automate the command-line operations</a></li></ul><h2 id="tutorial-scenario" tabindex="-1"><a class="header-anchor" href="#tutorial-scenario" aria-hidden="true">#</a> Tutorial scenario</h2><p>The tutorial scenario is based on a fictitious company that has applications written in COBOL. The company does not have z/OSMF configured on z/OS. As an alternative, they have installed and configured IBM Remote System Explorer API (RSE API) on z/OS. They want to use the RSE CLI plug-in to interact with z/OS by using RSE API instead of using z/OSMF.</p><p>In this scenario, you will:</p><ul><li>Import application code to your local machine.</li><li>Submit JCL files to run jobs on z/OS.</li><li>List data sets.</li><li>Upload files to data sets.</li><li>Check job status.</li><li>Download output files of jobs.</li></ul><h2 id="time-required" tabindex="-1"><a class="header-anchor" href="#time-required" aria-hidden="true">#</a> Time required</h2><p>It takes approximately 10 minutes to complete each approach. If you explore other features related to this tutorial, it can take longer to complete.</p><h2 id="audience" tabindex="-1"><a class="header-anchor" href="#audience" aria-hidden="true">#</a> Audience</h2><p>This tutorial is for mainframe developers who want to use the RSE API support provided by the RSE CLI plug-in as an alternative to using z/OSMF to manage z/OS resources.</p><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><p>Before getting started with the tutorial, you must complete the following tasks:</p>',16),E=e("Create an RSE profile. For instructions, see "),v=e("Creating an RSE profile"),C=e(" via command line, or "),A=e("Setting up and using RSE profiles"),O=e(" to create the profile via Zowe Explorer."),_=e("Clone the "),T={href:"https://github.com/IBM/zopeneditor-sample.git",target:"_blank",rel:"noopener noreferrer"},z=e("sample repository"),y=e(" and switch to the "),x=o("code",null,"tutorial-complete",-1),P=e(" Git branch that has the final updated set of programs and support files to perform the tasks described in this tutorial by following these steps:"),R=i(`<ol><li><p>Clone the sample repository by issuing the following command in a command-line window:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:IBM/zopeneditor-sample.git
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>cd</code> into the zopeneditor-sample directory that was just cloned.</p></li><li><p>Switch to the <code>tutorial-complete</code> Git branch with the command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout tutorial-complete
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol>`,1),j=o("h2",{id:"approach-1-using-the-zowe-explorer-vs-code-extension-to-manage-z-os-resources",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#approach-1-using-the-zowe-explorer-vs-code-extension-to-manage-z-os-resources","aria-hidden":"true"},"#"),e(" Approach 1: Using the Zowe Explorer VS Code extension to manage z/OS resources")],-1),k=o("p",null,"This section describes the procedure of managing z/OS resources with the Zowe Explorer VS Code extension.",-1),I=e("To get set up with VS Code, ensure that IBM Z Open Editor VS Code extension and Zowe Explorer VS Code extension are installed. For more information, see "),M=e("Using RSE support in Zowe Explorer VS Code extension"),U=e("."),q=i('<ol><li><p>Open VS Code, select <strong>File &gt; Open Folder</strong> (Windows) or <strong>File &gt; Open...</strong> (Mac) from the top menu bar, and select the folder <strong>zopeneditor-sample</strong> that was cloned.</p><p><img src="'+h+'" alt="zopeneditor-sample in VS Code"></p><p>In the lower left corner, make sure the Git branch that is selected is the <code>tutorial-complete</code> branch. If it is not on that branch, click the Git branch that is shown and select <code>tutorial-complete</code> or <code>origin/tutorial-complete</code> branch from the list of available branches.</p></li><li><p>Open the <strong>JCL</strong> folder within VS Code and click <code>ALLOCATE.jcl</code> to edit the <code>ALLOCATE.jcl</code> file on line 16 and set the HLQ.</p><p><img src="'+u+`" alt="ALLOCATE.jcl"></p></li><li><p>Click <code>Terminal</code> from the top VS Code menu bar, and then select <code>New Terminal</code> to open the terminal.</p></li><li><p>Submit the local <code>ALLOCATE.jcl</code> file by entering this command in the terminal:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse submit local-file <span class="token string">&quot;./JCL/ALLOCATE.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>After the job is submitted, click the Zowe icon on the left side of VS Code. In the DATA SETS view, click the <strong>+</strong> symbol to add the RSE profile to the view. Repeat this with the JOBS view.</p><p>Once the RSE profile shows up in the view window, click the magnifying glass next to the RSE profile name and enter <code>HLQ.SAMPLE*</code> in the search bar. You need to replace <code>HLQ</code> with the modification to it as you did in <code>ALLOCATE.jcl</code>. The data sets created by <code>ALLOCATE.jcl</code> should be listed in the Data Sets View.</p></li><li><p>You can check the job from the JCL that was submitted by clicking the magnifying glass next to the RSE profile in the JOBS view and entering the HLQ that was added to <code>ALLOCATE.jcl</code> into the search bar as the filter. You can view the spool files by opening the Job name <code>ZDEALLC</code> and clicking the spool file to open it in the Editor.</p><p><img src="`+m+'" alt="Adding RSE profiles to Zowe Explorer and viewing Data Sets and Jobs"></p></li><li><p>Upload the COBOL and copybook files into the created data sets, <code>HLQ.SAMPLE.COBOL</code>, <code>HLQ.SAMPLE.COBCOPY</code>, and <code>HLQ.SAMPLE.COPYLIB</code>, after you replace HLQ with the value entered in <code>ALLOCATE.jcl</code>. Right-click the data set and select the member to upload. In the <code>zopeneditor-sample</code> directory that was cloned, choose the files in the COBOL directory for the <code>HLQ.SAMPLE.COBOL</code> data set and the files in the COPYBOOK directory for the <code>HLQ.SAMPLE.COBCOPY</code> data set.</p><p><img src="'+g+'" alt="Upload Cobol and Copybook files into Data Sets Using VS Code"></p></li><li><p>Copy and paste the following files in the <code>RESOURCES</code> directory of <strong>zopeneditor-sample</strong> into the appropriate sequential data set with in the Zowe Explorer Data Sets View, replacing HLQ with the value entered in <code>ALLOCATE.jcl</code>. Save the files in Zowe Explorer Data Sets View so they can be uploaded to z/OS.</p><ul><li><p><code>RESOURCES/SAMPLE.CUSTFILE</code> into the sequential data set <code>HLQ.SAMPLE.CUSTFILE</code></p></li><li><p><code>RESOURCES/SAMPLE.TRANFILE</code> into the sequential data set <code>HLQ. SAMPLE TRANFILE</code></p></li></ul><p><img src="'+b+`" alt="Copy and Paste Sequential Data Sets to Save on z/OS"></p></li><li><p>In the JCL directory of <strong>zopeneditor-sample</strong>, repeat the modification to the <code>RUN.jcl</code> on line 30 and set the HLQ with the same one used in <code>ALLOCATE.jcl</code>. You might or might not need to modify the other symbolics depending on the compile and link libraries your host system uses. You might or might not change the <code>SPACE1</code> and <code>SPACE2</code> symbolics, and save the file.</p></li><li><p>Click <code>Terminal</code> from the top VS Code menu bar, then select <code>New Terminal</code> to open the terminal.</p></li><li><p>Submit the local <code>RUN.jcl</code> file by entering this command in the terminal:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse submit local-file <span class="token string">&quot;./JCL/RUN.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>View the status of the Job for the submission of <code>RUN.jcl</code> by refreshing the Zowe Explorer&#39;s Jobs View and selecting the Job Name <code>ZDERUN</code>.</p></li><li><p>After the job completes, refresh Zowe Explorer&#39;s Data Sets View to see the new data sets that were created by the <code>RUN.jcl</code>. These data sets include the following files, replacing HLQ with the value entered in the <code>RUN.jcl</code>.</p><ul><li><code>HLQ.SAMPLE.CUSTOUT</code></li><li><code>HLQ.SAMPLE.CUSTRPT</code></li></ul><p>You can view the files by clicking them to open in the Editor.</p></li><li><p>To download the resulting files from the job, click <code>Terminal</code> from the top VS Code menu bar, then open a terminal by selecting <code>New Terminal</code> and enter the following commands replacing HLQ with the value entered in the <code>RUN.jcl</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse download data-set <span class="token string">&quot;HLQ.SAMPLE.CUSTOUT&quot;</span>
zowe rse download data-set <span class="token string">&quot;HLQ.SAMPLE.CUSTRPT&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Switch back to the Files view to the opened folder <code>zopeneditor-sample</code> and the downloaded files will be in a folder named after the HLQ value entered in the commands above.</p><p><img src="`+f+`" alt="Download Data Set Location"></p></li></ol><h2 id="approach-2-using-a-command-line-terminal-to-manage-z-os-resources" tabindex="-1"><a class="header-anchor" href="#approach-2-using-a-command-line-terminal-to-manage-z-os-resources" aria-hidden="true">#</a> Approach 2: Using a command-line terminal to manage z/OS resources</h2><p>This section describes the procedure of how you manage z/OS resources in a command-line terminal.</p><ol><li><p>Edit the <code>ALLOCATE.jcl</code> file on line 16 and set the HLQ.</p></li><li><p>Submit the JCL to run on z/OS with the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse submit local-file <span class="token string">&quot;./JCL/ALLOCATE.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The output of the job submission will be printed in the terminal displaying the job id, return code, job name, and status of the job.</p></li><li><p>List the data sets that were created by the JCL replacing HLQ with the value set in <code>ALLOCATE.jcl</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse list data-set HLQ.SAMPLE*
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The output should be as follows:</p><div class="language-terminal ext-terminal line-numbers-mode"><pre class="language-terminal"><code>HLQ.SAMPLE.COBCOPY
HLQ.SAMPLE.COBOL
HLQ.SAMPLE.CUSTFILE
HLQ.SAMPLE.CUSTOUT
HLQ.SAMPLE.CUSTRPT
HLQ.SAMPLE.LOAD
HLQ.SAMPLE.OBJ
HLQ.SAMPLE.TRANFILE
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Upload the files from the cloned repository into the newly created data sets, replacing HLQ with the value set in <code>ALLOCATE.jcl</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse upload dir-to-pds <span class="token string">&quot;./COBOL&quot;</span> <span class="token string">&quot;HLQ.SAMPLE.COBOL&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse upload dir-to-pds <span class="token string">&quot;./COPYBOOK&quot;</span> <span class="token string">&quot;HLQ.SAMPLE.COBCOPY&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse upload file-to-data-set <span class="token string">&quot;./RESOURCES/SAMPLE.CUSTFILE&quot;</span> <span class="token string">&quot;HLQ.SAMPLE.CUSTFILE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse upload file-to-data-set <span class="token string">&quot;./RESOURCES/SAMPLE.TRANFILE&quot;</span> <span class="token string">&quot;HLQ.SAMPLE.TRANFILE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Make sure that the terminal response is <code>success: true</code> for all the uploads.</p></li><li><p>Perform the same modification to the <code>RUN.jcl</code> on line 30 and set the HLQ with the same one used in <code>ALLOCATE.jcl</code>.</p><p>You might or might not need to modify the other symbolics depending on the compile and link libraries your host system uses. You might or might not change the <code>SPACE1</code> and <code>SPACE2</code> symbolics, and save the file.</p></li><li><p>Submit the <code>RUN.jcl</code> with the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse submit local-file <span class="token string">&quot;./JCL/RUN.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The response will include the <code>jobid</code>. To check the completion of the job, replace the <code>jobid</code> in the following command with the returned job ID and run it in the terminal window:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse view job-status-by-jobid jobid
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>When the status of the job is complete, download the files that result from the job with the following commands:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe rse download data-set <span class="token string">&quot;HLQ.SAMPLE.CUSTOUT&quot;</span>
zowe rse download data-set <span class="token string">&quot;HLQ.SAMPLE.CUSTRPT&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>To see the downloaded files enter the command <code>ls</code> (Mac) or <code>dir</code> (Windows).</p></li></ol><h2 id="approach-3-using-a-script-to-automate-command-line-operations-against-z-os-resources" tabindex="-1"><a class="header-anchor" href="#approach-3-using-a-script-to-automate-command-line-operations-against-z-os-resources" aria-hidden="true">#</a> Approach 3: Using a script to automate command-line operations against z/OS resources</h2><p>You can do the same actions as described in approach 1 in a shell script. This section describes how to create and use the script.</p><ol><li><p>Edit the <code>ALLOCATE.jcl</code> file on line 16 and set the HLQ.</p></li><li><p>Perform the same modification to the <code>RUN.jcl</code> on line 30 and set the HLQ with the same one used in <code>ALLOCATE.jcl</code>. You might or might not need to modify the other symbolics depending on the compile and link libraries your host system uses. You might or might not change the <code>SPACE1</code> and <code>SPACE2</code> symbolics, and save the file.</p></li><li><p>The script <code>zowecli-cobol-upload-run-tutorial.sh</code> is located in the <code>SCRIPTS</code> directory of the cloned repo. Edit the HLQ variable in the code on line 12 to match the modification to the JCL files.</p></li><li><p>Open a terminal in VS Code and enter <code>SCRIPTS/zowecli-cobol-upload-run-tutorial.sh</code>.</p><p><img src="`+L+'" alt="Using Command Line Operations in a Script"></p></li></ol><p>Alternatively, you can run this script with Zowe CLI, which uses z/OSMF on the host instead of RSE API. To adapt the script for use in Zowe CLI, change the values of the variables <code>FILES_CMD</code> and <code>JOBS_CMD</code> in the script to the following:</p><ul><li><code>FILES_CMD=&quot;files&quot;</code></li><li><code>JOBS_CMD=&quot;jobs&quot;</code></li></ul>',9),H=e("The RSE CLI plug-in also has support for Interactive TSO commands, you can read more about this under "),Q=e("Run interactive TSO commands"),B=e(".");function V(N,F){const a=n("RouterLink"),l=n("ExternalLinkIcon");return r(),d(c,null,[w,o("ol",null,[o("li",null,[o("p",null,[E,t(a,{to:"/Docs/interact_zos_cli.html#creating-an-rse-profile"},{default:s(()=>[v]),_:1}),C,t(a,{to:"/Docs/interact_zos_zowe_explorer.html#using-rse-api-in-zowe-explorer"},{default:s(()=>[A]),_:1}),O])]),o("li",null,[o("p",null,[_,o("a",T,[z,t(l)]),y,x,P]),R])]),j,k,o("p",null,[I,t(a,{to:"/Docs/interact_zos_zowe_explorer.html#using-rse-api-in-zowe-explorer"},{default:s(()=>[M]),_:1}),U]),q,o("p",null,[H,t(a,{to:"/Docs/interact_zos_cli.html#run-interactive-tso-commands"},{default:s(()=>[Q]),_:1}),B])],64)}var Z=p(S,[["render",V]]);export{Z as default};
