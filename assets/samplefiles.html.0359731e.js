import{r as t,o as s,a as n,b as e,d as a,w as r,F as l,e as o,c as i}from"./app.3589d79a.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";const p={},u=e("h1",{id:"exploring-the-sample-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exploring-the-sample-files","aria-hidden":"true"},"#"),o(" Exploring the sample files")],-1),m=e("p",null,"Within this documentation we refer to a set of sample files that you can use to explore the editor features. These samples are provided on Github.com.",-1),f=e("h2",{id:"get-the-sample-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#get-the-sample-files","aria-hidden":"true"},"#"),o(" Get the sample files")],-1),S=o("Assuming that you have Git installed as described in the "),b=o("Prerequisites"),g=o(", create a work directory somewhere on your machine and clone the sample repository:"),A=i(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/IBM/zopeneditor-sample.git
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Then open the directory <code>zopeneditor-sample</code> using the <strong>File &gt; Open...</strong> menu. The sample files in this directory will be referred to throughout the rest of the documentation.</p><h2 id="understand-the-git-repository-branches" tabindex="-1"><a class="header-anchor" href="#understand-the-git-repository-branches" aria-hidden="true">#</a> Understand the Git repository branches</h2><p>The sample Git repository contains four branches.</p>`,4),L=e("li",null,"master: provides code and configuration file examples that can be used with the basic IBM Z Open Editor installation obtains from the VS Code Marketplace.",-1),I=e("li",null,"tutorial_complete: extends the examples from the master branch with code changes that you can use to simulate a before and after view of making changes to source code.",-1),T=o("wazi-master: provides additional configuration file examples for commercial extensions to IBM Z Open Editor such as IBM Open Debug or User Build with IBM Dependency-Based Build. The "),E={href:"https://www.ibm.com/docs/en/wdfrhcw",target:"_blank",rel:"noopener noreferrer"},w=o("Knowledge Center on ibm.com"),M=o(" has more details for using these tools and examples."),_=e("li",null,"wazi-tutorial-complete: provides an after-changes-view of the examples in wazi-master with the same advanced configurations files.",-1),y=i('<h2 id="examine-the-sample-files" tabindex="-1"><a class="header-anchor" href="#examine-the-sample-files" aria-hidden="true">#</a> Examine the sample files</h2><p>The sample application consists of the following files:</p><ul><li><p>COBOL programs: <code>SAM1</code>, <code>SAM2</code>, and <code>SAM1LIB</code></p><p><code>SAM1</code> reads in both the <code>CUSTFILE</code> and <code>TRANFILE</code> data files, and then performs different actions on the <code>CUSTFILE</code> based on transactions from the <code>TRANFILE</code>. Valid transactions are <code>ADD</code>, <code>UPDATE</code>, and <code>DELETE</code>. When an <code>UPDATE</code> transaction is processed, <code>SAM1</code> calls <code>SAM2</code> to perform the requested update.</p><p><code>SAM2</code> includes some base code in place for <code>CRUNCH</code> transactions, which can be enhanced using Instructions provided later in this document . At the end of processing the <code>TRANFILE</code>, <code>SAM1</code> generates a report on the transactions processed and produces an updated <code>CUSTFILE</code>.</p><p><code>SAM1LIB</code> is included to demonstrate the editor&#39;s ability to resolve copybooks that are part of a library. It is a copy of <code>SAM1</code> with the exception of the library-based copybooks.</p></li><li><p>Copybooks: <code>CUSTCOPY</code>, <code>REGISTRS</code>, and <code>TRANREC</code></p></li><li><p>Libraries Copybooks: <code>DATETIME</code> (local) and <code>REPTTOTL</code> (MVS). These copybooks demonstrate using the libraries option in a <code>COPY &lt;copybook&gt; IN &lt;library&gt;</code> statement for local and MVS copybooks</p></li><li><p>PL/I programs: <code>PSAM1</code>, <code>PSAM2</code>, and <code>PSAM1LIB</code></p><p><code>PSAM1</code> reads in both the <code>PLI.CUSTFILE</code> and <code>PLI.TRANFILE</code> data files, and then produces a report with customer information and a Totals summary section. Valid transactions are <code>PRINT</code> and <code>TOTALS</code>. A <code>PRINT</code> transaction prints the Customer records to the Customer section of the report. When <code>PSAM1</code> reads in a <code>TOTALS</code> transaction, it generates the Totals Report section. The instructions, provided later in this document, guide you through making the necessary code changes to allow <code>PSAM1</code> to process a new type of Customer record called a Product record and generate a new line for the Service Calls in the Totals Report section.</p><p><code>PSAM1LIB</code> is included to demonstrate the editor&#39;s ability to resolve includes that are part of a library. It is a copy of <code>PSAM1</code> with the exception of the library-based includes.</p></li><li><p>Include files: <code>BALSTATS</code> and <code>CUSTPLI</code></p></li><li><p>Libraries Includes: <code>DATETIME</code> (local) and <code>REPTTOTL</code> (MVS) - these includes demonstrate using the libraries option in an <code>%INCLUDE &lt;library&gt; (&lt;include&gt;);</code> statement for local and MVS includes</p></li><li><p>HLASM programs: <code>ASAM1</code> and <code>ASAM2</code></p><p><code>ASAM1</code> reads the <code>ASM.FILEIN</code> data file and will write out the record number, column number heading records, and the input string to <code>ASM.FILEOUT</code>. Instructions provided later in this document will guide you through making the necessary code changes to have <code>ASAM1</code> call <code>ASAM2</code> which will take the input string, convert it to hexadecimal format and pass it back to <code>ASAM1</code>, which will then write the hex value for the string to the <code>ASM.FILEOUT</code> data file.</p></li><li><p>REXX program: <code>RSAM1</code></p><p><code>RSAM1</code> reads the <code>REXX.FILEIN1</code> and <code>REXX.FILEIN2</code> data files and will write out the records to <code>REXX.FILEOUT</code>. Instructions provided later in this document will guide you through making the necessary code changes to create a new subroutine in <code>RSAM1</code> to have it read through <code>REXX.FILEOUT</code> and display all of the records.</p></li><li><p>JCL members that set up and run the applications: <code>ALLOCATE</code>, <code>RUN</code>, <code>PLIALLOC</code>, <code>RUNPSAM1</code>, <code>ASMALLOC</code>, <code>RUNASAM1</code>, and <code>REXALLOC</code>.</p></li><li><p>Data source files: <code>CUSTFILE</code>, <code>TRANFILE</code>, <code>PLI.TRANFILE</code>, <code>PLI.CUSTFILE</code>, <code>ASM.FILEIN</code>, <code>REXX.FILEIN1</code>, and <code>REXX.FILEIN2</code>.</p></li><li><p>Script Files:</p><ul><li><p><code>zowecli-create-profiles.sh</code> - This shell script will create Zowe CLI RSE and SSH profiles and then set them as the default profiles.</p><ul><li>Parameters necessary to run the script: <ul><li>TSO USER ID and Password</li><li>Z host address</li><li>RSE API port number</li><li>SSH port number</li></ul></li></ul></li><li><p><code>zowecli-cobol-upload-run-simple.sh</code> - This shell script will run the sample COBOL application.</p><ul><li>Submits the JCL to allocate the required MVS datasets</li><li>Uploads the application components from the local directory to the MVS datasets</li><li>Submits the JCL to run the application</li></ul></li><li><p><code>zowecli-cobol-upload-run-tutorial.sh</code> - This shell script will run the sample COBOL application and download the output files.</p><ul><li>Submits the JCL to allocate the required MVS datasets</li><li>Uploads the application components from the local directory to the MVS datasets</li><li>Submits the JCL to run the application</li><li>Downloads the output data files once the JES job is complete</li></ul></li><li><p><code>zowecli-cobol-clean.sh</code> - This shell script will delete the MVS data sets allocated and created during the execution of the sample application.</p></li></ul></li></ul>',3);function C(R,x){const d=t("RouterLink"),c=t("ExternalLinkIcon");return s(),n(l,null,[u,m,f,e("p",null,[S,a(d,{to:"/Docs/getting_started.html#prerequisites"},{default:r(()=>[b]),_:1}),g]),A,e("ul",null,[L,I,e("li",null,[T,e("a",E,[w,a(c)]),M]),_]),y],64)}var v=h(p,[["render",C]]);export{v as default};
