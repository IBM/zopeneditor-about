import{r as i,o as p,a as r,b as e,d as a,w as o,F as l,c as n,e as s}from"./app.405256d5.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const u={},d=n(`<h1 id="setting-file-associations" tabindex="-1"><a class="header-anchor" href="#setting-file-associations" aria-hidden="true">#</a> Setting file associations</h1><p>For local files, IBM Z Open Editor identifies the language of a file opened in the editor based on file extensions in both the default and customized <code>files.associations</code> user settings. This also applies to the include files by using a different user setting; <code>zopeneditor.&lt;language-id&gt;.includeFileExtensions</code>.</p><p>For remote files, as MVS data sets do not have file extensions, IBM Z Open Editor uses <code>zopeneditor.datasets.&lt;language-id&gt;Datasets</code> user settings to configure the editor for MVS data sets.</p><h2 id="local-file-associations" tabindex="-1"><a class="header-anchor" href="#local-file-associations" aria-hidden="true">#</a> Local file associations</h2><h3 id="adding-more-file-associations" tabindex="-1"><a class="header-anchor" href="#adding-more-file-associations" aria-hidden="true">#</a> Adding more file associations</h3><p>IBM Z Open Editor registers itself in VS Code with support for several languages. For each language, it also defines a set of file extensions that by default will be mapped to the registered languages as shown in the table below.</p><table><thead><tr><th>Language</th><th>VS Code Language ID</th><th>Default File Extensions</th></tr></thead><tbody><tr><td>Enterprise COBOL</td><td>cobol</td><td>.cbl .cpy .cob .copy .copybook .cobol .cobcopy</td></tr><tr><td>Enterprise PL/I</td><td>pl1</td><td>.pli .pl1 .pc .pci .plinc .pcx .inc .include</td></tr><tr><td>Z High Level Assembler</td><td>hlasm</td><td>.s .assemble .asm .hla .hlasm .copyasm .macasm .bms .mac .dbd .mfs .pcb</td></tr><tr><td>REXX</td><td>rexx</td><td>.rexx</td></tr><tr><td>JCL</td><td>jcl</td><td>.jcl .cntl .proc</td></tr></tbody></table><p><em>Table 1. IBM Z Open Editor default mapping of languages and file extensions</em></p><p>When you open a file with one of these file extensions in Z Open Editor, then VS Code displays the mapped language in the language selector on the lower-right of the status bar. If you want to temporarily switch the opened editor to any other language available in VS Code, click this bar and enter the wanted language.</p><p>If you want to use a file extension in addition to the defaults for any of these languages, you must define them yourself in the user or workspace settings by using either of the following approaches.</p><ul><li><p>Option 1: Using the VS Code Preferences UI</p><ol><li><p>Click <strong>File &gt; Preference &gt; Settings</strong> and switch to either User or Workspace settings.</p><p>Tip: Switch to Workspace settings if you want to define the mappings locally to the current project and store it in SCM with your programs.</p></li><li><p>In the Search bar at the top type <code>associations</code>. It brings up the VS Code <strong>Files: Associations</strong> setting, which contains a list of the current non-default file associations defined.</p><p>Note: The default associations that are shown in Table 1 are not listed here because they cannot be changed.</p></li><li><p>Click the <strong>Add Item</strong> button to add another entry. It prompts for a <strong>Key</strong>, which is the file extension starting with the symbols <code>*.</code> such as <code>*.cp1</code> and a <strong>Value</strong> entry that is the language identifier as listed in Table 1.</p></li></ol></li><li><p>Option 2: Editing the settings.json file</p><p>As an alternative to using the VS Code Preferences UI, you can also edit the JSON file of the user or workspace settings. The format for local files is:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;files.associations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;*.cp1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cobol&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>You can enter a full glob pattern as keys. With such flexible glob patterns, you can map files to a language by using file extensions and arbitrary substring mappings.</p></li></ul><h3 id="removing-file-associations" tabindex="-1"><a class="header-anchor" href="#removing-file-associations" aria-hidden="true">#</a> Removing file associations</h3><p>If you remove some of the entries there that were added by IBM Z Open Editor at startup, such as <code>&quot;*.COBOL*&quot;: &quot;cobol&quot;,</code>, and save, they might reappear afterward. To prevent that see the details below on managing remote file associations that cause this behavior.</p><p>Before you be able to remove any of the mappings from the <code>files.associations</code>, you must remove them first from the <a href="#remote-file-associations"><strong>Datasets settings</strong></a> and <a href="#defining-include-file-associations"><strong>Include File Extensions settings</strong></a> first. The reason is that IBM Z Open Editor tries to automatically add these two settings into <code>files.associations</code> to support its features.</p><h3 id="defining-include-file-associations" tabindex="-1"><a class="header-anchor" href="#defining-include-file-associations" aria-hidden="true">#</a> Defining include file associations</h3>`,15),h=s("The include files can be on the local file system or located in remote MVS data sets. After you define "),g=s("property groups"),f=s(" to tell IBM Z Open Editor where to look for include files such as COBOL copybooks, for the include files that are stored locally, you must define the default file extensions to identify a valid include file for each language. Without a valid file extension, IBM Z Open Editor cannot find include files and cannot open them correctly for editing."),m=n(`<p>You can customize your own file extensions by using either of the following approaches.</p><ul><li><p>Option 1: Using the VS Code Preferences UI</p><ol><li><p>Click <strong>File &gt; Preference &gt; Settings</strong> and switch to either User or Workspace settings.</p><p>Tip: Switch to Workspace settings if you want to define the mappings locally to the current project and store it in SCM with your programs.</p></li><li><p>On the left of Settings editor expand the <strong>Extensions</strong> group and select the entry <strong>IBM Z Open Editor</strong>.</p></li><li><p>Scroll on the right to see all the different Z Open Editor settings available. There are three settings available for configuring include file extensions:</p><ul><li><strong>Cobol: Include File Extensions</strong></li><li><strong>Hlasm: Include File Extensions</strong></li><li><strong>Pl1: Include File Extensions</strong></li><li><strong>Rexx: Include File Extensions</strong></li></ul><p>Each shows a list of the currently registered file extensions populated with a set of defaults.</p></li><li><p>Click the <strong>Add Item</strong> button and enter the extension with a leading dot-character such as <code>.cp1</code>.</p></li><li><p>Click the <strong>OK</strong> button to save it. You will see that your new extension has also been added automatically to the <code>files.associations</code> setting, which is discussed in <a href="#adding-more-file-associations">file associations</a>.</p></li><li><p>If you remove an extension from the list, IBM Z Open Editor will not currently remove it from the <code>files.associations</code> however. You need to remove it there yourself.</p></li></ol></li><li><p>Option 2: Editing the settings.json file</p><p>As an alternative to using the VS Code Preferences UI, you can also edit the following properties in the JSON file of the user or workspace settings.</p><ul><li><code>zopeneditor.cobol.includeFileExtensions</code></li><li><code>zopeneditor.hlasm.includeFileExtensions</code></li><li><code>zopeneditor.pl1.includeFileExtensions</code></li><li><code>zopeneditor.rexx.includeFileExtensions</code></li></ul><p>An example could be the following that adds <code>.mac</code> and <code>.cpysrc</code> to the default set of HLASM include file extensions:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;zopeneditor.hlasm.includeFileExtensions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;.s&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.assemble&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.asm&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.hlasm&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.hla&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.mac&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;.cpysrc&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul>`,2),b=s("Once configured, IBM Z Open Editor can find include files with these new extensions in the locations as specified in property groups. When you open these files, they can be correctly opened in the editor as include files for the assigned language. This also means for COBOL and PL/I the files will be correctly parsed as include files rather than full program files. See "),k=s("here"),y=s(" for more details on the specific differences."),q=n(`<h2 id="remote-file-associations" tabindex="-1"><a class="header-anchor" href="#remote-file-associations" aria-hidden="true">#</a> Remote file associations</h2><h3 id="using-the-z-open-editor-datasets-setting" tabindex="-1"><a class="header-anchor" href="#using-the-z-open-editor-datasets-setting" aria-hidden="true">#</a> Using the Z Open Editor datasets setting</h3><p>IBM Z Open Editor integrates with and provides advanced capabilities for Zowe Explorer to edit program files from remote z/OS locations. You can, for example, find your COBOL programs in Zowe Explorer&#39;s MVS explorer and the open them directly from there for editing in IBM Z Open Editor. However, MVS data sets do not have file extensions, which are essential for VS Code to identify the language of file opened in the editor. Therefore, IBM Z Open Editor uses <code>zopeneditor.datasets</code> settings to configure the editor for MVS.</p><p>Within the family of <code>zopeneditor.datasets</code> VS Code settings defined by IBM Z Open Editor, you can specify name patterns for MVS data sets that are expected to contain COBOL, PL/I, or HLASM programs, copybooks, include files, and JCL. After configuration, when you open members of these data sets by using Zowe Explorer in the editor, they are considered the designated type of file. IBM Z Open Editor recognized file types by mapping your customized <code>zopeneditor.datasets</code> settings to VS Code <code>files.associations</code> settings.</p><p>You can edit the name patterns for MVS data sets by using either of the following approaches:</p><ul><li><p>Option 1: Using the VS Code Preferences UI</p><ol><li><p>Click <strong>File &gt; Preference &gt; Settings</strong> and switch to either User or Workspace settings.</p><p>Tip: Switch to Workspace settings if you want to define the mappings locally to the current project and store it in SCM with your programs.</p></li><li><p>On the left of Settings editor expand the <strong>Extensions</strong> group and select the entry <strong>IBM Z Open Editor</strong>.</p></li><li><p>Scroll on the right to see all the IBM Z Open Editor settings available. There are four settings available for configuring data set names:</p><ul><li><strong>Datasets: Cobol Datasets</strong></li><li><strong>Datasets: Hlasm Datasets</strong></li><li><strong>Datasets: Jcl Datasets</strong></li><li><strong>Datasets: Pl1 Datasets</strong></li><li><strong>Datasets: Rexx Datasets</strong></li></ul><p>Each shows a list of the currently registered names populated with a set of defaults.</p></li><li><p>Click the <strong>Add Item</strong> button to add new name pattern to the list.</p><p>Tip: As you see in the list of defaults, it is a good idea to include dots to make the mappings to MVS data set names less ambiguous.</p></li><li><p>Click the <strong>OK</strong> button to save it. You will see that your new name has also been added with an additional <code>*</code> wildcard at the end automatically to the <code>files.associations</code> setting, which is discussed in <a href="#adding-more-file-associations">file associations</a>.</p></li><li><p>If you remove an entry from the list, IBM Z Open Editor will not currently remove it from the <code>files.associations</code> however. You need to remove it there yourself afterward.</p></li></ol></li><li><p>Option 2: Editing the settings.json file</p><p>As an alternative to using the VS Code Preferences UI, you can also edit the family of <code>zopeneditor.dataset</code> properties in the JSON file of the user or workspace settings.</p></li></ul><p>After editing the settings file, when you open any member of <code>IBMUSER.SAMPLE.COBOL</code> in MVS, the content will open in a COBOL editor. The same process applies to PL/I, HLASM, REXX, and JCL files. These are the default values that you can customize in the settings:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;zopeneditor.datasets.cobolDatasets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;.COBOL&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.COB&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.COBCOPY&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.COPYBOOK&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.COPY&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;zopeneditor.datasets.jclDatasets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;.JCL&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;zopeneditor.datasets.pl1Datasets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;.PL1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.PLI&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.INC&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.INCLUDE&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;zopeneditor.datasets.hlasmDatasets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;.ASM&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.ASSEMBLE&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.HLASM&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.HLA&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.MACLIB&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;zopeneditor.datasets.rexxDatasets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;.EXEC&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.REXX&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;.REXXINC&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="using-the-vs-code-files-associations-setting" tabindex="-1"><a class="header-anchor" href="#using-the-vs-code-files-associations-setting" aria-hidden="true">#</a> Using the VS Code files.associations setting</h3><p>Alternatively, you can directly specify an array of associations native to VS Code instead of using the <code>&quot;zopeneditor.dataset&quot;</code> property above, which computes the VS Code associations for you.</p><p>The format for these mapping has changed since Z Open Editor v5 with Zowe Explorer v3. Data sets opened with Zowe Explorer are now opened in memory using the Zowe Explorer virtual filesystem. This file system has a different path structure for data set members than traditional file references. The path includes the Zowe profile name and begins with a Zowe resource-specific scheme. Additionally, instead of including the member in the filename, the member name is added as a new path segment (ex: <code>zowe-ds:/rse/PDS.NAME/MEMBER</code>).</p><p>The patterns in <code>files.associations</code> must be adjusted to account for this new format. <code>**/*{QUALIFIER}*{,/*}</code> will match to any sequential data set or data set member containing the provided qualifier. For example, these patterns match to the same data sets as above:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;files.associations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;**/*COBOL*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cobol&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*COPY*{,/*}*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cobol&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*PLI*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pl1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*INCLUDE*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pl1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*JCL*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jcl&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*ASM*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hlasm&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*REXX*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rexx&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;**/*REXXINC*{,/*}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rexx&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,13),w=s("When you edit and save files opened with Zowe Explorer, the updated contents can be automatically written back to MVS when you save. You need to enable the ability to save back with the setting "),x=e("code",null,"zopeneditor.zowe.readonlyRemoteIncludeFiles",-1),E=s(" first. See section "),v=s("zopeneditor.zowe settings explained"),O=s(" for details. When you quit the editor, Zowe Explorer will delete all temporary files for your source code security."),C=n(`<p>If you are still on Z Open Editor v4.x and Zowe Explorer v2 then data sets opened with Zowe Explorer will be downloaded to temporary, on-disk storage. For sequential data sets, the downloaded data set&#39;s filename will be the name of the dataset. For members, the format of the filename will be <code>PDS.NAME(MEMBER)</code>. You can specify a data set qualifier with a leading and trailing asterisk as a glob pattern to match data sets containing that qualifier to a language. For example:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;files.associations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;*.COBOL*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cobol&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.COPY*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cobol&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.PL1*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pl1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.INCLUDE*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pl1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.JCL*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jcl&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.ASM*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hlasm&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.REXX*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rexx&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.REXXINC*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rexx&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,2);function S(I,M){const t=i("RouterLink");return p(),r(l,null,[d,e("p",null,[h,a(t,{to:"/Docs/setting_propertygroup.html"},{default:o(()=>[g]),_:1}),f]),m,e("p",null,[b,a(t,{to:"/Docs/knownissues.html#language-specific-features-and-limitations"},{default:o(()=>[k]),_:1}),y]),q,e("p",null,[w,x,E,a(t,{to:"/Docs/interact_zos_zopeneditor.html#zopeneditor-zowe-settings-explained"},{default:o(()=>[v]),_:1}),O]),C],64)}var B=c(u,[["render",S]]);export{B as default};
