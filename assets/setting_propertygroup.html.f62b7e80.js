import{r,o as i,a as l,b as s,d as n,w as o,F as c,c as a,e}from"./app.f6cb3ed9.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/mvs-connection-test-flow-chart.48c3078a.png";const h={},m=a(`<h1 id="setting-property-groups" tabindex="-1"><a class="header-anchor" href="#setting-property-groups" aria-hidden="true">#</a> Setting property groups</h1><p>Property groups are required to define how the COBOL, PL/I, HLASM, and REXX editors search for copybooks and/or includes when you edit a program. Without loading these the language servers used by Z Open Editor will not be able to parse the programs correctly and show many syntax errors that are due to the missing definitions contained in these files. Property Groups can also be used to specify language-specific compiler options.</p><p>To define a property group in your <a href="zapp">ZAPP file</a>, you can use the VS Code snippets provided by Z Open Editor and then fill in the details. Specify if the file is a <code>syslib</code> include file or part of a library, then provide an array of potential local or remote locations to search in. These locations can be absolute, relative, or GLOB file patterns for a local directory path or MVS data set names to be searched on your z/OS system.</p><p>Here is an example for a COBOL property group from a ZAPP file that defines a local search path for copybooks as well as remote and local location for library files. All these location will be search in oder top-down:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cobol<span class="token punctuation">-</span>copybooks
    <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
    <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/COPYBOOK&quot;</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;projectA/copy&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> IBMUSER.SAMPLE.COPYLIB
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/COPYLIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Z Open Editor watches all the folders that match to locations of the type &quot;local&quot; on your development machine. If files in these folders are changed, added, or deleted, Z Open Editor will re-evaluate based on that change. For example, if the editor has an opened program that finds an included COBOL copybook in the local folder that matches the &quot;projectA/copy&quot; location in the snippet above and finds that copybook was deleted, then the editor will try searching for this copybook in other locations immediately. The editor will do this again in the given order top-down. It might then find the copybook in the &quot;mvs&quot; location &quot;IBMUSER.SAMPLE.COPYLIB&quot; and load and use that version of the copybook instead.</p><p>This next example defines a property group for PL/I with a typical compiler option to be used to map the EBCDIC NOT symbol, which does not exist in ASCII, to a common character usable in VS Code:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pl1<span class="token punctuation">-</span>includes
  <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
  <span class="token key atrule">compilerOptions</span><span class="token punctuation">:</span> <span class="token string">&quot;not(!),margins(2,100)&quot;</span>
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;**/INCLUDES&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,8),b=e("As you can see in the examples above, you need to specify a unique name for each property group, which is the only mandatory property. The name can "),y=e("help with troubleshooting"),g=e(" as the VS Code output view shows information about which property groups are being searched and in what order."),k=a('<p>The sections below explain in-depth how to fully leverage certain properties within a property group object.</p><h2 id="language-scoping" tabindex="-1"><a class="header-anchor" href="#language-scoping" aria-hidden="true">#</a> Language scoping</h2><p>You can optionally define a property group scoped to a specific enterprise language in case you have applications that utilize multiple languages. Use Ctrl+Space (Windows and Mac) in the VS Code editor to see the list of valid language values, which currently includes <code>cobol</code>, <code>pl1</code>, <code>hlasm</code>, <code>rexx</code>, and <code>jcl</code>.</p>',3),f=e("When you specify a language, you can also define compiler options that impact the editor. For example, you can specify PL/I codepage options of mapping special characters to operators, such as a "),_=s("code",null,"!",-1),v=e(" character to the "),w=s("code",null,"NOT",-1),L=e(" operator, as seen in the example above. Another use case would be to specify the margins to be used for your PL/I programs. As shown in the property group example "),O=s("code",null,"pl1-includes",-1),I=e(" above, multiple options should be listed in one string separated by commas. If you have more than one property group for a language, the compilerOptions strings will be concatenated. Note that the options apply globally to all files that open in that language within the scope of your workspace. Therefore, it is valid to add a property group specifically for defining global compiler options, which could consist simply of the "),C=s("code",null,"name",-1),E=e(", "),S=s("code",null,"language",-1),q=e(", and "),x=s("code",null,"compilerOptions",-1),B=e(" properties. For more details, see "),M=e("Setting compiler options page"),A=e("."),P=a('<h2 id="syslib-and-libraries" tabindex="-1"><a class="header-anchor" href="#syslib-and-libraries" aria-hidden="true">#</a> Syslib and libraries</h2><h3 id="syslib" tabindex="-1"><a class="header-anchor" href="#syslib" aria-hidden="true">#</a> Syslib</h3><p>Use the name <code>syslib</code> for a <code>libraries</code> item in a ZAPP property group to resolve the following types of statements:</p><ul><li><code>COPY &lt;COPYBOOK_NAME&gt;</code> (COBOL and HLASM)</li><li><code>%INCLUDE &lt;INCLUDE_NAME&gt;</code> (PL/I)</li><li><code>/*%INCLUDE &lt;INCLUDE_NAME&gt; */</code> (REXX)</li></ul><p>For the value of <code>locations</code>, provide an array of directory path names (for local property groups) or data set names (for mvs property groups) for IBM Z Open Editor to find includes. You can provide multiple paths to resolve includes in different folders. For local <code>libraries</code> items, you can specify a path relative to the workspace in which the ZAPP file is located or an absolute path on your development machine.</p><h3 id="libraries" tabindex="-1"><a class="header-anchor" href="#libraries" aria-hidden="true">#</a> Libraries</h3><p>Use a custom name for a <code>libraries</code> item setting to resolve the following types of statements (substitute <code>&lt;LIBRARY_NAME&gt;</code> with the name you specify for te item):</p><ul><li><code>COPY &lt;COPYBOOK_NAME&gt; IN &lt;LIBRARY_NAME&gt;</code> (COBOL)</li><li><code>%INCLUDE &lt;LIBRARY_NAME&gt; (&lt;INCLUDE_NAME&gt;)</code> (PL/I)</li><li><code>/*%INCLUDE &lt;LIBRARY_NAME&gt;(&lt;INCLUDE_NAME&gt;) */</code> (REXX)</li></ul><p>You can provide multiple library items within the <code>libraries</code> array of a property group. Each library item in the <code>libraries</code> array consists of the following properties:</p><ul><li>The <strong><code>name</code></strong> property must match the library name used in the program. For example, to resolve the library reference in the COBOL statement <code>COPY COPYFILE IN MYLIB</code>, the value of <code>name</code> must be <code>&quot;MYLIB&quot;</code>.</li><li>The <strong><code>type</code></strong> property can be either <code>local</code> or <code>mvs</code> specifying if the <code>locations</code> provided are local search path entires or MVS data sets.</li><li>The <strong><code>locations</code></strong> property is an array of either directory or data set names for the associated library name.</li></ul><h2 id="mvs-property-groups-using-zowe-profiles" tabindex="-1"><a class="header-anchor" href="#mvs-property-groups-using-zowe-profiles" aria-hidden="true">#</a> MVS property groups using Zowe profiles</h2>',11),N=e("If you have Zowe CLI or Zowe Explorer configured on your development machine, "),D=s("code",null,"libraries",-1),Y=e(" items of type "),z=s("code",null,"mvs",-1),U=e(" will try to resolve copybooks referenced in COBOL programs using your Zowe RSE or z/OSMF service profiles. We cover the details for how to define such profiles in "),Z=e("Setting up integrations to interact with z/OS"),F=e("."),R=a('<p>Once you have created such a profile that has direct access to the MVS data sets listed in the property groups, the COBOL editor will try to look for copybooks in the <code>syslib</code> and library locations provided. During MVS remote file resolving, IBM Z Open Editor employs an MVS connection test that validates the authentication method being used (Figure 1). If a JWT is not located in the service profile or base profile, then basic authentication with username and password will be attempted.</p><ul><li>If the username and password are not saved in the profile, IBM Z Open Editor will prompt you for credentials.</li><li>In the event that a <code>401: Not Authorized</code> error message is returned from the MVS connection test, IBM Z Open Editor prompts you with an option to update your credentials for the remainder of your IDE session. Cancelling the credential update will turn off MVS remote file resolving for the duration of your IDE session or until you refresh the profile status via the command palette option <code>IBM Z Open Editor: Reload Zowe Profiles</code>. If you choose to update your credentials, you will also have the option to save them to the profile&#39;s local file for future use.</li></ul><p><img src="'+d+'" alt="Fig.1: MVS connection test flow chart"></p><p><em>Figure 1: MVS connection test flow chart</em></p>',4),T=e("If you have defined multiple Zowe profiles of the types "),V=s("code",null,"zosmf",-1),Q=e(" or "),W=s("code",null,"rse",-1),G=e(", then the editor will use the default profiles to determine which of your profiles to use. If you want the editor to pick a different profile instead, you can specify the profile in the "),K=s("code",null,"zopeneditor.zowe",-1),X=e(),H=e("User Settings"),j=e("."),J=a('<h2 id="setting-ibm-z-open-editor-property-groups-using-glob-patterns-relative-path-and-absolute-path-local-files-only" tabindex="-1"><a class="header-anchor" href="#setting-ibm-z-open-editor-property-groups-using-glob-patterns-relative-path-and-absolute-path-local-files-only" aria-hidden="true">#</a> Setting IBM Z Open Editor property groups using glob patterns, relative path, and absolute path (Local files only)</h2><p>IBM Z Open Editor supports glob patterns, relative path patterns, and absolute path patterns for local files in order to provide <code>locations</code> items. Below are some examples about adding property groups using glob patterns, relative path, and absolute path for local files. Note, that currently there is no wildcard support for MVS data set names. These have to match exactly.</p><h3 id="glob-patterns" tabindex="-1"><a class="header-anchor" href="#glob-patterns" aria-hidden="true">#</a> Glob patterns</h3><p>Glob patterns can have the following syntax:</p><ul><li><code>?</code> to match on one character in a path segment</li><li><code>*</code> to match one or more characters in a path segment</li><li><code>**</code> to match any number of path segments.</li></ul>',5),$=e("Refer to "),ee={href:"https://github.com/isaacs/minimatch",target:"_blank",rel:"noopener noreferrer"},se=e("minimatch glob patterns documentation"),ne=e(" for more information."),ae=a(`<p>An example using basic glob patterns for Windows and Mac:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cobol<span class="token punctuation">-</span>copybooks
  <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;zopeneditor-sample/**&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;zopeneditor-sample/**/COPYFILES&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYFILE
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;zopeneditor-sample/**/COPY*&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;zopeneditor-sample/**/INCLUD?LIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Some things to note:</p><ul><li><strong>Windows:</strong> Only use forward slashes (<code>/</code>) in glob expressions. Though windows uses either <code>/</code> or <code>\\</code> as its path separator, only <code>/</code> characters are used by this glob implementation. You must use only forward slashes in glob expressions. Backslashes will always be interpreted as escape characters, not path separators.</li><li><strong>Performance warning</strong>: Using glob expressions can have an impact on the time it takes for Z Open Editor to find included files if it has to search through hundreds of local file directories. Revise the search pattern to match the lowest number of folders as possible in order to increase performance for finding copybooks and included files.</li></ul><h3 id="relative-path-patterns" tabindex="-1"><a class="header-anchor" href="#relative-path-patterns" aria-hidden="true">#</a> Relative path patterns</h3><p>IBM Z Open Editor property group locations can be path patterns relative to the root of the workspace. You want to avoid patterns that point outside of the workspace as these might be different for every developer that you are sharing your ZAPP file with. This is also important for multi-root workspaces: you do not want to reference files from another workspace. Instead, each workspace can have its own ZAPP file and the property groups of all workspaces get concatenated in the order in which the workspaces have been listed in the multi-root&#39;s <code>.code-workspace file</code>.</p><h3 id="absolute-path-patterns" tabindex="-1"><a class="header-anchor" href="#absolute-path-patterns" aria-hidden="true">#</a> Absolute path patterns</h3><p>IBM Z Open Editor supports absolute path patterns for <code>locations</code> items.</p><p><strong>Windows</strong>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cobol<span class="token punctuation">-</span>copybooks
  <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;C:\\\\Users\\\\&lt;username&gt;\\\\Desktop\\\\zopeneditor-sample\\\\COPYBOOK&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;C:/Users/&lt;username&gt;/Desktop/zopeneditor-sample/INCLUDES&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYFILE
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;C:/Users/&lt;username&gt;/Desktop/zopeneditor-sample/COPYLIB&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;C:\\\\Users\\\\&lt;username&gt;\\\\Deskto\\\\zopeneditor-sample\\\\INCLUDELIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>Mac</strong>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cobol<span class="token punctuation">-</span>copybooks
  <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
  <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;/Users/&lt;username&gt;/Desktop/zopeneditor-sample/COPYBOOK&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;/Users/&lt;username&gt;/Desktop/zopeneditor-sample/INCLUDES&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYFILE
      <span class="token key atrule">type</span><span class="token punctuation">:</span> local
      <span class="token key atrule">locations</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;/Users/&lt;username&gt;/Desktop/zopeneditor-sample/COPYLIB&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;/Users/&lt;username&gt;/Desktop/zopeneditor-sample/INCLUDELIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="enforcing-case-sensitive-file-name-matching" tabindex="-1"><a class="header-anchor" href="#enforcing-case-sensitive-file-name-matching" aria-hidden="true">#</a> Enforcing case-sensitive file name matching</h3><p>Starting from IBM Z Open Editor 1.2.0, file names to be matched via local <code>libraries</code> items are case-insensitive by default. For example, if you have a local copybook file named <code>book1.cpy</code> in a workspace folder specified by a local property group, then the COBOL statement <code>COPY BOOK1.</code> would still resolve the file, even on a case-sensitive operating system such as Linux or Macs using a case-sensitive disk format. In earlier versions of Z Open Editor, this was strictly case-sensitive on case-sensitive operating systems.</p><p>Although this new behavior provides more flexibility for users who create copybooks and include files in lowercase, it could lead to problems in a team where members use different operating systems or switch from VS Code to Eclipse Che. For example, on a case-sensitive operating system files could be created in the same folder that are only different in their casing, such as <code>Book1</code> and <code>BOOK1</code>, but this would cause problems on case-insensitive file systems such as Windows. Therefore, to enforce exact case matching, you can enable the user setting <code>&quot;zopeneditor.enforceCaseSensitiveIncludeFileNames&quot;</code>, which by default is <code>false</code>. Setting it to <code>true</code> means that even on Windows the exact same casing of the file name as specified in the program&#39;s code is required. This applies to COBOL, PL/I, and HLASM.</p><p><strong>Note:</strong> This behavior also applies to the path names specified in property groups, which are case-insensitive by default, but can be made case-sensitive with this setting. However, this currently only works on Windows and Mac. On Linux and therefore Eclipse Che the property group path names are always cases-sensitive. Only the file names on the file system are matched case-insensitive when configured that way on Linux.</p><h3 id="sqlca-and-sqlda-includes-copybooks" tabindex="-1"><a class="header-anchor" href="#sqlca-and-sqlda-includes-copybooks" aria-hidden="true">#</a> SQLCA and SQLDA includes/copybooks</h3>`,17),te=e("A COBOL or PL/I program can be written to use the "),oe={href:"https://www.ibm.com/docs/en/db2/11.5?topic=tables-sqlca-sql-communications-area",target:"_blank",rel:"noopener noreferrer"},pe=e("SQL communication area (SQLCA)"),re=e(" and "),ie={href:"https://www.ibm.com/docs/en/db2/11.5?topic=tables-sqlda-sql-descriptor-area",target:"_blank",rel:"noopener noreferrer"},le=e("SQL descriptor area (SQLDA)"),ce=e(" to check return status for embedded SQL statements, or the program can use the SQL diagnostics area to check return status."),ue=s("p",null,"SQLCA and SQLDA includes are usually in-built and not added in the zopeneditor property groups. In IBM Z Open Editor, SQLCA and SQLDA copybooks are excluded from the searches because they do not exist, or because they are not of interest for development. It will not find these copybooks from the mentioned syslib or libraries in the property groups.",-1);function de(he,me){const t=r("RouterLink"),p=r("ExternalLinkIcon");return i(),l(c,null,[m,s("p",null,[b,n(t,{to:"/Docs/locating_local_client_logs.html#troubleshooting-using-log-files"},{default:o(()=>[y]),_:1}),g]),k,s("p",null,[f,_,v,w,L,O,I,C,E,S,q,x,B,n(t,{to:"/Docs/setting_compiler_options.html"},{default:o(()=>[M]),_:1}),A]),P,s("p",null,[N,D,Y,z,U,n(t,{to:"/Docs/setup_integration.html"},{default:o(()=>[Z]),_:1}),F]),R,s("p",null,[T,V,Q,W,G,K,X,n(t,{to:"/Docs/interact_zos_zopeneditor.html"},{default:o(()=>[H]),_:1}),j]),J,s("p",null,[$,s("a",ee,[se,n(p)]),ne]),ae,s("p",null,[te,s("a",oe,[pe,n(p)]),re,s("a",ie,[le,n(p)]),ce]),ue],64)}var ge=u(h,[["render",de]]);export{ge as default};
