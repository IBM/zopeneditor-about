import{r as t,o as r,a as p,b as e,d as n,F as l,e as a,c as o}from"./app.fd142dbe.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=e("h1",{id:"cobol-pl-i-preprocessor-tutorial",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cobol-pl-i-preprocessor-tutorial","aria-hidden":"true"},"#"),a(" COBOL, PL/I Preprocessor tutorial")],-1),d=a("The "),h={href:"https://github.com/ibm/zopeneditor-sample/tree/wazi-main/preprocessor",target:"_blank",rel:"noopener noreferrer"},m=a("Z Open Editor sample"),k=a(" Git repository contains configuration and program files to try the COBOL and PL/I Preprocessor support available in Z Open Editor. It contains examples for custom preprocessors written in Java as well as REXX that you can easily build and execute."),b=o('<p>After you complete this tutorial, you can write and use your own preprocessor in a similar way by replacing the command line and parameters in the configuration files shown here.</p><p>To use the Z Open Editor Preprocessor feature and these examples, you must have a unexpired trial or activation key listed in the Welcome page.</p><h2 id="review-the-zapp-file-and-create-zapp-user-or-workspace-variables" tabindex="-1"><a class="header-anchor" href="#review-the-zapp-file-and-create-zapp-user-or-workspace-variables" aria-hidden="true">#</a> Review the ZAPP file and create ZAPP user or workspace variables</h2><ol><li><p>Open the sample ZAPP file, <code>zapp.yaml</code>, and find the <code>local-cobol</code> or <code>local-pli</code> preprocessor profile. It references three variables used to execute the preprocessor: <code>${javaHome}</code>, <code>${workspace}</code>, and <code>${HLQ}</code>. The first two are automatically computed by Z Open Editor. For <code>${HLQ}</code>, a placeholder is provided in the sample workspace settings file located in <code>.vscode/settings.json</code>.</p></li><li><p>Open the file, then choose one of the following options:</p><ol><li>Replace the value with your HLQ, or</li><li>(Recommended) Move the variable to your user settings, since it is specific to your local setup, or</li><li>Replace the variable in the ZAPP profiles shown earlier with a concrete value.</li></ol></li></ol><h2 id="local-preprocessor-examples" tabindex="-1"><a class="header-anchor" href="#local-preprocessor-examples" aria-hidden="true">#</a> Local preprocessor examples</h2><h3 id="prepare-the-sample-preprocessor-program" tabindex="-1"><a class="header-anchor" href="#prepare-the-sample-preprocessor-program" aria-hidden="true">#</a> Prepare the sample preprocessor program</h3>',6),g=e("li",null,[a("To use the sample preprocessor you need to build it using Java. The folder "),e("code",null,"preprocessor/<COBOL|PLI>/local-preprocessor"),a(" contains a Java Maven project that you can use to build it by running "),e("code",null,"mvn package"),a(" from that folder.")],-1),f=a("Alteratively, use the "),y={href:"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack",target:"_blank",rel:"noopener noreferrer"},P=a("Extension Pack for Java"),v=a(" to build it from VS Code (Java and Maven required in your path)."),O=o(`<p>Local COBOL profile sample :</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> local<span class="token punctuation">-</span>cobol
        <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
        <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
        <span class="token key atrule">location</span><span class="token punctuation">:</span> local
        <span class="token key atrule">settings</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
            &quot;\${javaHome}/bin/java&quot; -jar \${workspace}/preprocessor/COBOL/local-preprocessor/target/local-cobol-preprocessor-1.0-SNAPSHOT.jar {input_file} \${output_file}</span>
          <span class="token key atrule">outputPath</span><span class="token punctuation">:</span> ./preprocessor/output
          <span class="token key atrule">fileExtension</span><span class="token punctuation">:</span> cee
          <span class="token key atrule">environmentVariables</span><span class="token punctuation">:</span>
            <span class="token key atrule">some</span><span class="token punctuation">:</span> var
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Local PL1 profile sample :</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> local<span class="token punctuation">-</span>pli
        <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
        <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
        <span class="token key atrule">location</span><span class="token punctuation">:</span> local
        <span class="token key atrule">settings</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
            \${javaHome}/bin/java -jar \${workspace}/preprocessor/PLI/local-preprocessor/target/local-pl1-preprocessor-1.0-SNAPSHOT.jar \${input_file} \${output_file}</span>
          <span class="token key atrule">outputPath</span><span class="token punctuation">:</span> ./preprocessor/output
          <span class="token key atrule">fileExtension</span><span class="token punctuation">:</span> pci
          <span class="token key atrule">environmentVariables</span><span class="token punctuation">:</span>
            <span class="token key atrule">some</span><span class="token punctuation">:</span> var
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Note the location of the <code>outputPath</code> setting in the profile, which points to the directory <code>preprocessor/output</code>. This is the folder where the preprocessed programs are generated.</p><h3 id="running-the-local-preprocessor-from-z-open-editor" tabindex="-1"><a class="header-anchor" href="#running-the-local-preprocessor-from-z-open-editor" aria-hidden="true">#</a> Running the local preprocessor from Z Open Editor</h3><p>Now you are ready to run the preprocessor on our sample programs.</p><ol><li><p>Open either the file <code>preprocessor/COBOL/PrintApp.cbl</code> or <code>preprocessor/PLI/PrintApp.cbl</code>. You see that Z Open Editor shows many syntax errors as it contains macros such as <code>+ID</code>, <code>+DD</code> and so on. The sample preprocessor replaced them with valid COBOL or Pl/I code during its execution to enable our COBOL or PL/I language server to parse them.</p></li><li><p>Right-click inside the editor and select &quot;Execute local preprocessor command&quot;.</p></li><li><p>A progress bar opens and as a result all the syntax errors goes away. If something goes wrong, check the log output for error messages in the VS Code Output view under the Z Open Editor drop-down value.</p></li><li><p>You can now hover over the preprocessor macros and see the code in a hover that has been created to replace them. For example, the <code>+ID.</code> COBOL statement shows has a hover that show the replacement with <code>IDENTIFICATION DIVISION.</code>. The PL/I <code>+DL</code> statement shows a replacement with <code>DECLARE</code>.</p></li><li><p>Open the generated output file <code>preprocessor/output/PrintApp.cee</code> in the editor. You see the file generated by the preprocessor, which is a valid COBOL or PL/I program. The Z Open Editor language server uses that program file to parse for errors and overlay the results to the original program.</p></li><li><p>Go back to <code>preprocessor/COBOL/PrintApp.cbl</code> or <code>preprocessor/PLI/PrintApp.pli</code> and select &quot;Compare preprocessor input and output files&quot; from the context menu. It is presented in VS Code&#39;s Diff editor that shows you the two files and their differences side by side.</p></li><li><p>Open you user settings and find <code>zopeneditor.autoPreprocessor</code>. From the drop-down select <code>all</code>. Switch back to the editor and make changes to the sample program. You might see syntax errors if you use the macros in your statements. However, when you save the program, you can see that the preprocessor is executed automatically and the errors related to the macros go away. Examine the other drop-down values for when the preprocessor should be triggered.</p></li></ol><h2 id="remote-preprocessor-example" tabindex="-1"><a class="header-anchor" href="#remote-preprocessor-example" aria-hidden="true">#</a> Remote preprocessor example</h2><h3 id="review-the-zapp-file-and-prepare-your-data-sets" tabindex="-1"><a class="header-anchor" href="#review-the-zapp-file-and-prepare-your-data-sets" aria-hidden="true">#</a> Review the ZAPP file and prepare your data sets</h3><p>To run the remote preprocessor example that performs on z/OS\xAE, ensure that you have created a Zowe Explorer profile for RSE API or z/OSMF and made it your default using the <code>zopeneditor.zowe&quot;: {&quot;profile-name&quot;}</code> user setting. The profile name should be displayed in the status bar of the editor. Note, that for z/OSMF you must also define a TSO Zowe CLI profile as the REXX preprocessor example is executed using TSO. For RSE API profiles this is not required as RSE API has a TSO interface built-in.</p><ol><li><p>Open the samples ZAPP file, <code>zapp.yaml</code> and find the <code>remote-cobol</code> or <code>remote-pli</code> preprocessor profile defined there. It references several data set names and the <code>\${HLQ}</code> variable.</p></li><li><p>Either replace the variable with your high-level qualifier or define a ZAPP variable in your user or workspace settings as described above.</p></li></ol><p>Remote COBOL profile sample :</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remote<span class="token punctuation">-</span>cobol
  <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
  <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
  <span class="token key atrule">location</span><span class="token punctuation">:</span> mvs
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">commandDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC(CBLPRPC)
    <span class="token key atrule">tempDataHLQ</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>
    <span class="token key atrule">outputDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.OUTPUT()
    <span class="token key atrule">commandParameters</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Remote PL1 profile sample :</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remote<span class="token punctuation">-</span>pli
  <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
  <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
  <span class="token key atrule">location</span><span class="token punctuation">:</span> mvs
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">commandDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC(PLIPRPC)
    <span class="token key atrule">tempDataHLQ</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>
    <span class="token key atrule">outputDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.OUTPUT()
    <span class="token key atrule">commandParameters</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="3"><li><p>Create a PDSE for <code>commandDataSet</code> and <code>outputDataSet</code>. You can use the suggested names from the ZAPP or create them using other names and update the ZAPP profile with these names.</p></li><li><p>You also need to create or reuse an existing PDSE for the COBOL sample program <code>preprocessor/COBOL/PrintApp.cbl</code>, such as <code>\${HLQ}.PREPROC.COBOL</code> and the equivalent for PL/I. It must have the words <code>COBOL</code> or <code>CBL</code> (<code>PLI</code> or <code>PL1</code>) in its name, so Z Open Editor uses its default file associations to open the file with the COBOL language server. The sample preprocessor creates a temporal sequential data set using your HLQ and delete it after completion.</p></li><li><p>Use Zowe Explorer to upload the REXX sample preprocessor program <code>preprocessor/remote-preprocessor/CBLPRPC.rexx</code> to the <code>commandDataSet</code> you created in the previous step.</p></li><li><p>Upload the <code>preprocessor/COBOL/PrintApp.cbl</code> to the PDSE you have created for it in the previous step, such as <code>\${HLQ}.PREPROC.COBOL</code>. For Pl/I use the equivalent files.</p></li></ol><h3 id="running-the-remote-preprocessor-from-z-open-editor" tabindex="-1"><a class="header-anchor" href="#running-the-remote-preprocessor-from-z-open-editor" aria-hidden="true">#</a> Running the remote preprocessor from Z Open Editor</h3><ol><li><p>Open the <code>PRINTAPP</code> program through Zowe Explorer and ensure that it is recognized as a COBOL or PL/I program that shows you syntax highlighting, an outline view, and so on. If your PDSE does not contain the keywords required, then you can click the status bar in VS Code to select <code>COBOL</code> as the language to use for this file. The sample program is not processed yet, so it shows syntax errors.</p></li><li><p>Right-click inside the editor and select &quot;Execute remote preprocessor command&quot;. A progress bar opens and as a result all the syntax errors go away. If the result is not as expected, check the log output for error messages in the VS Code Output view under the Z Open Editor drop-down value.</p></li><li><p>You can now hover over the preprocessor macros and see the code that is used to replace them in a hover. For example the <code>+ID.</code> statement shows in the hover that it is replaced with <code>IDENTIFICATION DIVISION.</code>.</p></li><li><p>Open the generated output file that is created in the <code>outputDataSet</code> in the editor. You see the file generated by the preprocessor, which is a valid COBOL program. The Z Open Editor language server uses that program file to parse for errors and overlay the results to the original program.</p></li><li><p>Open you user settings and find <code>zopeneditor.autoPreprocessor</code>. From the drop-down select <code>all</code>. Switch back to the editor and make changes to the sample program. You might see syntax errors if you use the macros in your statements. However, when you save the program you can see that the preprocessor is executed automatically and the errors related to the macros go away. Examine the other drop-down values for the preprocessor to be triggered and select the one that fits your needs.</p></li></ol><h2 id="remote-preprocessor-for-local-files-example" tabindex="-1"><a class="header-anchor" href="#remote-preprocessor-for-local-files-example" aria-hidden="true">#</a> Remote preprocessor for local files example</h2><h3 id="review-the-remote-zapp-profile-and-prepare-your-data-sets-with-programdataset" tabindex="-1"><a class="header-anchor" href="#review-the-remote-zapp-profile-and-prepare-your-data-sets-with-programdataset" aria-hidden="true">#</a> Review the remote ZAPP profile and prepare your data sets with programDataSet</h3><p>You can also run a remote preprocessor on files that you edit locally, for example as part of your Git repository. The Z Open Editor uploads the program file you are currently editing to a dedicated PDSE, execute the preprocessor on z/OS and then fetch the output file back to the local file system.</p><ol><li><p>To run the remote preprocessor example on local files, ensure that the <a href="#remote-preprocessor-example">Remote preprocessor example</a> works as expected.</p></li><li><p>Review the ZAPP file and find the profiles <code>remote-cobol</code> or <code>remote-pli</code>.</p></li><li><p>Uncomment the last line with the <code>programDataSet</code> property with the location where the local file is uploaded.</p></li><li><p>Create such a PDSE and provide the value for this property. You can use the suggested names from the ZAPP file or create them using other names and update the ZAPP profile with these names.</p></li></ol><p>Remote COBOL profile sample:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remote<span class="token punctuation">-</span>cobol
  <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
  <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
  <span class="token key atrule">location</span><span class="token punctuation">:</span> mvs
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">commandDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC(CBLPRPC)
    <span class="token key atrule">tempDataHLQ</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>
    <span class="token key atrule">outputDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.OUTPUT()
    <span class="token key atrule">commandParameters</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">programDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.COBOL()
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Remote PL1 profile sample:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remote<span class="token punctuation">-</span>pli
  <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
  <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
  <span class="token key atrule">location</span><span class="token punctuation">:</span> mvs
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">commandDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC(PLIPRPC)
    <span class="token key atrule">tempDataHLQ</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>
    <span class="token key atrule">outputDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.OUTPUT()
    <span class="token key atrule">commandParameters</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">programDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.COBOL()
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="running-the-remote-preprocessor-for-local-files-from-z-open-editor" tabindex="-1"><a class="header-anchor" href="#running-the-remote-preprocessor-for-local-files-from-z-open-editor" aria-hidden="true">#</a> Running the remote preprocessor for local files from Z Open Editor</h3><ol><li><p>Open either the file <code>preprocessor/COBOL/PrintApp.cbl</code> or <code>preprocessor/PLI/PrintApp.cbl</code>. You see that Z Open Editor shows many syntax errors as it contains macros such as <code>+ID</code>, <code>+DD</code> and so on. The sample preprocessor replaced them with valid COBOL or Pl/I code during its execution to enable our COBOL or PL/I language server to parse them.</p></li><li><p>Right-click inside the editor and select &quot;Execute remote preprocessor command for local file&quot;.</p></li><li><p>A progress bar opens and as a result all the syntax errors go away. You can now hover over the preprocessor macros and see the code that is used to replace them in a hover. For example the <code>+ID.</code> statement shows in the hover that it is replaced with <code>IDENTIFICATION DIVISION.</code>.</p></li><li><p>Open the generated output file that is created in the <code>outputDataSet</code> in the editor. You see the file generated by the preprocessor, which is a valid COBOL program. The Z Open Editor language server uses that program file to parse for errors and overlay the results on the original program with macros in the editor.</p></li></ol><h2 id="expanding-pl-i-macros-using-a-remote-preprocessor" tabindex="-1"><a class="header-anchor" href="#expanding-pl-i-macros-using-a-remote-preprocessor" aria-hidden="true">#</a> Expanding PL/I macros using a remote preprocessor</h2><p>To expand the PL/I macros using remote preprocessor, ensure that you have created a Zowe Explorer profile for RSE API or z/OSMF and made it your default using the using the <code>zopeneditor.zowe&quot;: {&quot;profile-name&quot;}</code> user setting.</p><ol><li><p>Open the samples ZAPP file and find the <code>remote-pli-macro</code> preprocessor profile defined there. As the first preprocessor profile gets picked up on the basis of language and location, make sure the profile you want to run is ordered under the preprocessor section or you can comment out the other preprocessor profiles.</p></li><li><p>It references several data set names and a <code>HLQ</code> variable. Either replace the variable with your high-level qualifier or define a ZAPP variable in your user or workspace settings.</p></li><li><p>Also comment out the PL/I property groups that were defined for the PSAM example as these do not work with the preprocessor example.</p></li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> remote<span class="token punctuation">-</span>pli<span class="token punctuation">-</span>macro
  <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
  <span class="token key atrule">type</span><span class="token punctuation">:</span> preprocessor
  <span class="token key atrule">location</span><span class="token punctuation">:</span> mvs
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">commandDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.SFELSAMP(FEKRNPLI)
    <span class="token key atrule">tempDataHLQ</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>
    <span class="token key atrule">outputDataSet</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.PREPROC.OUTPUT()
    <span class="token key atrule">commandParameters</span><span class="token punctuation">:</span> &lt;SYSPRINT<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>HLQ<span class="token punctuation">}</span>.LOG.OUTPUT()&lt;/SYSPRINT<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li><p>Create a PDSE for <code>commandDataSet</code> with PL/I macro preprocessor <code>preprocessor/PLI/remote-preprocessor/FEKRNPLI.rexx</code> as a member in it, and <code>outputDataSet</code>. You can use the suggested names from the ZAPP or create them using other names and update the ZAPP profile with these names.</p></li><li><p>To append the <code>&lt;SYSPRINT&gt;</code> tag in the XML use <code>commandParameters</code> in the ZAPP profile. To create the <code>SYSPRINT</code> data set <code>\${HLQ}.LOG.OUTPUT()</code> use following data set attributes:</p></li></ol><div class="language-ascii ext-ascii line-numbers-mode"><pre class="language-ascii"><code>    Record Format (recfm): VBA
    Record Length (lrecl): 137
    Dataset Type (dsntp): LIBRARY
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="6"><li><p>In <code>FEKRNPLI.rexx</code> you need to replace the <code>&quot;.V6R1M0.SIBMZCMP(IBMZPLI)&quot;</code> from <code>compiler = compiler_hlq||&quot;.V6R1M0.SIBMZCMP(IBMZPLI)&quot;</code> in line <code>82</code> with the PL/I compiler in your current z/OS\xAE system.</p></li><li><p>You also need to create or reuse an existing PDSE for the PL/I sample program <code>PLI/CITYCODE.pli</code>, such as <code>\${HLQ}.PREPROC.PLI</code>. It must have the words <code>PLI</code> or <code>PL1</code> in its name, so Z Open Editor uses its default file associations to open the file with the PL/I language server. The sample preprocessor creates a temporal sequential data set using your HLQ and deletes it after completion.</p></li><li><p>Open the <code>CITYCODE</code> program through Zowe Explorer and ensure that it is recognized as a PL/I program that shows you syntax highlighting, an outline view, and so on. If your PDSE does not contain the keywords required then you can click the status bar in VS Code to select <code>PL/I</code> as the language to use for this file. If the sample program is not processed, it shows syntax errors.</p></li><li><p>Right-click inside the editor and select &quot;Execute remote preprocessor command&quot;.</p></li><li><p>A progress bar opens and as a result all the syntax errors go away. You can now hover over the preprocessor macros and see the code that is used to replace them in a hover. For example the macro statements including <code>%</code> is resolved and removed. For example in the <code>CITYCODE.pli</code> file from line <code>14</code> to <code>16</code> which are macros are removed. Similarly, other macro statements get resolved.</p></li></ol><div class="language-ascii ext-ascii line-numbers-mode"><pre class="language-ascii"><code> %DCL USE CHAR;
 %USE = &#39;FUN&#39; /* FOR SUBROUTINE, %USE = &#39;SUB&#39; */ ;
 %IF USE = &#39;FUN&#39; %THEN %DO;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Note:</strong> Using this sample result in a RC=12 from the PL/I compiler even though it does produce a valid output file. This is expected and it means the preprocessor is successfully finished.</p>`,38);function L(w,x){const s=t("ExternalLinkIcon");return r(),p(l,null,[u,e("p",null,[d,e("a",h,[m,n(s)]),k]),b,e("ol",null,[g,e("li",null,[f,e("a",y,[P,n(s)]),v])]),O],64)}var R=c(i,[["render",L]]);export{R as default};
