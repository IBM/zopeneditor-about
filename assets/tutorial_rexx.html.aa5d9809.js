import{r,o as s,a as c,b as t,d as o,w as n,F as l,e,c as d}from"./app.82dac713.js";import{_ as h}from"./createbranch.c5e1488b.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const u={},g=t("h1",{id:"rexx-editing-tutorial",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#rexx-editing-tutorial","aria-hidden":"true"},"#"),e(" REXX editing tutorial")],-1),m=t("h2",{id:"about-this-tutorial",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#about-this-tutorial","aria-hidden":"true"},"#"),e(" About this tutorial")],-1),f=e("For the tutorial, you will assume the role of a REXX developer who has received a requirement to enhance the output from "),y=t("code",null,"RSAM1",-1),_=e(" to display the contents of the output file which is a combination of the two input files. The current version simply reads in two files and writes the records to an output file. The RSAM application is located at "),w={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},b=e("https://github.com/IBM/zopeneditor-sample"),v=e("."),x=t("h2",{id:"prerequisites",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#prerequisites","aria-hidden":"true"},"#"),e(" Prerequisites")],-1),k=e("Install IBM Z Open Editor and its prerequisites such as Java as described in "),S=e("Getting Started"),C=e("."),I=d(`<h2 id="procedure" tabindex="-1"><a class="header-anchor" href="#procedure" aria-hidden="true">#</a> Procedure</h2><ol><li><p>To enhance the report, you need to import the source code of the sample application first.</p><ul><li><p>In VS Code, click <strong>Terminal</strong> &gt; <strong>New Terminal</strong> to open a terminal.</p></li><li><p>In the terminal window, navigate to the desired directory for the source code by entering, for example:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cd /c/Users/Public
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>To clone the source code from the Git repository, enter the git repository of the provided sample files:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git clone https://github.com/IBM/zopeneditor-sample.git
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>After the clone is completed, click <strong>File</strong> &gt; <strong>Open Folder</strong>. Then, in the Open Folder window, select the <code>C:/Users/Public/zopeneditor-sample</code> directory that you cloned, and then click <strong>Select Folder</strong>. The folder is now opened in the Explorer view on the left of VS Code.</p><p>The current sample application consists of a REXX program, <code>RSAM1</code>, and JCL to set up the application files (<code>REXALLOC</code>), and the datasource files (<code>FILEIN1</code> and <code>FILEIN2)</code>.</p><p><code>RSAM1</code> reads in the <code>FILEIN1</code> data file and writes the records to the <code>FILEOUT</code> datafile. It then reads in <code>FILEIN2</code> and writes the records to <code>FILEOUT</code>.</p></li></ul></li><li><p>(Optional) As you view the source in VS Code, you can use the Outline view to efficiently explore and navigate the code of the program. Note that the Outline view can be used only after you have opened a file or program in VS Code.</p><p>If the Outline view is not already expanded, you can open it by clicking <strong>View</strong> &gt; <strong>Open view</strong> &gt; <strong>Outline</strong>. By looking through the items in this view, you can get an idea of what the program does at a high level.</p><p>Note: The REXX Outline view only shows internal routines. <code>RSAM1.rexx</code> is a simple program to use in the editing tutorial so only two internal routines show up in the Outline view.</p></li><li><p>(Optional) In the <code>RSAM1.rexx</code> file, you will see code syntax highlighting in the opened file, which helps you quickly distinguish between comments, strings, constants, variables, keywords, labels, functions, comparison, and arithmetic.</p><p>Unrecognized statements and expressions are highlighted in red, with which you can make quick corrections accordingly and reduce compile errors. To see all the syntax errors in the open files, click <strong>View</strong> &gt; <strong>Problems</strong> or click the error and warning icon at the bottom in the status bar. Click the list item to directly go to the problem.</p></li><li><p>Modify the code in the <code>RSAM1.rexx</code> file to add a new internal routine <code>fileout</code>, which will read through <code>FILEOUT</code> and display each record that is in the file.</p><p>For example, place your cursor on line 42 and hit the Enter key to begin a new line on line 43. Begin typing the command <code>CALL fileout</code>, and as you type, you can select from the lists of code completion suggestions that appear. You will also see a pop-up that displays the name of the command and the format of the command.</p></li><li><p>(Optional) The hover feature works on REXX keyword instructions. You can hover over a keyword to see its definition and format.</p></li><li><p>(Optional) The editor can show you all references of a variable or internal routine in your code. When you double-click a variable or internal routine name to highlight the entire name and then right-click it, you can see the following available actions:</p><ul><li><p>Click <strong>Find All References</strong>: Alt+Shift+F12 (Windows) or Option+Shift+F12(Mac)</p><p>A Results References view for the variable or paragraph is displayed on the left side of the screen. Click any result to go to that location in the file.</p></li><li><p>Click <strong>Peek References</strong>: Shift+F12 (Windows and Mac)</p><p>A Results References view is displayed in the CodeLens box underneath the variable or paragraph. Click any result to go to that location in the file.</p></li></ul></li><li><p>Open the integrated Git in VS Code, and create an isolated branch called <code>display-fileout-content</code>, where no one but yourself can access the source code before you push the changes to the origin repository.</p><p>To create the branch:</p><ol><li>In VS Code on the lower left hand corner, click <img src="`+h+'" alt="create branch">.</li><li>Then, from the drop-down menu that is displayed at the top of VS Code, click <strong>Create new branch</strong>.</li><li>Specify a branch name of <code>display-fileout-content</code>, and then press enter to confirm. The workspace is switched to the isolated <code>display-fileout-content</code> branch now.</li></ol></li><li><p>Commit your changes into your <code>display-fileout-content</code> branch.</p><p>Now that you have performed various code changes and refinements you can commit this file version of the application to the SCM to preserve and share it.</p><p>To commit your changes, click the Source Control icon on the left of VS Code. In the Source Control panel that opens, the changed program is listed in the CHANGES section. In the CHANGES section, hover on the <code>RSAM1.rexx</code> program name and click the <strong>Stage changes (+)</strong> icon to move your changes to the staging area. In the Message text box, enter a comment for the changes such as <code>Display fileout content</code>, and then click the <strong>Commit</strong> icon to commit your changes.</p></li></ol>',2),R=e("Congratulations on completing the tutorial. For a more comprehensive list of the available features for code editing, see "),T=e("Making REXX code changes"),E=e("."),O=e("The RSE CLI plug-in also has support for Interactive TSO commands, you can read more about this under "),F=e("Run interactive TSO commands"),A=e(".");function L(M,N){const a=r("ExternalLinkIcon"),i=r("RouterLink");return s(),c(l,null,[g,m,t("p",null,[f,y,_,t("a",w,[b,o(a)]),v]),x,t("ol",null,[t("li",null,[k,o(i,{to:"/Docs/getting_started.html"},{default:n(()=>[S]),_:1}),C])]),I,t("p",null,[R,o(i,{to:"/Docs/editor_codechanges_rexx.html"},{default:n(()=>[T]),_:1}),E]),t("p",null,[O,o(i,{to:"/Docs/interact_zos_cli.html#run-interactive-tso-commands"},{default:n(()=>[F]),_:1}),A])],64)}var q=p(u,[["render",L]]);export{q as default};
