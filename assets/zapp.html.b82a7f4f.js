import{r,o as l,a as p,b as s,d as n,w as i,F as c,e,c as t}from"./app.1362f0f1.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";var d="/zopeneditor-about/assets/zapp-variables-problems-view.bc232006.png";const h={},f=s("h1",{id:"configuring-your-applications-with-zapp-files",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#configuring-your-applications-with-zapp-files","aria-hidden":"true"},"#"),e(" Configuring your applications with ZAPP files")],-1),m=s("p",null,"Using ZAPP (Z APPlication) files is a new approach for simplifying how developers and teams of developers can configure their application code for editing in IBM Z\xAE Open Editor. As VS Code settings only provide limited support for editing highly structured data, typing JSON structures is highly error prone, as well as users in the past got easily confused managing the many settings for all the extensions installed into VS Code all in one central place, we decided to introduce a new configuration file specifically for z/OS Enterprise applications.",-1),b=s("p",null,'Additionally, storing metadata about your application structure and configuration as a file alongside your source code leads to a "Configuration as code" model, which enables the configuration to be versioned and automatically shared between developers working on the same product.',-1),y=s("p",null,[e("IBM created the new notion for ZAPP files that describe your application in an independent representation, as YAML files as well as alternatively JSON. This file can be managed with your source code in an SCM and can be used by various editors and command-line tools in the future. This makes it possible for common, application specific configuration settings, such as property groups, to be reused outside of VS Code and used with other editors or IDEs, as well as even for command-line operations for building your programs and other similar use cases. The vision is for ZAPP files to become as useful for z/OS\xAE Enterprise Applications as Maven POM (Project Object Models) are for Java\u2122 or "),s("code",null,"package.json"),e(" files are for Node.js.")],-1),g=s("h2",{id:"zapp-use-cases",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#zapp-use-cases","aria-hidden":"true"},"#"),e(" ZAPP use cases")],-1),k=s("p",null,"This early version of ZAPP is intended to provide a first impression to some of the ideas and to gather feedback. ZAPP files can currently be used to specify the following configurations:",-1),w=s("strong",null,"Property Groups for finding local or remote include files",-1),_=e(" providing a complete alternative to settings described in the section "),v=e("Setting property groups"),P=e("."),A=s("li",null,[s("strong",null,"Property Groups for defining language-specific compiler options"),e(" that impact how the IBM\xAE language servers interpret source code.")],-1),S=s("strong",null,"Code pages mappings for RSE API",-1),x=e(" defining mappings for file name patterns to how they should be uploaded to and downloaded from MVS, which is fully documented in the section "),z=e("MVS EBCDIC code pages and mappings files"),B=e("."),M=s("strong",null,"User build",-1),O=e(" for building your programs currently edited in Z Open Editor remotely with the IBM Dependency Based Build offering. (You can find detailed documentation for this feature in "),Z={href:"https://www.ibm.com/docs/en/developer-for-zos/16.0?topic=code-building-cobol-pli-hlasm-programs-user-build",target:"_blank",rel:"noopener noreferrer"},q=e("IBM Documentation"),I=e(")."),C=s("strong",null,"Preprocessor support",-1),E=e(" to specify command lines for executing a preprocessor in the background and integrating the output with the editor. See more details in "),Y=e("Advanced Capabilities: Preprocessor support"),L=e("."),T=s("li",null,[s("strong",null,"Test case specification"),e(" utilized by IBM's z/OS test automation tools portfolio.")],-1),R=s("h2",{id:"getting-started-with-zapp-files",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getting-started-with-zapp-files","aria-hidden":"true"},"#"),e(" Getting started with ZAPP files")],-1),V=e("When you open a COBOL, PL/I, HLASM, REXX, or JCL program for the first time from a VS Code workspace and you do not have a ZAPP file, Z Open Editor will automatically create a "),D=s("code",null,"zapp.yaml",-1),N=e(" file for you to specify a so-called property group that defines where include files can be found. The file will be located in the top-level folder of your workspace. If you are using "),j={href:"https://code.visualstudio.com/docs/editor/multi-root-workspaces",target:"_blank",rel:"noopener noreferrer"},U=e("multi-root workspaces"),H=e(", you can find it in your first workspace, as listed in your "),F=s("code",null,".code-workspace",-1),G=e(" file. You can move the file to any other of your workspaces, but it must be located in the top-level folder. In case of multi-root workspaces, this file will instruct Z Open Editor to search all directories in all your workspaces for the include files. For very large workspaces, the searching can slow down the editor's performance. Therefore, you are encouraged to edit the file after its creation to narrow down the location of the include files as described in "),J=e("Setting property groups"),W=e("."),$=t("<p>The top-level folder is the directory that typically contains your .git directory if you are using Git, and/or the top-level directory that you would open in VS Code with <strong>File &gt; Open...</strong>. This directory typically contains your .vscode directory in which your workspace settings can be stored. Previously, this directory was also the home for property groups and user build settings that now need to be stored in ZAPP files instead. In case of a multi-root workspace setup, each workspace can have a ZAPP file and they can be used in combination with each other; for example, the include files defined in the ZAPP file of one workspace can be used by program files in another. See the details in the respective sections.</p><p>You can disable the automatic creation of the ZAPP file by setting <code>zopeneditor.zapp.generateZappOnDemand</code> to <code>false</code>. You can manually create a ZAPP file in your development workspace by going to <strong>File &gt; New Text File</strong>.</p><p>You can choose to edit your ZAPP file as a YAML file or as a JSON file and create a file with either of the following names in your top-level directory. The file must be named exactly like that to enable YAML or JSON editors to recognize the schema to be used for validation.</p><ul><li><code>zapp.yaml</code></li><li><code>zapp.json</code></li></ul>",4),X=e("If you decide to use YAML, which is the recommended format as it easier to write than JSON, you are suggested to install the "),K={href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"},Q=e("Red Hat YAML VS Code Extension"),ee=e(". This VS Code extension provides code completion, documentation, and formatting features, which are useful for ZAPP. Z Open Editor can recognize the installation of the Red Hat YAML extension automatically and configure the ZAPP schema for this extension in your VS Code user settings. Note, if you also have the Red Hat Ansible VS Code extension installed make sure that the language selected in VS Code for the ZAPP files is YAML and not Ansible, as both use the file extensions .yml and .yaml and you have tell the editor, which language is being edited."),se=s("p",null,"In addition, code snippets for ZAPP in YAML are provided, which makes you productive instantaneously. If you use JSON, the default VS Code JSON editor also provides code completion and formatting, but currently there are no snippets included in Z Open Editor. However, you could create your own custom snippets.",-1),ne=e("When Z Open Editor starts up it checks if the Red Hat YAML extension is installed. If it is, the editor will add links to the ZAPP JSON schema that is used for the YAML editor for validation automatically. If this extension is not installed, Z Open Editor will only add a schema link to the JSON editor. To verify that Z Open Editor has configured itself to work with the Red Hat YAML extension or VS Code JSON, look for entries as shown below in your VS Code user settings. The entries should be added after opening Z Open Editor. There might be other schema entries listed here such as the links to Z Open Editor's "),ae=e("zcodeformat"),te=e(" schema or schemata used by third party extensions."),oe=t(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;yaml.schemas&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;file:///Users/user1/.vscode/extensions/ibm.zopeneditor-5.0.0/resources/zapp-schema-1.3.0.json&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;zapp.yaml&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;json.schemas&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;fileMatch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;/zapp.json&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file:///Users/user1/.vscode/extensions/ibm.zopeneditor-5.0.0/resources/zapp-schema-1.3.0.json&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>You are now ready to create your first ZAPP file.</p><h2 id="configure-zapp-files-with-user-setting-variables" tabindex="-1"><a class="header-anchor" href="#configure-zapp-files-with-user-setting-variables" aria-hidden="true">#</a> Configure ZAPP files with user setting variables</h2><p>ZAPP files support variable substitution. You can define variables inside VS Code settings and use those variables inside a ZAPP file. This is useful when a ZAPP file is shared in a repository and users need to make personal adjustments to it without modifying the original ZAPP file.</p><p>To define ZAPP user variables, open your VS Code user or workspace settings and specify names with values under <code>zopeneditor.zapp.variables</code>. You can do this in the graphical editor using a table. Search for &quot;zapp&quot; to quickly find it and click <strong>Add Item</strong> to insert a new row for your variable. Alternatively, you can add and edit variables in the JSON representation of the settings as shown in the following example:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token property">&quot;zopeneditor.zapp.variables&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;PERSONAL_DIR&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/Users/user1/copybooks&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;USER&quot;</span><span class="token operator">:</span> <span class="token string">&quot;IBMUSER&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To reference ZAPP variables, write <code>\${variable-name}</code> in your ZAPP file. For example:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  - name<span class="token operator">:</span> cobol-copybooks
    language<span class="token operator">:</span> cobol
    libraries<span class="token operator">:</span>
      - name<span class="token operator">:</span> syslib
        type<span class="token operator">:</span> local
        locations<span class="token operator">:</span>
          - <span class="token string">&quot;**/\${PERSONAL_DIR}&quot;</span>
      - name<span class="token operator">:</span> syslib
        type<span class="token operator">:</span> mvs
        locations<span class="token operator">:</span>
          - <span class="token string">&quot;\${USER}.SAMPLE.COPY&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Note that all users need to define all the variables in their user settings that are used by the ZAPP file to avoid errors. Do not use single or double-quote characters for variable names and values. You can place these properties in VS Code user as well as workspace settings.</p><p>Hovering over a valid ZAPP variable will show its value from the user or workspace settings in a tooltip. ZAPP variables that are either misspelled or missing from the settings are highlighted in the editor and appear as warning messages in the Problems view.</p><p><img src="`+d+'" alt="Fig.1: ZAPP File Problems View"></p><h2 id="precedence-of-zapp-files" tabindex="-1"><a class="header-anchor" href="#precedence-of-zapp-files" aria-hidden="true">#</a> Precedence of zapp files</h2><p>Within a workspace Z Open Editor searches for ZAPP files in the following order and uses only the first one it finds:</p><ol><li><code>zapp.yaml</code> in the workspace directory.</li><li><code>zapp.json</code> in the workspace directory.</li></ol><h2 id="single-root-versus-multi-root-workspaces" tabindex="-1"><a class="header-anchor" href="#single-root-versus-multi-root-workspaces" aria-hidden="true">#</a> Single-root versus multi-root workspaces</h2><p>There is limited support for ZAPP files for multi-root workspaces with these rules:</p><ul><li>Property Groups: the multi-root workspace loads all the zapp files located in the top-directory of each workspace. Z Open Editor will use all the property groups defined in these ZAPP files in the order of the workspaces as they were defined in the multi-root workspace&#39;s <code>.code-workspace</code> file. You can manually edit this file to change the order. This order is also the order in which workspaces are presented in VS Code&#39;s Files Explorer. So property groups are used top to bottom.</li><li>Dependency Based User Build: For the program being built the ZAPP file that is located at the root of the same workspace in which the program is located is being used for the DBB profile to be used. All the location specified in that DBB profile for additional dependencies, such as application-conf files, need to be in the same workspace as the program. Include files such as copybooks can be located in any other workspace as they are searched in all available property groups as defined in the previous bullet point.</li></ul>',17),ie=e("See our "),re={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},le=e("Sample GitHub repository"),pe=e(" for more details and examples for single-root workspaces, in the "),ce=s("code",null,"wazi-main",-1),ue=e(" branch as well as multi-root in the "),de=s("code",null,"multiroot",-1),he=e(" folder of the "),fe=s("code",null,"wazi-main",-1),me=e(" branch."),be=s("h2",{id:"a-zapp-file-example",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#a-zapp-file-example","aria-hidden":"true"},"#"),e(" A ZAPP file example")],-1),ye=s("p",null,"You can get started with ZAPP by cloning our sample GitHub repository that contains a ZAPP file at",-1),ge={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},ke=e("https://github.com/IBM/zopeneditor-sample"),we=e("."),_e=t(`<p>This repository contains the following settings files so you can try it with YAML or JSON and decide which works best for you:</p><ul><li>A <code>zapp.yaml</code> file</li><li>A <code>zapp-example.json</code> file</li></ul><p>There are two different version of these files in the branches <code>main</code> and <code>wazi-main</code>. If you are using other IBM Wazi capabilities such as IBM User Build switch to the <code>wazi-main</code> branch instead.</p><p><strong>Note</strong>: According to the <a href="#precedence-of-zapp-files">precedence rules</a> stated in the previous section, if you want to try the <code>zapp-example.json</code> file, you must first delete or rename the <code>zapp.yaml</code> file and then rename it to <code>zapp.json</code>.</p><h3 id="property-groups-example" tabindex="-1"><a class="header-anchor" href="#property-groups-example" aria-hidden="true">#</a> Property Groups example</h3><p>The <code>zapp.yaml</code> file contains the following:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> sam
<span class="token key atrule">description</span><span class="token punctuation">:</span> Wazi&#39;s code samples with COBOL<span class="token punctuation">,</span> PL/I<span class="token punctuation">,</span> HLASM<span class="token punctuation">,</span> and REXX applications
<span class="token key atrule">version</span><span class="token punctuation">:</span> 3.0.0
<span class="token key atrule">author</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> IBM CORPORATION

<span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cobol<span class="token punctuation">-</span>copybooks
    <span class="token key atrule">language</span><span class="token punctuation">:</span> cobol
    <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/COPYBOOK&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
        <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;IBMUSER.SAMPLE.COBCOPY&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> IBMUSER.SAMPLE.COPYLIB
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/COPYLIB-MVS&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYFILE
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/COPYLIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>`,7),ve=e("If you look further in the file it defines five property groups, one for each of the five languages supported by Z Open Editor. The first, shown above, is for the COBOL samples in this Git repository. See the details for property groups in "),Pe=e("Setting property groups"),Ae=e("."),Se=s("h3",{id:"rse-mappings-example",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rse-mappings-example","aria-hidden":"true"},"#"),e(" RSE Mappings example")],-1),xe=e("At the end of the zapp.yaml file you also find an example for an RSE Mapping that is documented in "),ze=e("MVS EBCDIC code pages and mappings files"),Be=e(". You can see that is was listed as an entry of the type "),Me=s("code",null,"rseapi",-1),Oe=e(" in the "),Ze=s("code",null,"profiles",-1),qe=e(" section, which indicates an extension to the ZAPP core properties that are defined for special and optional tool capabilities such RSE API or User Build."),Ie=t(`<div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">profiles</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RSE<span class="token punctuation">-</span>Mappings
    <span class="token key atrule">type</span><span class="token punctuation">:</span> rseapi
    <span class="token key atrule">settings</span><span class="token punctuation">:</span>
      <span class="token key atrule">mappings</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token string">&quot;**.SAMPLE.COB**&quot;</span>
          <span class="token key atrule">extension</span><span class="token punctuation">:</span> cbl
          <span class="token key atrule">transfer</span><span class="token punctuation">:</span> text
          <span class="token key atrule">encoding</span><span class="token punctuation">:</span> IBM<span class="token punctuation">-</span><span class="token number">037</span>
          <span class="token key atrule">memberMappings</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">extension</span><span class="token punctuation">:</span> dat
              <span class="token key atrule">transfer</span><span class="token punctuation">:</span> binary
              <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token string">&quot;*DAT&quot;</span>
        <span class="token punctuation">-</span> <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token string">&quot;**PLI*&quot;</span>
          <span class="token key atrule">extension</span><span class="token punctuation">:</span> pl1
          <span class="token key atrule">transfer</span><span class="token punctuation">:</span> text
          <span class="token key atrule">encoding</span><span class="token punctuation">:</span> IBM<span class="token punctuation">-</span><span class="token number">037</span>
      <span class="token key atrule">default.encoding</span><span class="token punctuation">:</span> IBM<span class="token punctuation">-</span><span class="token number">037</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="user-build-profile-example" tabindex="-1"><a class="header-anchor" href="#user-build-profile-example" aria-hidden="true">#</a> User Build profile example</h3>`,2),Ce=e("If you are working in the "),Ee=s("code",null,"wazi-main",-1),Ye=e(" branch you will find in-between the property groups and the RSE mapping two profile entries of the type "),Le=s("code",null,"dbb",-1),Te=e(". The first is an example for specifying a user build with IBM Dependency Based Build (DBB) version 3's new "),Re={href:"https://www.ibm.com/docs/en/dbb/3.0?topic=building-zos-applications-zbuilder",target:"_blank",rel:"noopener noreferrer"},Ve=e("zBuilder"),De=e(". The second profile is an example, for how to use DBB version 2 (or newer) with Groovy build scripts provided by the "),Ne={href:"https://github.com/IBM/dbb-zappbuild",target:"_blank",rel:"noopener noreferrer"},je=e("zAppBuild"),Ue=e(" Github repository."),He=t(`<p>Here is an example for a DBB v3 profile:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">profiles</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zBuilder<span class="token punctuation">-</span>userbuild
    <span class="token key atrule">type</span><span class="token punctuation">:</span> dbb
    <span class="token key atrule">settings</span><span class="token punctuation">:</span>
      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;$DBB_HOME/bin/dbb build&quot;</span>
      <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span> user
      <span class="token key atrule">lifecycleArgs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--hlq \${dbbHlq}&quot;</span>
      <span class="token key atrule">additionalDependencies</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;dbb-app.yaml&quot;</span>
      <span class="token key atrule">logFilePatterns</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;\${buildFile.basename}-*.log&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;BuildReport.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,2),Fe=e("The details for these profiles for User Build are documented in the "),Ge={href:"https://www.ibm.com/docs/en/developer-for-zos/16.0?topic=code-setting-up-user-build",target:"_blank",rel:"noopener noreferrer"},Je=e("Setting up the user build"),We=e("."),$e=t('<h2 id="editing-the-zapp-yaml-file-with-code-completion" tabindex="-1"><a class="header-anchor" href="#editing-the-zapp-yaml-file-with-code-completion" aria-hidden="true">#</a> Editing the zapp.yaml file with code completion</h2><p>Code completion requires that you have the Red Hat VS Code YAML extension installed and configured as outlined above. You can try it out as follows:</p><ol><li>Place your cursor behind the line with <code>language: cobol</code> (around Line 18) and press Enter to start a new line.</li><li>Press Ctrl+Space to open up the code completion drop-down.</li></ol><p>It then shows one property that was not yet used in this property group, <code>compilerOptions</code>, that could still be added here. You can add it by simply clicking the item or you the keyboard&#39;s arrow and return keys.</p><p>The same will also work with property values if they are enumeration types or boolean.</p><ol><li>Move the cursor at the end of the line <code>type: local</code> (around Line 21).</li><li>Delete the word <code>local</code> and do another Ctrl+Space.</li></ol><p>It now shows you the two allowed options <code>local</code> and <code>mvs</code> in the drop-down that you can choose from.</p><p>You also see in the drop-down various code snippets that could be inserted here. However, you see that properties are listed context-sensitive, i.e. the drop-down only shows entries that are allowed to be inserted here. Code snippets are not context sensitive and will always be displayed. You need to make sure you use them syntactically correct. The YAML editor extension will tell you with syntax errors when you insert incorrectly.</p><h2 id="editing-the-zapp-yaml-file-with-property-group-code-snippets" tabindex="-1"><a class="header-anchor" href="#editing-the-zapp-yaml-file-with-property-group-code-snippets" aria-hidden="true">#</a> Editing the zapp.yaml file with property group code snippets</h2><p>ZAPP also provides code snippets so that you can enter new property groups rapidly. The code snippets are only available in the code editor when you edit a <code>zapp.yaml</code> file. You will not find them in the VS Code Snippets gallery, because VS Code currently cannot distinguish between different YAML file types in their snippet gallery.</p><p>To use these code snippets:</p><ol><li>Place your cursor at the empty line at the end of the property groups in the file (around Line 85).</li><li>Press Ctrl+Space and you will see four code snippets listed in the drop-down.</li><li>Navigate down and select <code>ZAPP Remote MVS Property Groups</code> by pressing the Enter key.</li><li>You can see that a new property group is inserted with highlighted placeholders.</li><li>Before clicking or typing anything else, while the placeholders are still highlighted, use the Tab and Shift+Tab keys to navigate between the placeholders and enter values for name, language (using another drop down), and syslib entries.</li><li>At the end of the new property group, add another <code>locations</code> entry by adding a new line and entering a new value such as <code>- USER1.SAMPLE.INCLUDES</code>.</li></ol><p>Remember that you need to provide a valid YAML file. As the <code>locations</code> entry requires a string array in JSON, it now needs to be entered in YAML as an ordered list using <code>-</code> for each value.</p><p>There is also a code snippet template for a complete ZAPP file. You can try it out as follows:</p><ol><li>In the current editor window for <code>zapp.yaml</code>, do a Select-All and delete all the contents of the file. You can withdraw the deletion later as the file is managed in Git.</li><li>In the first line and column of the empty document, press Ctrl+Space and select the <code>ZAPP Template</code> snippet. Instead of scrolling all the way to the bottom, you can type that snippet name instead.</li><li>You see that a snippet was inserted that contains general properties at the top as well as one property group with a local libraries entry. You can then modify as needed or add more property group entries using the respective snippets.</li></ol><h2 id="editing-the-zapp-yaml-file-with-user-build-code-snippets" tabindex="-1"><a class="header-anchor" href="#editing-the-zapp-yaml-file-with-user-build-code-snippets" aria-hidden="true">#</a> Editing the zapp.yaml file with User Build code snippets</h2>',16),Xe=e("You can specify all the workspace settings for a user build in ZAPP files as documented in "),Ke={href:"https://www.ibm.com/docs/en/developer-for-zos/16.0?topic=code-setting-up-user-build",target:"_blank",rel:"noopener noreferrer"},Qe=e("Setting up the user build"),es=e(". User settings are still required to be stored in the VS Code user settings files in this release, but all workspace settings are available as tools profile in ZAPP."),ss=t('<p>You can find an example for a DBB profile at the end of the sample ZAPP file from the zopeneditor-sample GitHub repository. If you removed all content as mentioned in the previous section, you can create a tools profile yourself as follows:</p><ol><li>Go to the end of your file behind the last property group to column 1.</li><li>Type the key word <code>profiles:</code> and press Enter.</li><li>As you can specify an ordered list of many profiles, start a new list by indenting and typing <code>-</code> followed by any of the properties proposed by the code completion.</li><li>When you select the mandatory <code>type</code> property, you can use a drop-down to select the type of the profile. Right now, only the type <code>dbb</code> is supported.</li><li>Once you selected the type <code>dbb</code>, you can add a <code>settings:</code> property, which defines an object of unordered properties that you can also enter after indentation with code completion.</li></ol><p>Instead of entering a DBB profile all manually, you can also use a code snippet provided by Z Open Editor as follows:</p><ol><li>In the column after the <code>profiles:</code> entry, press Ctrl+Space and select the <code>ZAPP User Build Profile</code> snippet.</li><li>The snippets contain a full DBB profile with placeholders. You can then navigate by pressing Tab and replace the placeholders with your specific values.</li></ol><h2 id="reviewing-syntax-errors" tabindex="-1"><a class="header-anchor" href="#reviewing-syntax-errors" aria-hidden="true">#</a> Reviewing syntax errors</h2>',5),ns=e("When you create an invalid "),as=s("code",null,"zapp.yaml",-1),ts=e(" file by typing incorrect YAML or misspelling property names, the "),os={href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"},is=e("Red Hat YAML extension"),rs=e(" will show you syntax errors in the Problems view. You can try it out as follows:"),ls=t('<ol><li>Remove a few letters from any of the properties to misspell it.</li><li>Switch to the VS Code Problems view. Use the <strong>View &gt; Problems View</strong> menu if you do not see it. This view will now show you the exact syntax error as well as the line and column it happened in.</li></ol><p>If you do not have the Red Hat YAML extension installed, you can still find simple error lists provided by Z Open Editor in the Output view as follows:</p><ol><li>Switch to the Output view. Use the <strong>View &gt; Output View</strong> menu if you do not see it.</li><li>On the right side of the Output view, select <strong>IBM Z Open Editor</strong> from the drop-down.</li><li>Make some syntax errors. Note that whereas the Red Hat extension will show you errors right away, here you will not see any errors until you attempt a save.</li><li>Save your file with the syntax error. Now the Output View will show you error messages such as <code>should NOT have additional properties(additionalProperty:lauage)</code>.</li></ol><p>As you can see, the output here is much simpler and does not have line numbers. The Red Hat extension is by far the superior solution for editing ZAPP files as that extension includes a full YAML Language Server that generates an Outline view.</p><h2 id="formatting-your-zapp-yaml-file" tabindex="-1"><a class="header-anchor" href="#formatting-your-zapp-yaml-file" aria-hidden="true">#</a> Formatting your zapp.yaml file</h2><p>Another capability of the Red Hat YAML extension is the ability to format your ZAPP file consistently. If you used different indentations in places, you can simply correct the formatting of the entire file by using one of the following two ways to format:</p><ul><li>Use the shortcut Shift+Option+F (Mac) or Shift+Alt+F (Windows).</li><li>Press Cmd+Shift+P (Mac) or Ctrl+Shift+P (Windows), and type &quot;format&quot; to select <strong>Format Document</strong>.</li></ul>',7);function ps(cs,us){const o=r("RouterLink"),a=r("ExternalLinkIcon");return l(),p(c,null,[f,m,b,y,g,k,s("ul",null,[s("li",null,[w,_,n(o,{to:"/Docs/setting_propertygroup.html"},{default:i(()=>[v]),_:1}),P]),A,s("li",null,[S,x,n(o,{to:"/Docs/ebcdic_encoding.html"},{default:i(()=>[z]),_:1}),B]),s("li",null,[M,O,s("a",Z,[q,n(a)]),I]),s("li",null,[C,E,n(o,{to:"/Docs/advanced_preprocessor.html"},{default:i(()=>[Y]),_:1}),L]),T]),R,s("p",null,[V,D,N,s("a",j,[U,n(a)]),H,F,G,n(o,{to:"/Docs/setting_propertygroup.html"},{default:i(()=>[J]),_:1}),W]),$,s("p",null,[X,s("a",K,[Q,n(a)]),ee]),se,s("p",null,[ne,n(o,{to:"/Docs/zcodeformatting.html"},{default:i(()=>[ae]),_:1}),te]),oe,s("p",null,[ie,s("a",re,[le,n(a)]),pe,ce,ue,de,he,fe,me]),be,ye,s("p",null,[s("a",ge,[ke,n(a)]),we]),_e,s("p",null,[ve,n(o,{to:"/Docs/setting_propertygroup.html"},{default:i(()=>[Pe]),_:1}),Ae]),Se,s("p",null,[xe,n(o,{to:"/Docs/ebcdic_encoding.html"},{default:i(()=>[ze]),_:1}),Be,Me,Oe,Ze,qe]),Ie,s("p",null,[Ce,Ee,Ye,Le,Te,s("a",Re,[Ve,n(a)]),De,s("a",Ne,[je,n(a)]),Ue]),He,s("p",null,[Fe,s("a",Ge,[Je,n(a)]),We]),$e,s("p",null,[Xe,s("a",Ke,[Qe,n(a)]),es]),ss,s("p",null,[ns,as,ts,s("a",os,[is,n(a)]),rs]),ls],64)}var fs=u(h,[["render",ps]]);export{fs as default};
