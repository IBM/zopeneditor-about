import{r as s,o as i,a as r,b as e,d as o,F as l,e as t,c as a}from"./app.0ad13b50.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const p={},d=e("h1",{id:"experimental-formatting-cobol-source-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#experimental-formatting-cobol-source-code","aria-hidden":"true"},"#"),t(" Experimental: Formatting COBOL source code")],-1),u=e("p",null,"IBM Z\xAE Open Editor v2.1.0 or newer provides an experimental COBOL source code formatting feature that allows developers to reformat the source code of an entire file, or the currently selected portion of the file, using the VS Code formatting menus and shortcuts. The rules of formatting are determined by a set of common defaults that can be customized along many criteria. The customizations of the default formatting rules are represented in a YAML or JSON file that can be stored in a version control system with the actual source code, in order to ensure that all developers in a project perform formatting consistently.",-1),h=t("The formatting customization files are called zcodeformat. They describe your structured formatting preferences defining only the changes you want to make to the defaults. The user experience working with these files was designed to be very consistent to how you work with "),m=e("a",{href:"zapp"},"ZAPP files",-1),f=t(" in Z Open Editor, but kept separate as ZAPP focuses on application properties independent of the presentation of the code. Our vision is for zcodeformat files to become as useful for z/OS\xAE Enterprise applications as formatting is with the popular "),y={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},b=t("Prettier"),g=t(" tool that is available for many other languages."),k=a('<p>Currently, this capability is only available for COBOL.</p><h2 id="formatting-your-cobol-files" tabindex="-1"><a class="header-anchor" href="#formatting-your-cobol-files" aria-hidden="true">#</a> Formatting your COBOL files</h2><p>To format your COBOL file (programs file or copybook) you can either</p><ul><li>format the full document via the right-click &quot;Format Document&quot; context menu option or via the shortcut Shift+Option+F (Mac) or Shift+Alt+F (Windows).</li><li>format the currently selected text range via the right-click &quot;Format Selection&quot; context menu option or via the shortcut Command-K Command-F (Mac) or Ctrl-K Ctrl-F (Windows).</li></ul><h2 id="getting-started-with-zcodeformat-files" tabindex="-1"><a class="header-anchor" href="#getting-started-with-zcodeformat-files" aria-hidden="true">#</a> Getting started with zcodeformat files</h2><p>Create a zcodeformat file in your development workspace, in the top-level directory that contains your .git directory if you are using git, and/or the top-level directory that you would open in VS Code with <strong>File &gt; Open...</strong>. This directory typically also contains your .vscode directory where your workspace settings are stored.</p><blockquote><p>Note: The current version of zcodeformat supports only single-root VS Code and Eclipse Che/RedHat\xAE CodeReady Workspaces workspaces.</p></blockquote><p>You can choose to edit your zcodeformat file as a YAML file or a JSON file, and create a file with either of the following names in your top-level directory. Only create one of these and name it exactly as shown below, using only lowercase characters.</p><ul><li><code>zcodeformat.yaml</code></li><li><code>zcodeformat.json</code></li></ul>',9),w=t("If you decide to use YAML, which is the recommended format, installing the "),v={href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"},_=t("Red Hat VS Code Extension"),x=t(" is also recommended. This VS Code Extension provides code completion, documentation and formatting features that are useful for zcodeformat. Z Open Editor automatically recognizes the Red Hat YAML extension installation and configures the zcodeformat schema for it in your VS Code user settings. Note, if you also have the Red Hat Ansible VS Code extension installed make sure that the language selected in VS Code for the zcodeformat files is YAML and not Ansible."),z=a(`<p>Code snippets for zcodeformat in YAML are also available and help to immediately become productive. If you use JSON, the default VS Code JSON editor also provides code completion and formatting, but there is currently no support for code snippets.</p><p>When Z Open Editor starts up it checks if the Red Hat YAML extension is installed. If it is, the editor will add links to the zcodeformat JSON schema that is used for the YAML editor for validation automatically. If this extension is not installed, Z Open Editor will only add a schema link to for the JSON editor. To verify that Z Open Editor has configured itself to work with the Red Hat YAML extension or VS Code JSON, look for entries as shown below in your VS Code user settings. The entries should be added after opening Z Open Editor. There might be other schema entries listed here such as the links to the ZAPP schema.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;yaml.schemas&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;file:///Users/user1/.vscode/extensions/ibm.zopeneditor-2.1.0/resources/zcodeformat-schema-0.0.1.json&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;zcodeformat.yaml&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;json.schemas&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;fileMatch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;/zcodeformat.json&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file:///Users/user1/.vscode/extensions/ibm.zopeneditor-2.1.0/resources/zcodeformat-schema-0.0.1.json&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>You are now ready to create your first zcodeformat file.</p><h2 id="precedence-of-formatting-settings-sets" tabindex="-1"><a class="header-anchor" href="#precedence-of-formatting-settings-sets" aria-hidden="true">#</a> Precedence of formatting settings sets</h2><p>Z Open Editor searches for formatting settings in the following order and uses only the first rule set it finds:</p><ol><li><code>zcodeformat.yaml</code> in the workspace directory</li><li><code>zcodeformat.json</code> in the workspace directory</li></ol><h2 id="a-zcodeformat-file-example" tabindex="-1"><a class="header-anchor" href="#a-zcodeformat-file-example" aria-hidden="true">#</a> A zcodeformat file example</h2><p>You can get started with zcodeformat by cloning our sample GitHub repository at</p>`,9),O={href:"https://github.com/IBM/zopeneditor-sample",target:"_blank",rel:"noopener noreferrer"},C=t("https://github.com/IBM/zopeneditor-sample"),A=t("."),S=a(`<p>This repository contains the following settings files so you can try all the variants and decide which works best for you:</p><ul><li>A <code>zcodeformat.yaml</code> file</li><li>A <code>zcodeformat-example.json</code> file</li></ul><p><strong>Note</strong>: Any property that is omitted within a zcodeformat file is set to a default value that can be found within the <code>COBOL Code Formatter template with all indentation options</code> <a href="#editing-the-zcodeformat.yaml-file-with-code-snippets">code snippet</a>.</p><p><strong>Note</strong>: According to the <a href="#precedence-of-configuration-settings-sets">precedence rules</a> stated in the previous section, if you want to try the <code>zcodeformat-example.json</code> file, you must first delete the <code>zcodeformat.yaml</code> file and rename it to <code>zcodeformat.json</code>.</p><h3 id="cobol-example" tabindex="-1"><a class="header-anchor" href="#cobol-example" aria-hidden="true">#</a> COBOL example</h3><p>The <code>zcodeformat.yaml</code> file contains the following content:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">cobol</span><span class="token punctuation">:</span>
  <span class="token key atrule">dataDivision</span><span class="token punctuation">:</span>
    <span class="token key atrule">alignValueClauses</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">indentation</span><span class="token punctuation">:</span>
      <span class="token key atrule">indentLength</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">procedureDivision</span><span class="token punctuation">:</span>
    <span class="token key atrule">indentation</span><span class="token punctuation">:</span>
      <span class="token key atrule">indentForAllBlocks</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">commentCase</span><span class="token punctuation">:</span> none
<span class="token key atrule">copybook</span><span class="token punctuation">:</span>
  <span class="token key atrule">codeCase</span><span class="token punctuation">:</span> upper
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>This simple example defines some custom preferences for the COBOL files contained in this sample repository that we chose to use for our files.</p><h3 id="copybook-example" tabindex="-1"><a class="header-anchor" href="#copybook-example" aria-hidden="true">#</a> Copybook example</h3><p>At the end of the <code>zcodeformat.yaml</code> file there is also an example for one of the supported copybook file options.</p><h2 id="editing-the-zcodeformat-yaml-file-with-code-completion" tabindex="-1"><a class="header-anchor" href="#editing-the-zcodeformat-yaml-file-with-code-completion" aria-hidden="true">#</a> Editing the zcodeformat.yaml file with code completion</h2><p>Code completion requires that you have the Red Hat VS Code YAML extension installed and configured as outlined above. You can try it out as follows;</p><ol><li>Place your curser behind the line with <code>indentLength: 1</code> (around line 5) and press Enter to start a new line.</li><li>Press Ctrl+Space to open up the code completion drop-down.</li></ol><p>It then shows the other property that could still be added here, <code>startOfAreaA</code>, which hasn&#39;t been specified by this zcodeformat file yet.</p><h2 id="editing-the-zcodeformat-yaml-file-with-code-snippets" tabindex="-1"><a class="header-anchor" href="#editing-the-zcodeformat-yaml-file-with-code-snippets" aria-hidden="true">#</a> Editing the zcodeformat.yaml file with code snippets</h2><p>The zcodeformat editor also provides a code snippet template for a complete zcodeformat file that you can use as a starting point. These code snippets are only available in the code editor when you edit a zcodeformat YAML file. You will not find them in the VS Code Snippets gallery, because VS Code currently cannot distinguish between different YAML file types in their snippet gallery.</p><p>To use these code snippets:</p><ol><li>In the current editor window for <code>zcodeformat.yaml</code>, do a Select-All and delete all the contents of the file. You can withdraw the deletion later as the file is managed in Git.</li><li>In the first line and column of the empty document, press Ctrl+Space and select <code>COBOL Code Formatter template with all indentation options Template</code> snippet. Instead of scrolling all the way to the bottom, type that snippet name instead.</li><li>You can see that a snippet was inserted that contains default values for COBOL and copybook formatting settings.</li></ol><h2 id="reviewing-syntax-errors" tabindex="-1"><a class="header-anchor" href="#reviewing-syntax-errors" aria-hidden="true">#</a> Reviewing syntax errors</h2>`,19),L=t("When you create an invalid "),M=e("code",null,"zcodeformat.yaml",-1),T=t(" file by typing incorrect YAML or misspelling property names, the "),V={href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",target:"_blank",rel:"noopener noreferrer"},q=t("Red Hat YAML extension"),B=t(" will show you syntax errors in the Problems view. You can try it out as follows:"),Y=a(`<ol><li>Remove a few letters from any of the properties to misspell it.</li><li>Switch to the VS Code Problems view. Use the <strong>View &gt; Problems View</strong> menu if you do not see it. This view will now show you the exact syntax error, as well as the line and column it happened in.</li></ol><p>If you do not have the Red Hat YAML extension installed, you can still find simple error lists provided by Z Open Editor in the output view as follows:</p><ol><li>Switch to the Output view. Use the <strong>View &gt; Output View</strong> menu if you do not see it.</li><li>On the right side of the output view, select <strong>IBM Z Open editor</strong> from the drop-down.</li><li>Make some syntax errors.</li><li>Save your file with the syntax error. (The Red Hat extension will not show any errors until you save the file.) Now the Output View will show you error messages such as <code>should NOT have additional properties</code>.</li></ol><p>As you can see, the output here is much simpler and does not have line numbers. The Red Hat Extension is by far the superior solution for editing zcodeformat files as it includes a full YAML Language Server that generates an outline view.</p><h3 id="common-syntax-errors" tabindex="-1"><a class="header-anchor" href="#common-syntax-errors" aria-hidden="true">#</a> Common syntax errors</h3><p>There are some restrictions on certain dependent and conflicting properties within a zcodeformat file.</p><ol><li><p>Any items within an <code>indentation</code> item are not allowed when the <code>enableIndentation</code> of the same level is set to false.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">cobol</span><span class="token punctuation">:</span>
  <span class="token key atrule">dataDivision</span><span class="token punctuation">:</span>
    <span class="token key atrule">enableIndentation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">indentation</span><span class="token punctuation">:</span>
      <span class="token key atrule">startOfAreaA</span><span class="token punctuation">:</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In this case, <code>startOfAreaA</code> is not allowed because <code>enableIndentation</code> is false</p></li><li><p>If any items are used within <strong>cobol &gt; procedureDivision &gt; blocks</strong>, <code>indentForAllBlocks</code> is now allowed within <strong>cobol &gt; procedureDivision</strong>.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">cobol</span><span class="token punctuation">:</span>
  <span class="token key atrule">procedureDivision</span><span class="token punctuation">:</span>
    <span class="token key atrule">enableIndentation</span><span class="token punctuation">:</span>
    <span class="token key atrule">indentation</span><span class="token punctuation">:</span>
      <span class="token key atrule">indentForAllBlocks</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">blocks</span><span class="token punctuation">:</span>
        <span class="token key atrule">indentExecBlock</span><span class="token punctuation">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>In this case, <code>indentForAllBlocks</code> is not allowed because <code>indentExecBlocks</code> is specified.</p><blockquote><p>Note: the <code>indentForAllBlocks</code> property is not allowed if any child properties underneath <code>blocks</code> are present.</p></blockquote></li></ol><h2 id="learning-the-schema" tabindex="-1"><a class="header-anchor" href="#learning-the-schema" aria-hidden="true">#</a> Learning the schema</h2>`,8),E=t("The built-in schema support of VS Code provides you with code completion and rich hovers that, together with the available code templates, allow you to learn the details behind the zcodeformat schema for writing these files. However, the formatter and schema is based on the code formatter available in IBM Developer for z/OS. See this "),F={href:"https://www.ibm.com/docs/en/developer-for-zos/16.0?topic=preferences-formatting-code-elements",target:"_blank",rel:"noopener noreferrer"},I=t("documentation page a for a reference"),N=t(" to learn how the different formatting options behave."),P=e("h2",{id:"formatting-your-zcodeformat-yaml-file",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#formatting-your-zcodeformat-yaml-file","aria-hidden":"true"},"#"),t(" Formatting your zcodeformat.yaml file")],-1),R=e("p",null,"Another capability of the Red Hat YAML extension is the ability to format your zcodeformat file consistently. For example, if you inadvertently used different indentations, you can simply correct the formatting of the entire file by using one of the following two formatting commands:",-1),H=e("ul",null,[e("li",null,"Use the shortcut Shift+Option+F (Mac) or Shift+Alt+F (Windows)."),e("li",null,[t('Press Cmd+Shift+P (Mac) or Ctrl+Shift+P (Windows), and type "format" to select '),e("strong",null,"Format Document"),t(".")])],-1);function j(Z,D){const n=s("ExternalLinkIcon");return i(),r(l,null,[d,u,e("p",null,[h,m,f,e("a",y,[b,o(n)]),g]),k,e("p",null,[w,e("a",v,[_,o(n)]),x]),z,e("p",null,[e("a",O,[C,o(n)]),A]),S,e("p",null,[L,M,T,e("a",V,[q,o(n)]),B]),Y,e("p",null,[E,e("a",F,[I,o(n)]),N]),P,R,H],64)}var U=c(p,[["render",j]]);export{U as default};
