import{r as o,o as i,a as p,b as e,d as s,w as l,F as c,c as t,e as n}from"./app.a2a94e98.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const d={},h=t('<h1 id="migrating-from-z-open-editor-v2-to-v3" tabindex="-1"><a class="header-anchor" href="#migrating-from-z-open-editor-v2-to-v3" aria-hidden="true">#</a> Migrating from Z Open Editor v2 to v3</h1><p>This page is for users migrating from IBM Z Open Editor versions 1 or 2. Z Open Editor version 3 introduces some breaking changes and the removal and replacement of a few capabilities that require manual migration steps. Review the changes below.</p><p><strong>Note: If you do not want to be surprised by a VS Code automatic update for this release and/or need more time to prepare a migration, we strongly recommend that you use the VS Code setting <code>extensions.autoUpdate</code> and switch it to <code>false</code>. If you don&#39;t want VS Code to even check for updates, you can set the <code>extensions.autoCheckUpdates</code> setting to <code>false</code>. However, this also prevents updates for other VS Code extensions from being installed.</strong></p><h2 id="features-that-have-been-removed-replaced" tabindex="-1"><a class="header-anchor" href="#features-that-have-been-removed-replaced" aria-hidden="true">#</a> Features that have been removed/replaced</h2>',4),b=e("strong",null,"Support for Java 8 removed",-1),m=n(": We compiled all of our language servers with Java 11 for this version of Z Open Editor. You will no longer be able to run the editor with a Java 8 runtime. You must upgrade to a Java 11 or newer runtime. For recommendations, see our updated "),k=n("Getting Started"),g=n(" section."),f=e("strong",null,[n("Property groups will no longer be supported as VS Code settings ("),e("code",null,"zopeneditor.propertygroups"),n(")")],-1),y=n(": We made the full switch to "),_={href:"https://ibm.github.io/zopeneditor-about/Docs/zapp.html",target:"_blank",rel:"noopener noreferrer"},w=n("ZAPP files"),v=n(" in this release. You need to move all your property groups from your user settings and/or workspace settings to a ZAPP file. Also see the next section for breaking changes for ZAPP property groups."),I=e("li",null,[e("strong",null,[n("User Build workspace setting will no longer be supported as VS Code settings ("),e("code",null,"zopeneditor.userbuild.workspaceSettings"),n(")")]),n(": We also made the switch to ZAPP here. The exception will be the user settings ("),e("code",null,"zopeneditor.userbuild.userSettings"),n("). Those will remain.")],-1),S=e("h2",{id:"breaking-feature-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#breaking-feature-changes","aria-hidden":"true"},"#"),n(" Breaking feature changes")],-1),q=n("In addition to moving Property Groups and User Build settings to ZAPP, we also made schema changes that require updates to existing ZAPP files. All of these changes are driven by enhancement requests from the community at "),P={href:"https://github.com/IBM/zopeneditor-about",target:"_blank",rel:"noopener noreferrer"},L=n("https://github.com/IBM/zopeneditor-about"),B=n(", IBM customers, and technical representatives that work with our customers every day. Changes in v3.0.0 represent the first increment of changes and requires breakages and manual migration. Going forward, our plan is to build on these changes in future updates, without requiring more manual migrations."),E=e("p",null,"The following changes require manual updates to your current ZAPP files:",-1),x=t(`<li><p><strong>Renamed properties</strong>: We fixed several places in which property names did not follow YAML/JSON naming conventions. We were aware of these issues, but did not update them in order to avoid migration. However, the required migration for version 3.0.0 created the ideal opportunity to fix them. The updated keywords below need to be replaced in your ZAPP files. Note that the first three properties in the table below are currently not used by Z Open Editor capabilities. They are planned to be used in future releases to support multiple ZAPP files and define relationships.</p><table><thead><tr><th>Old name</th><th>New name</th></tr></thead><tbody><tr><td>group-id</td><td>groupId</td></tr><tr><td>artifact-id</td><td>artifactId</td></tr><tr><td>parent-id</td><td>parentId</td></tr><tr><td>property-groups</td><td>propertyGroups</td></tr></tbody></table></li><li><p><strong>Simplified and refactored property groups</strong>: Based on suggestions in discussion threads and issues filed in our community GitHub repository, as well as other feedback from users, we refactored the property groups. The goal was to make writing property groups simpler and avoid redundancies, such as specifying compiler options multiple times. In the new structure you can create one property group per language and provide a list to local or remote locations for it. You can still create several property groups for the same language, if you prefer to. We also simplified the nesting of the location arrays to be less complex by eliminating the special property <code>syslib</code> and instead making it one of the possible name values. Here is an example for a PL/I property group using the new schema:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">propertyGroups</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pl1<span class="token punctuation">-</span>includes
    <span class="token key atrule">language</span><span class="token punctuation">:</span> pl1
    <span class="token key atrule">compilerOptions</span><span class="token punctuation">:</span> not(<span class="token tag">!)</span>
    <span class="token key atrule">libraries</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/INCLUDES&quot;</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;TOOLS&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> syslib
        <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;IBMUSER.SAMPLE.PLI.PLINC&quot;</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;IBMUSER.TOOLS.PLI.PLINC&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> mvs
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;IBMUSER.SAMPLE.PLI.INCLLIB&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYLIB
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/INCLUDELIB-MVS&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYFILES
        <span class="token key atrule">type</span><span class="token punctuation">:</span> local
        <span class="token key atrule">locations</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token string">&quot;**/INCLUDELIB&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>The <code>libraries</code> array defines the search order for include files. Within each <code>libraries</code> item there can be many <code>locations</code> items that are also searched in the order listed. For the example above, Z Open Editor will first look for regular include files using the entries specified under the name <code>syslib</code> in any local sub-folder that matches the folder name <code>INCLUDES</code>. Second, it will search in the one local folder <code>TOOLS</code> that is expected to be at the root of the current VS Code workspace in which the ZAPP file is located. If Z Open Editor does not find an include file in any of these local folders, it will then search in MVS in the data sets listed: <code>IBMUSER.SAMPLE.PLI.PLINC</code> first and <code>IBMUSER.TOOLS.PLI.PLINC</code> second. The same kind of search applies to the libraries <code>MYLIB</code> and <code>MYFILES</code> as defined in the example above. Note, that as in previous releases of Z Open Editor you can use multi-root workspaces with each workspace having its own ZAPP file. The search order will then be determined by the order of workspaces defined in the <code>.code-workspace</code> file.</p></li>`,2),M=e("strong",null,"Required application setting for User Build",-1),z=n(": In the 2.1.1 and 2.2.0 releases of Z Open Editor we changed the usage of the "),A=e("code",null,"--application",-1),O=n(" parameter for user build as a quick fix for an issue with multi-root workspaces. The disadvantage of the solution was that programs stored at the top-level folder of a VS Code workspace would be uploaded to the USS workspace without organizing them into an application-specific subfolder. (See "),C={href:"https://ibm.github.io/zopeneditor-about/Blog/new-releases.html#_2-1-1-2022-08-14",target:"_blank",rel:"noopener noreferrer"},Z=n("2.1.1 Release notes"),N=n(".) We have addressed this problem now by introducing a new mandatory setting for DBB ZAPP profiles called "),U=e("code",null,"application",-1),D=n(" that defines the application name as required by "),T={href:"https://github.com/IBM/dbb-zappbuild/blob/main/BUILD.md",target:"_blank",rel:"noopener noreferrer"},V=n("dbb-zappbuild"),R=n(". Users need to add this setting to their profiles. For example:"),F=t(`<div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">profiles</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dbb<span class="token punctuation">-</span>userbuild
    <span class="token key atrule">type</span><span class="token punctuation">:</span> dbb
    <span class="token key atrule">settings</span><span class="token punctuation">:</span>
      <span class="token key atrule">application</span><span class="token punctuation">:</span> SAM
      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;$DBB_HOME/bin/groovyz -DBB_PERSONAL_DAEMON&quot;</span>
      <span class="token key atrule">buildScriptPath</span><span class="token punctuation">:</span> <span class="token string">&quot;\${zopeneditor.userbuild.userSettings.dbbWorkspace}/dbb-zappbuild/build.groovy&quot;</span>
      <span class="token key atrule">buildScriptArgs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--userBuild&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--workspace \${zopeneditor.userbuild.userSettings.dbbWorkspace}&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--application \${application}&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--hlq \${zopeneditor.userbuild.userSettings.dbbHlq}&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--outDir \${zopeneditor.userbuild.userSettings.dbbLogDir}&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;--dependencyFile \${dependencyFile}&quot;</span>
      <span class="token key atrule">additionalDependencies</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> application<span class="token punctuation">-</span>conf
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,1),W=n("As you can see in the example, the value of the new "),Y=e("code",null,"application",-1),$=n(" setting can be referenced as a variable "),G=e("code",null,"${application}",-1),H=n(" within the profile, such as for the Groovy command argument. Since user build requires IBM Dependency Based Build, the documentation with user build changes and enhancements is only available in our "),J={href:"https://www.ibm.com/docs/en/cloud-paks/z-modernization-stack/2022.3?topic=code-building-cobol-pli-hlasm-programs-user-build",target:"_blank",rel:"noopener noreferrer"},j=n("User Documentation for the IBM Z and Cloud Modernization Stack"),K=n(".");function Q(X,ee){const r=o("RouterLink"),a=o("ExternalLinkIcon");return i(),p(c,null,[h,e("ul",null,[e("li",null,[b,m,s(r,{to:"/Docs/getting_started.html#prerequisites"},{default:l(()=>[k]),_:1}),g]),e("li",null,[f,y,e("a",_,[w,s(a)]),v]),I]),S,e("p",null,[q,e("a",P,[L,s(a)]),B]),E,e("ul",null,[x,e("li",null,[e("p",null,[M,z,A,O,e("a",C,[Z,s(a)]),N,U,D,e("a",T,[V,s(a)]),R]),F,e("p",null,[W,Y,$,G,H,e("a",J,[j,s(a)]),K])])])],64)}var ae=u(d,[["render",Q]]);export{ae as default};
