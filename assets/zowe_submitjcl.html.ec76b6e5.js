import{r as i,o as l,a as r,b as s,d as o,w as a,F as c,c as n,e}from"./app.f2f77f57.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const p={},u=n('<h1 id="submitting-jcl-to-compile-link-and-run-jobs-tutorial" tabindex="-1"><a class="header-anchor" href="#submitting-jcl-to-compile-link-and-run-jobs-tutorial" aria-hidden="true">#</a> Submitting JCL to compile, link, and run jobs tutorial</h1><h2 id="about-this-tutorial" tabindex="-1"><a class="header-anchor" href="#about-this-tutorial" aria-hidden="true">#</a> About this tutorial</h2><p>After you complete coding changes by using IBM Z Open Editor, you want to test your changes. In order to upload all the necessary files to z/OS and run jobs, you can use Zowe CLI commands, Zowe Explorer, or both for the operation.</p><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2>',4),h=e("Install IBM Z Open Editor and its prerequisites such as Java as described in "),m=e("Getting Started"),b=e("."),g=e("Install Zowe CLI as described in "),f=e("Setting up integrations"),L=e("."),w=s("h2",{id:"procedure",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#procedure","aria-hidden":"true"},"#"),e(" Procedure")],-1),S=n(`<li><p>To ensure that you have a working set of files, switch your local workspace to the <code>tutorial-complete</code> Git branch that has the final updated set of programs and support files through the branch icon at the lower left.</p></li><li><p>Allocate the data sets on z/OS. Sample JCL files such as <code>ALLOCATE.jcl</code> are provided to allocate the necessary files. Alternatively, you can use your own existing PDS, or create new data sets in the Data Sets view or with Zowe CLI commands.</p><p>Before you use a JCL file, adjust it for your user name with these steps:</p><ol><li><p>Click the JCL file to open it in the editor.</p><p><strong>Note</strong>: Language support for JCl is unavailable now. But JCL syntax highlighting is enabled.</p></li><li><p>Review the file. It creates data sets in the format <code>HLQ.SAMPLE.*</code>.</p></li><li><p>Modify the value for the symbolic <code>HLQ</code> to the high-level qualifier you want to use and save the file. For example, replace <code>TSOUSER</code> with your value.</p></li><li><p>Execute the JCL with one of the following methods:</p><ul><li>Zowe CLI command:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> zowe <span class="token function">jobs</span> submit local-file <span class="token string">&quot;JCL/ALLOCATE.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>The <code>Submit Job</code> option in Zowe Explorer</p><p>Take <code>ALLOCATE.jcl</code> as an example. To execute the job, take the following steps:</p><ol><li>Switch to Zowe Explorer.</li><li>Click the <code>USER1.SAMPLE.JCL(ALLOCATE)</code> data set member you created to open it in the editor.</li><li>Copy and paste the contents of JCL/ALLOCATE.jcl in the file tree into the PDS member, and save the member.</li><li>From the Zowe Explorer view, right-click the <code>ALLOCATE</code> member of <code>SAMPLE.JCL</code>, and select <code>Submit Job</code>.</li></ol><p>After you submit the job, a message box that shows the jcl was submitted and a job number in the lower right corner.</p><p>You can go to the <code>JOBS</code> view in Zowe Explorer to see the return code of the job. If the job does not exist in <code>JOBS</code> view, you might need to set the job owner to your USERID by right-clicking the <code>zoweCLI</code> line and selecting <code>Set Owner</code>.</p></li></ul></li><li><p>Verify the creation of these data sets using your user name by refreshing your data sets view. You might see the following lines:</p><div class="language-ascii ext-ascii line-numbers-mode"><pre class="language-ascii"><code>HLQ.SAMPLE.COBOL
HLQ.SAMPLE.COBCOPY
HLQ.SAMPLE.COPYLIB
HLQ.SAMPLE.OBJ
HLQ.SAMPLE.LOAD
HLQ.SAMPLE.CUSTFILE
HLQ.SAMPLE.TRANFILE
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol></li><li><p>After the data sets are created, upload the sample files to the appropriate data sets. Replace the user name with your name. Take COBOL as an example.</p><p>For COBOL and COPYBOOK PDS members, right-click the data set and select <code>Create New Member</code> to create files in MVS\u2122 data set. You need to create the members as follows:</p><ul><li>Upload the contents of the local files into the PDS data sets using the commands:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> zowe files ul dir-to-pds <span class="token string">&quot;COBOL&quot;</span> <span class="token string">&quot;USER1.SAMPLE.COBOL&quot;</span>
 zowe files ul dir-to-pds <span class="token string">&quot;COPYBOOK&quot;</span> <span class="token string">&quot;USER1.SAMPLE.COBCOPY&quot;</span>
 zowe files ul dir-to-pds <span class="token string">&quot;COPYLIB&quot;</span> <span class="token string">&quot;USER1.SAMPLE.COPYLIB&quot;</span>
 zowe files ul dir-to-pds <span class="token string">&quot;COPYLIB-MVS&quot;</span> <span class="token string">&quot;USER1.SAMPLE.COPYLIB&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Limitation</strong>: Drag and drop support to upload files in MVS data sets from the local file system is unavailable now.</p><p>For sequential files, use these Zowe CLI upload commands:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> zowe files ul ftds <span class="token string">&quot;RESOURCES/SAMPLE.CUSTFILE&quot;</span> <span class="token string">&quot;USER1.SAMPLE.CUSTFILE&quot;</span>

 zowe files ul ftds <span class="token string">&quot;RESOURCES/SAMPLE.TRANFILE&quot;</span> <span class="token string">&quot;USER1.SAMPLE.TRANFILE&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>After uploading to the data sets, click the COBOL data set members to open them in the editor. You see that the extension recognizes files as COBOL based on the defined files.associations preferences. Based on those settings, the editor is now using COBOL syntax highlight and provides all the other language server features mentioned earlier. Making changes and saving writes back to the MVS data set member directly.</p></li>`,3),C=n(`<p>Before executing the <code>RUN.jcl</code> that contains the COMPILE, LINK, and RUN steps for the program, modify the data set names again by following these steps:</p><ol><li><p>Click <code>RUN.jcl</code> in the File view to open it in the editor.</p></li><li><p>Perform the same modification to the <code>HLQ</code> symbolic, replacing <code>TSOUSER</code> with the same value used previously.</p></li><li><p>You might or might not need to modify the other symbolics depending on the compile and link libraries your host system uses.</p></li><li><p>You might or might not change the <code>SPACE1</code> and <code>SPACE2</code> symbolics, and save the file.</p></li><li><p>Submit the job with this Zowe CLI command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe <span class="token function">jobs</span> submit local-file <span class="token string">&quot;JCL/RUN.jcl&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Verify the completion of the job with Zowe JES Explorer or using this Zowe CLI command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> zowe <span class="token function">jobs</span> <span class="token function">ls</span> js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A response showing your job ID is displayed.</p></li><li><p>Check the job status with this command, replacing the job ID with yours:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe <span class="token function">jobs</span> view jsbj JOB03772
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Refresh the Remote Systems view to locate the data sets created by the <code>RUN.jcl</code> file.</p></li></ol><p>If the job succeeded, you can examine the results directly from the data sets explorer. Click the <code>USER1.SAMPLE.CUSTOUT</code> and <code>USER1.SAMPLE.CUSTRPT</code> data set. They are opened in the editor as text files that you can inspect.</p><p>You can use Zowe CLI commands to download the files as well. Get the contents of <code>SAMPLE.CUSTOUT</code> and <code>SAMPLE.CUSTRPT</code> with the following commands using your user name:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe files download ds <span class="token string">&quot;USER1.SAMPLE.CUSTOUT&quot;</span>
zowe files download ds <span class="token string">&quot;USER1.SAMPLE.CUSTRPT&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>These two downloaded files are now on the left in your editor and ready for review. You also can open these files directly from the Remote Systems explorer by double-clicking each file or dragging these files to the editor.</p><p>If you are exploring the REXX tutorial, you will notice a JCL called <code>REXALLOC.jcl</code> exists for allocating the necessary data sets to run the sample REXX program. There is not a JCL member to compile or run the REXX exec. After uploading <code>RSAM1</code> and the input data files to your TSO data set, you can run it by using the following Zowe CLI command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zowe tso issue <span class="token builtin class-name">command</span> <span class="token string">&quot;exec &#39;user1.sample.rexx(rsam1)&#39;&quot;</span> -a <span class="token operator">&lt;</span>ACCT<span class="token comment">#&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Note: If you create a TSO profile, <code>-a ACCT#</code> is not needed because it will be stored in that profile.</p>`,9),E=e("While this REXX example is not interactive, it is possible to execute interactive REXX execs (and other commands) with the RSE CLI plug-in as demonstrated in "),v=e("Run interactive TSO commands"),y=e(".");function O(A,k){const t=i("RouterLink");return l(),r(c,null,[u,s("ul",null,[s("li",null,[h,o(t,{to:"/Docs/getting_started.html"},{default:a(()=>[m]),_:1}),b]),s("li",null,[g,o(t,{to:"/Docs/setup_integration.html#installing-zowe-cli"},{default:a(()=>[f]),_:1}),L])]),w,s("ol",null,[S,s("li",null,[C,s("p",null,[E,o(t,{to:"/Docs/interact_zos_cli.html#run-interactive-tso-commands"},{default:a(()=>[v]),_:1}),y])])])],64)}var _=d(p,[["render",O]]);export{_ as default};
